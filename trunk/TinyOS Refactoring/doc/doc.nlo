\nomenclatureentry{aAST@[{AST}]\begingroup AST stands for abstract syntax tree. The yeti NesC parser generates for each source file such an AST. It is a first abstraction of the source code, based on the NesC syntax.\nomeqref {11.0}|nompageref}{41}
\nomenclatureentry{aEclipse@[{Eclipse}]\begingroup Is a so called integrated development environment engineered by IBM. An IDE facilitates program code writing.\nomeqref {11.0}|nompageref}{41}
\nomenclatureentry{aNesC@[{NesC}]\begingroup NesC (Network embedded systems C) is a component-based, event-driven programming language used to build applications for the TinyOS platform. TinyOS is an operating environment designed to run on embedded devices used in distributed Wireless Sensor Networks. nesC is built as an extension to the C programming language with components "wired" together to run applications on TinyOS.\nomeqref {11.0}|nompageref}{41}
\nomenclatureentry{aOSGi@[{OSGi}]\begingroup The OSGi framework is a module system and service platform for the Java programming language that implements a complete and dynamic component model, something that does not exist in standalone Java/VM environments. Applications or components (coming in the form of bundles for deployment) can be remotely installed, started, stopped, updated and uninstalled without requiring a reboot; management of Java packages/classes is specified in great detail. Life cycle management is done via APIs which allow for remote downloading  of management policies. The service registry allows bundles to detect the addition of new services, or the removal of services, and adapt accordingly. (from Wikipdedia)\nomeqref {11.0}|nompageref}{41}
\nomenclatureentry{aYeti@[{Yeti}]\begingroup The TinyOS 2.x Plug-in for Eclipse, nicknamed "Yeti 2", was developed by the Distributed Computing Group at ETH Zurich. The plug-in aims to provide developers with all the convenience functions expected from a modern development environment.\nomeqref {11.0}|nompageref}{41}
