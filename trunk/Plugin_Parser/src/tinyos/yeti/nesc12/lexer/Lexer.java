/* The following code was generated by JFlex 1.4.1 on 10/6/09 11:19 AM */

package tinyos.yeti.nesc12.lexer;

import tinyos.yeti.nesc12.parser.sym;
import java_cup.runtime.Symbol;
import tinyos.yeti.nesc12.parser.ScopeStack;
import tinyos.yeti.preprocessor.output.Insights;


 


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 10/6/09 11:19 AM from the specification file
 * <tt>temp.jflex</tt>
 */
public abstract class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\36\1\34\1\35\1\35\1\33\22\0\1\36\1\51\1\27"+
    "\1\0\1\1\1\53\1\46\1\26\1\41\1\42\1\47\1\15\1\62"+
    "\1\16\1\25\1\52\1\2\7\7\2\3\1\60\1\61\1\54\1\55"+
    "\1\45\1\30\1\107\1\4\1\101\1\103\1\4\1\22\1\20\5\1"+
    "\1\14\2\1\1\102\1\24\4\1\1\12\2\1\1\6\2\1\1\37"+
    "\1\10\1\40\1\56\1\100\1\0\1\74\1\32\1\75\1\71\1\21"+
    "\1\17\1\76\1\77\1\64\1\1\1\106\1\13\1\104\1\73\1\66"+
    "\1\23\1\1\1\72\1\63\1\67\1\11\1\31\1\105\1\5\1\70"+
    "\1\65\1\43\1\57\1\44\1\50\6\0\1\35\u1fa2\0\1\35\1\35"+
    "\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\3\2\1\4\1\5\3\2"+
    "\1\6\2\1\1\7\2\2\2\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\14\2\1\35\1\0\1\3\2\0\3\3\1\0"+
    "\1\36\3\2\2\0\1\37\1\40\1\41\1\42\1\43"+
    "\10\2\2\0\1\44\1\0\1\45\2\2\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\4\2\1\65\5\2"+
    "\1\66\5\2\1\67\13\2\1\0\1\3\1\0\4\3"+
    "\1\36\1\0\1\36\5\2\1\70\6\2\1\71\4\0"+
    "\3\2\1\72\1\73\7\2\1\74\12\2\1\75\3\2"+
    "\1\76\22\2\2\0\1\77\2\2\1\100\2\2\1\101"+
    "\1\2\1\102\1\103\1\2\2\0\1\2\1\104\14\2"+
    "\1\105\10\2\1\106\7\2\1\107\1\110\1\111\1\2"+
    "\1\112\12\2\1\0\1\2\1\113\1\114\2\2\1\115"+
    "\1\2\2\0\1\2\1\116\5\2\1\117\16\2\1\120"+
    "\2\2\1\121\12\2\1\122\2\2\1\123\1\0\1\2"+
    "\1\124\3\2\1\125\1\126\1\127\1\130\1\131\1\132"+
    "\1\133\5\2\1\134\1\2\1\135\3\2\1\136\1\137"+
    "\14\2\1\140\7\2\1\141\1\142\7\2\1\143\1\144"+
    "\6\2\1\145\1\2\1\146\1\147\1\2\1\150\1\2"+
    "\1\151\1\152\1\153\2\2\1\154\6\2\1\155\1\156"+
    "\1\157\1\2\1\160\1\2\1\161\6\2\1\162\14\2"+
    "\1\163\1\164";

  private static int [] zzUnpackAction() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438"+
    "\0\110\0\u0480\0\u04c8\0\u0510\0\110\0\110\0\110\0\110"+
    "\0\110\0\110\0\110\0\u0558\0\u05a0\0\u05e8\0\110\0\u0630"+
    "\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0\0\110\0\110"+
    "\0\110\0\u0828\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8"+
    "\0\u0a20\0\u0a68\0\u0ab0\0\u0af8\0\u0b40\0\110\0\u0b88\0\u0bd0"+
    "\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8\0\u0e10"+
    "\0\u0e58\0\u0ea0\0\u03f0\0\u0438\0\110\0\110\0\110\0\110"+
    "\0\110\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008\0\u1050\0\u1098"+
    "\0\u10e0\0\u1128\0\u1170\0\110\0\u11b8\0\110\0\u1200\0\u1248"+
    "\0\u1290\0\110\0\110\0\110\0\110\0\110\0\110\0\110"+
    "\0\110\0\u12d8\0\110\0\110\0\110\0\110\0\110\0\u1320"+
    "\0\u1368\0\u13b0\0\u13f8\0\220\0\u1440\0\u1488\0\u14d0\0\u1518"+
    "\0\u1560\0\u15a8\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u1710\0\u1758"+
    "\0\u17a0\0\u17e8\0\u1830\0\u1878\0\u18c0\0\u1908\0\u1950\0\u1998"+
    "\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8"+
    "\0\110\0\u1c20\0\u1c68\0\u1cb0\0\110\0\u1cf8\0\u1d40\0\u1d88"+
    "\0\u1dd0\0\u1e18\0\220\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38\0\u1f80"+
    "\0\u1fc8\0\110\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u2130\0\u2178"+
    "\0\u21c0\0\110\0\110\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328"+
    "\0\u2370\0\u23b8\0\u2400\0\u2448\0\u2490\0\u24d8\0\u2520\0\u2568"+
    "\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u26d0\0\220\0\u2718\0\u2760"+
    "\0\u27a8\0\220\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910\0\u2958"+
    "\0\u29a0\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u2b98"+
    "\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u2d00\0\u2d48\0\220\0\u2d90"+
    "\0\u2dd8\0\220\0\u2e20\0\u2e68\0\220\0\u2eb0\0\220\0\220"+
    "\0\u2ef8\0\u2f40\0\u2f88\0\u2fd0\0\220\0\u3018\0\u3060\0\u30a8"+
    "\0\u30f0\0\u3138\0\u3180\0\u31c8\0\u3210\0\u3258\0\u32a0\0\u32e8"+
    "\0\u3330\0\220\0\u3378\0\u33c0\0\u3408\0\u3450\0\u3498\0\u34e0"+
    "\0\u3528\0\u3570\0\220\0\u35b8\0\u3600\0\u3648\0\u3690\0\u36d8"+
    "\0\u3720\0\u3768\0\220\0\220\0\220\0\u37b0\0\220\0\u37f8"+
    "\0\u3840\0\u3888\0\u38d0\0\u3918\0\u3960\0\u39a8\0\u39f0\0\u3a38"+
    "\0\u3a80\0\u3ac8\0\u3b10\0\220\0\220\0\u3b58\0\u3ba0\0\220"+
    "\0\u3be8\0\u3c30\0\u3c78\0\u3cc0\0\220\0\u3d08\0\u3d50\0\u3d98"+
    "\0\u3de0\0\u3e28\0\220\0\u3e70\0\u3eb8\0\u3f00\0\u3f48\0\u3f90"+
    "\0\u3fd8\0\u4020\0\u4068\0\u40b0\0\u40f8\0\u4140\0\u4188\0\u41d0"+
    "\0\u4218\0\220\0\u4260\0\u42a8\0\220\0\u42f0\0\u4338\0\u4380"+
    "\0\u43c8\0\u4410\0\u4458\0\u44a0\0\u44e8\0\u4530\0\u4578\0\220"+
    "\0\u45c0\0\u4608\0\220\0\u4650\0\u4698\0\220\0\u46e0\0\u4728"+
    "\0\u4770\0\220\0\220\0\220\0\220\0\220\0\220\0\220"+
    "\0\u47b8\0\u4800\0\u4848\0\u4890\0\u48d8\0\220\0\u4920\0\220"+
    "\0\u4968\0\u49b0\0\u49f8\0\220\0\220\0\u4a40\0\u4a88\0\u4ad0"+
    "\0\u4b18\0\u4b60\0\u4ba8\0\u4bf0\0\u4c38\0\u4c80\0\u4cc8\0\u4d10"+
    "\0\u4d58\0\220\0\u4da0\0\u4de8\0\u4e30\0\u4e78\0\u4ec0\0\u4f08"+
    "\0\u4f50\0\220\0\220\0\u4f98\0\u4fe0\0\u5028\0\u5070\0\u50b8"+
    "\0\u5100\0\u5148\0\220\0\220\0\u5190\0\u51d8\0\u5220\0\u5268"+
    "\0\u52b0\0\u52f8\0\220\0\u5340\0\220\0\220\0\u5388\0\220"+
    "\0\u53d0\0\220\0\220\0\220\0\u5418\0\u5460\0\220\0\u54a8"+
    "\0\u54f0\0\u5538\0\u5580\0\u55c8\0\u5610\0\220\0\220\0\220"+
    "\0\u5658\0\220\0\u56a0\0\u56e8\0\u5730\0\u5778\0\u57c0\0\u5808"+
    "\0\u5850\0\u5898\0\220\0\u58e0\0\u5928\0\u5970\0\u59b8\0\u5a00"+
    "\0\u5a48\0\u5a90\0\u5ad8\0\u5b20\0\u5b68\0\u5bb0\0\u5bf8\0\220"+
    "\0\220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\3\3\1\5\1\2\1\6"+
    "\1\3\1\7\1\10\1\11\1\12\1\13\1\3\1\14"+
    "\1\3\1\15\1\3\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\3\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\2\3\1\54\1\3\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\3\1\63\3\3\1\64\1\65\1\3"+
    "\1\66\111\0\7\3\1\67\4\3\2\0\6\3\4\0"+
    "\2\3\30\0\24\3\3\0\1\70\1\71\1\0\2\72"+
    "\1\70\1\0\2\73\1\74\1\75\4\0\2\76\2\0"+
    "\1\77\64\0\2\5\3\0\1\5\1\0\2\73\1\74"+
    "\1\75\4\0\2\76\2\0\1\77\63\0\7\3\1\67"+
    "\4\3\2\0\6\3\4\0\2\3\30\0\1\100\7\3"+
    "\1\101\13\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\3\3\1\102\20\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\1\0\1\103\1\104\1\0"+
    "\2\3\30\0\24\3\16\0\1\105\37\0\1\106\50\0"+
    "\1\107\26\0\1\110\7\0\1\111\33\0\7\3\1\67"+
    "\2\3\1\112\1\3\2\0\6\3\4\0\2\3\30\0"+
    "\3\3\1\113\20\3\2\0\4\3\1\114\2\3\1\67"+
    "\2\3\1\115\1\3\2\0\6\3\4\0\1\116\1\3"+
    "\30\0\10\3\1\117\13\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\3\3\1\120\3\3"+
    "\1\121\14\3\3\0\2\77\3\0\1\77\15\0\1\122"+
    "\62\0\10\103\1\123\15\103\1\124\4\103\3\0\52\103"+
    "\10\104\1\125\16\104\1\126\3\104\3\0\52\104\1\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\3\3\1\127\20\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\7\3\1\130\14\3\35\0"+
    "\1\25\120\0\1\131\7\0\1\132\100\0\1\133\6\0"+
    "\1\134\107\0\1\135\107\0\1\136\107\0\1\137\107\0"+
    "\1\140\50\0\1\141\35\0\1\142\1\143\107\0\1\144"+
    "\107\0\1\145\107\0\1\146\1\0\1\147\31\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\1\3"+
    "\1\150\2\3\1\151\7\3\1\152\5\3\1\153\1\3"+
    "\2\0\7\3\1\67\4\3\2\0\1\154\5\3\4\0"+
    "\2\3\30\0\10\3\1\155\10\3\1\156\2\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\5\3\1\157\3\3\1\160\12\3\2\0\7\3\1\67"+
    "\4\3\2\0\2\3\1\161\3\3\4\0\2\3\30\0"+
    "\3\3\1\162\20\3\2\0\7\3\1\67\4\3\2\0"+
    "\2\3\1\163\3\3\4\0\2\3\30\0\24\3\2\0"+
    "\4\3\1\164\2\3\1\67\4\3\2\0\2\3\1\165"+
    "\3\3\4\0\2\3\30\0\3\3\1\166\20\3\2\0"+
    "\7\3\1\67\1\167\3\3\2\0\6\3\4\0\2\3"+
    "\30\0\1\170\3\3\1\171\17\3\2\0\7\3\1\67"+
    "\4\3\2\0\6\3\4\0\2\3\30\0\3\3\1\172"+
    "\5\3\1\173\2\3\1\174\7\3\2\0\7\3\1\67"+
    "\4\3\2\0\2\3\1\175\3\3\4\0\2\3\30\0"+
    "\3\3\1\176\20\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\15\3\1\177\1\200\1\3"+
    "\1\201\3\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\3\3\1\202\20\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\14\3"+
    "\1\203\7\3\12\0\2\204\77\0\1\70\1\71\3\0"+
    "\1\70\1\0\2\73\1\74\1\75\4\0\2\76\2\0"+
    "\1\77\64\0\2\71\3\0\1\71\11\0\2\76\2\0"+
    "\1\77\64\0\3\205\2\0\1\205\7\0\4\205\2\0"+
    "\1\206\4\0\1\205\36\0\1\205\2\0\2\205\3\0"+
    "\1\205\1\0\1\205\17\0\1\207\1\210\104\0\2\211"+
    "\1\212\105\0\2\211\1\0\1\212\75\0\2\213\3\0"+
    "\1\213\5\0\2\214\73\0\2\77\3\0\1\77\3\0"+
    "\2\215\2\0\2\215\2\76\66\0\7\3\1\67\4\3"+
    "\2\0\2\3\1\216\3\3\4\0\2\3\30\0\24\3"+
    "\2\0\7\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\1\217\1\220\22\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\10\3\1\221\13\3"+
    "\2\0\7\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\3\3\1\222\20\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\7\3\1\223\14\3"+
    "\2\0\7\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\4\3\1\224\17\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\1\225\23\3\2\0"+
    "\7\3\1\67\4\3\2\0\2\3\1\226\3\3\4\0"+
    "\2\3\30\0\24\3\2\0\7\3\1\67\1\227\3\3"+
    "\2\0\6\3\4\0\2\3\30\0\24\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\1\230"+
    "\23\3\2\0\7\3\1\67\4\3\2\0\6\3\4\0"+
    "\2\3\30\0\3\3\1\231\20\3\26\0\1\232\64\0"+
    "\1\103\2\0\1\233\1\0\2\103\2\234\4\0\1\103"+
    "\6\0\5\103\34\0\1\103\2\0\3\103\15\0\1\104"+
    "\2\0\1\235\1\0\2\104\2\236\4\0\1\104\6\0"+
    "\5\104\34\0\1\104\2\0\3\104\14\0\7\3\1\67"+
    "\2\3\1\237\1\3\2\0\6\3\4\0\2\3\30\0"+
    "\1\3\1\240\22\3\2\0\7\3\1\67\4\3\2\0"+
    "\2\3\1\241\3\3\4\0\2\3\30\0\24\3\56\0"+
    "\1\242\107\0\1\243\33\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\2\3\1\244\10\3\1\245"+
    "\10\3\2\0\7\3\1\67\4\3\2\0\6\3\4\0"+
    "\2\3\30\0\7\3\1\246\1\3\1\247\12\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\3\3\1\250\20\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\1\3\1\251\22\3\2\0"+
    "\7\3\1\67\2\3\1\252\1\3\2\0\6\3\4\0"+
    "\2\3\30\0\4\3\1\253\5\3\1\254\11\3\2\0"+
    "\7\3\1\67\4\3\2\0\4\3\1\255\1\3\4\0"+
    "\2\3\30\0\24\3\2\0\7\3\1\67\4\3\2\0"+
    "\4\3\1\256\1\3\4\0\2\3\30\0\24\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\1\257\23\3\2\0\7\3\1\67\4\3\2\0\1\260"+
    "\5\3\4\0\2\3\30\0\24\3\2\0\7\3\1\67"+
    "\1\261\3\3\2\0\6\3\4\0\2\3\30\0\24\3"+
    "\2\0\7\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\1\262\3\3\1\263\6\3\1\264\10\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\15\3\1\265\6\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\22\3\1\266\1\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\7\3\1\267\14\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\4\3\1\270\17\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\5\3\1\271\13\3\1\272\2\3\2\0\7\3\1\67"+
    "\4\3\2\0\6\3\4\0\2\3\30\0\3\3\1\273"+
    "\20\3\2\0\7\3\1\67\4\3\2\0\6\3\4\0"+
    "\2\3\30\0\10\3\1\274\10\3\1\275\2\3\2\0"+
    "\7\3\1\67\2\3\1\276\1\3\2\0\6\3\4\0"+
    "\2\3\30\0\1\277\23\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\11\3\1\300\12\3"+
    "\2\0\7\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\10\3\1\301\13\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\4\3\1\302\17\3"+
    "\2\0\7\3\1\67\4\3\2\0\2\3\1\303\3\3"+
    "\4\0\1\304\1\3\30\0\1\3\1\305\5\3\1\306"+
    "\1\3\1\307\1\310\11\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\17\3\1\311\4\3"+
    "\2\0\7\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\3\3\1\312\20\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\6\3\1\313\15\3"+
    "\2\0\7\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\1\3\1\314\22\3\3\0\3\315\2\0\1\315"+
    "\7\0\4\315\7\0\1\315\36\0\1\315\2\0\2\315"+
    "\3\0\1\315\1\0\1\315\6\0\3\205\2\0\1\205"+
    "\1\0\2\73\1\74\1\75\2\0\4\205\2\76\1\316"+
    "\4\0\1\205\36\0\1\205\2\0\2\205\3\0\1\205"+
    "\1\0\1\205\6\0\3\316\2\0\1\316\7\0\4\316"+
    "\7\0\1\316\36\0\1\316\2\0\2\316\3\0\1\316"+
    "\1\0\1\316\17\0\1\211\110\0\1\211\104\0\2\211"+
    "\77\0\2\213\3\0\1\213\3\0\2\215\2\0\2\215"+
    "\71\0\2\213\3\0\1\213\101\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\1\317\23\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\1\3\1\320\22\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\3\3\1\321\20\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\13\3\1\322\10\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\11\3\1\323\12\3\2\0"+
    "\7\3\1\67\4\3\2\0\2\3\1\324\3\3\4\0"+
    "\2\3\30\0\24\3\2\0\7\3\1\67\4\3\2\0"+
    "\2\3\1\325\3\3\4\0\2\3\30\0\24\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\10\3\1\326\13\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\21\3\1\327\2\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\4\3\1\330\17\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\1\331\1\3\30\0\24\3\3\0\3\103"+
    "\2\0\1\103\7\0\4\103\7\0\1\103\36\0\1\103"+
    "\2\0\2\103\3\0\1\103\1\0\1\103\6\0\3\332"+
    "\2\0\1\332\7\0\4\332\7\0\1\332\36\0\1\332"+
    "\2\0\2\332\3\0\1\332\1\0\1\332\6\0\3\104"+
    "\2\0\1\104\7\0\4\104\7\0\1\104\36\0\1\104"+
    "\2\0\2\104\3\0\1\104\1\0\1\104\6\0\3\333"+
    "\2\0\1\333\7\0\4\333\7\0\1\333\36\0\1\333"+
    "\2\0\2\333\3\0\1\333\1\0\1\333\5\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\11\3"+
    "\1\334\12\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\6\3\1\335\15\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\11\3"+
    "\1\336\12\3\2\0\7\3\1\67\4\3\2\0\2\3"+
    "\1\337\3\3\4\0\2\3\30\0\24\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\10\3"+
    "\1\340\13\3\2\0\7\3\1\67\1\341\3\3\2\0"+
    "\6\3\4\0\2\3\30\0\24\3\2\0\7\3\1\67"+
    "\4\3\2\0\6\3\4\0\2\3\30\0\4\3\1\342"+
    "\17\3\2\0\7\3\1\67\4\3\2\0\6\3\4\0"+
    "\2\3\30\0\7\3\1\343\14\3\2\0\7\3\1\67"+
    "\4\3\2\0\6\3\4\0\2\3\30\0\4\3\1\344"+
    "\17\3\2\0\7\3\1\67\4\3\2\0\6\3\4\0"+
    "\2\3\30\0\1\3\1\345\22\3\2\0\7\3\1\67"+
    "\4\3\2\0\2\3\1\346\3\3\4\0\2\3\30\0"+
    "\24\3\2\0\7\3\1\67\2\3\1\347\1\3\2\0"+
    "\6\3\4\0\2\3\30\0\24\3\2\0\7\3\1\67"+
    "\2\3\1\350\1\3\2\0\6\3\4\0\2\3\30\0"+
    "\24\3\2\0\7\3\1\67\4\3\2\0\2\3\1\351"+
    "\3\3\4\0\2\3\30\0\24\3\2\0\7\3\1\67"+
    "\4\3\2\0\6\3\4\0\2\3\30\0\23\3\1\352"+
    "\2\0\7\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\11\3\1\353\12\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\1\3\1\354\30\0\24\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\4\3\1\355\17\3\2\0\7\3\1\67\1\356\3\3"+
    "\2\0\6\3\4\0\2\3\30\0\24\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\1\3"+
    "\1\357\22\3\2\0\7\3\1\67\1\360\3\3\2\0"+
    "\6\3\4\0\2\3\30\0\1\361\23\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\11\3"+
    "\1\362\12\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\3\3\1\363\20\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\10\3"+
    "\1\364\13\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\21\3\1\365\2\3\2\0\7\3"+
    "\1\67\4\3\2\0\1\366\5\3\4\0\2\3\30\0"+
    "\1\367\3\3\1\370\17\3\2\0\7\3\1\67\4\3"+
    "\2\0\4\3\1\371\1\3\4\0\2\3\30\0\21\3"+
    "\1\372\2\3\2\0\7\3\1\67\2\3\1\373\1\3"+
    "\2\0\6\3\4\0\2\3\30\0\24\3\2\0\7\3"+
    "\1\67\4\3\2\0\2\3\1\374\3\3\4\0\2\3"+
    "\30\0\24\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\7\3\1\375\14\3\2\0\7\3"+
    "\1\67\4\3\2\0\2\3\1\376\3\3\4\0\2\3"+
    "\30\0\24\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\3\3\1\377\20\3\2\0\4\3"+
    "\1\u0100\2\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\24\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\3\3\1\u0101\20\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\10\3"+
    "\1\u0102\13\3\2\0\7\3\1\67\4\3\2\0\2\3"+
    "\1\u0103\3\3\4\0\2\3\30\0\24\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\1\u0104"+
    "\23\3\2\0\7\3\1\67\4\3\2\0\6\3\4\0"+
    "\2\3\30\0\3\3\1\u0105\20\3\2\0\7\3\1\67"+
    "\4\3\2\0\6\3\4\0\2\3\30\0\17\3\1\u0106"+
    "\4\3\2\0\7\3\1\67\4\3\2\0\6\3\4\0"+
    "\2\3\30\0\21\3\1\u0107\2\3\2\0\7\3\1\67"+
    "\1\u0108\3\3\2\0\6\3\4\0\2\3\30\0\24\3"+
    "\2\0\7\3\1\67\2\3\1\u0109\1\3\2\0\6\3"+
    "\4\0\2\3\30\0\24\3\3\0\3\u010a\2\0\1\u010a"+
    "\7\0\4\u010a\7\0\1\u010a\36\0\1\u010a\2\0\2\u010a"+
    "\3\0\1\u010a\1\0\1\u010a\6\0\3\316\2\0\1\316"+
    "\7\0\4\316\2\76\5\0\1\316\36\0\1\316\2\0"+
    "\2\316\3\0\1\316\1\0\1\316\5\0\7\3\1\67"+
    "\4\3\2\0\6\3\4\0\2\3\30\0\13\3\1\u010b"+
    "\10\3\2\0\7\3\1\67\4\3\2\0\6\3\4\0"+
    "\2\3\30\0\10\3\1\u010c\13\3\2\0\7\3\1\67"+
    "\4\3\2\0\6\3\4\0\2\3\30\0\4\3\1\u010d"+
    "\17\3\2\0\7\3\1\67\4\3\2\0\6\3\4\0"+
    "\2\3\30\0\7\3\1\u010e\1\u010f\13\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\4\3"+
    "\1\u0110\17\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\1\3\1\u0111\22\3\3\0\3\u0112"+
    "\2\0\1\u0112\7\0\4\u0112\7\0\1\u0112\36\0\1\u0112"+
    "\2\0\2\u0112\3\0\1\u0112\1\0\1\u0112\6\0\3\u0113"+
    "\2\0\1\u0113\7\0\4\u0113\7\0\1\u0113\36\0\1\u0113"+
    "\2\0\2\u0113\3\0\1\u0113\1\0\1\u0113\5\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\4\3"+
    "\1\u0114\17\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\23\3\1\u0115\2\0\7\3\1\67"+
    "\4\3\2\0\6\3\4\0\2\3\30\0\3\3\1\u0116"+
    "\20\3\2\0\7\3\1\67\4\3\2\0\2\3\1\u0117"+
    "\3\3\4\0\2\3\30\0\11\3\1\u0118\12\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\12\3\1\u0119\11\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\1\3\1\u011a\22\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\4\3\1\u011b\17\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\12\3\1\u011c\11\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\10\3\1\u011d\13\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\7\3\1\u011e\14\3\2\0"+
    "\7\3\1\67\1\u011f\3\3\2\0\6\3\4\0\2\3"+
    "\30\0\24\3\2\0\7\3\1\67\4\3\2\0\2\3"+
    "\1\u0120\3\3\4\0\2\3\30\0\24\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\6\3"+
    "\1\u0121\15\3\2\0\7\3\1\67\1\u0122\3\3\2\0"+
    "\6\3\4\0\2\3\30\0\24\3\2\0\7\3\1\67"+
    "\2\3\1\u0123\1\3\2\0\6\3\4\0\2\3\30\0"+
    "\24\3\2\0\7\3\1\67\4\3\2\0\6\3\4\0"+
    "\2\3\30\0\7\3\1\u0124\14\3\2\0\7\3\1\67"+
    "\4\3\2\0\6\3\4\0\2\3\30\0\7\3\1\u0125"+
    "\14\3\2\0\7\3\1\67\4\3\2\0\6\3\4\0"+
    "\2\3\30\0\1\u0126\23\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\10\3\1\u0127\13\3"+
    "\2\0\7\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\4\3\1\u0128\17\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\12\3\1\u0129\11\3"+
    "\2\0\7\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\12\3\1\u012a\11\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\1\3\1\u012b\22\3"+
    "\2\0\7\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\1\3\1\u012c\22\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\4\3\1\u012d\17\3"+
    "\2\0\7\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\1\3\1\u012e\22\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\3\3\1\u012f\20\3"+
    "\2\0\7\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\11\3\1\u0130\12\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\7\3\1\u0131\14\3"+
    "\2\0\7\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\4\3\1\u0132\17\3\2\0\7\3\1\67\2\3"+
    "\1\u0133\1\3\2\0\6\3\4\0\2\3\30\0\24\3"+
    "\2\0\7\3\1\67\2\3\1\u0134\1\3\2\0\6\3"+
    "\4\0\2\3\30\0\24\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\1\u0135\23\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\21\3\1\u0136\2\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\10\3\1\u0137\13\3\2\0"+
    "\7\3\1\67\3\3\1\u0138\2\0\6\3\4\0\2\3"+
    "\30\0\24\3\2\0\7\3\1\67\4\3\2\0\4\3"+
    "\1\u0139\1\3\4\0\2\3\30\0\24\3\2\0\7\3"+
    "\1\67\2\3\1\u013a\1\3\2\0\6\3\4\0\2\3"+
    "\30\0\24\3\2\0\7\3\1\67\4\3\2\0\2\3"+
    "\1\u013b\3\3\4\0\2\3\30\0\24\3\3\0\3\u013c"+
    "\2\0\1\u013c\7\0\4\u013c\7\0\1\u013c\36\0\1\u013c"+
    "\2\0\2\u013c\3\0\1\u013c\1\0\1\u013c\5\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\10\3"+
    "\1\u013d\13\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\10\3\1\u013e\13\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\1\u013f"+
    "\23\3\2\0\7\3\1\67\4\3\2\0\6\3\4\0"+
    "\2\3\30\0\6\3\1\u0140\15\3\3\0\3\233\2\0"+
    "\1\233\7\0\4\233\7\0\1\233\36\0\1\233\2\0"+
    "\2\233\3\0\1\233\1\0\1\233\6\0\3\235\2\0"+
    "\1\235\7\0\4\235\7\0\1\235\36\0\1\235\2\0"+
    "\2\235\3\0\1\235\1\0\1\235\5\0\7\3\1\67"+
    "\4\3\2\0\6\3\4\0\2\3\30\0\1\3\1\u0141"+
    "\22\3\2\0\7\3\1\67\4\3\2\0\1\u0142\5\3"+
    "\4\0\2\3\30\0\24\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\6\3\1\u0143\15\3"+
    "\2\0\7\3\1\67\2\3\1\u0144\1\3\2\0\6\3"+
    "\4\0\2\3\30\0\24\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\4\3\1\u0145\17\3"+
    "\2\0\7\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\12\3\1\u0146\11\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\14\3\1\u0147\7\3"+
    "\2\0\7\3\1\67\4\3\2\0\2\3\1\u0148\3\3"+
    "\4\0\2\3\30\0\24\3\2\0\7\3\1\67\4\3"+
    "\2\0\1\u0149\5\3\4\0\2\3\30\0\24\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\6\3\1\u014a\15\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\21\3\1\u014b\2\3\2\0"+
    "\7\3\1\67\4\3\2\0\2\3\1\u014c\3\3\4\0"+
    "\2\3\30\0\24\3\2\0\7\3\1\67\2\3\1\u014d"+
    "\1\3\2\0\6\3\4\0\2\3\30\0\24\3\2\0"+
    "\7\3\1\67\4\3\2\0\2\3\1\u014e\3\3\4\0"+
    "\2\3\30\0\24\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\1\3\1\u014f\22\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\10\3\1\u0150\13\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\4\3\1\u0151\17\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\1\3\1\u0152\22\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\7\3\1\u0153\14\3\2\0"+
    "\7\3\1\67\4\3\2\0\2\3\1\u0154\3\3\4\0"+
    "\2\3\30\0\24\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\12\3\1\u0155\11\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\13\3\1\u0156\10\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\10\3\1\u0157\13\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\10\3\1\u0158\13\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\10\3\1\u0159\13\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\1\3\1\u015a\22\3\2\0\7\3\1\67\4\3\2\0"+
    "\2\3\1\u015b\3\3\4\0\2\3\30\0\24\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\11\3\1\u015c\12\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\1\3\1\u015d\22\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\4\3\1\u015e\17\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\15\3\1\u015f\6\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\1\u0160\23\3\2\0\7\3\1\67\2\3\1\u0161\1\3"+
    "\2\0\6\3\4\0\2\3\30\0\24\3\2\0\7\3"+
    "\1\67\4\3\2\0\2\3\1\u0162\3\3\4\0\2\3"+
    "\30\0\24\3\3\0\3\3\2\0\1\3\7\0\4\3"+
    "\7\0\1\3\36\0\1\3\2\0\2\3\3\0\1\3"+
    "\1\0\1\3\5\0\7\3\1\67\4\3\2\0\2\3"+
    "\1\u0163\3\3\4\0\2\3\30\0\24\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\1\3"+
    "\1\u0164\22\3\2\0\7\3\1\67\4\3\2\0\2\3"+
    "\1\u0165\3\3\4\0\2\3\30\0\24\3\2\0\7\3"+
    "\1\67\2\3\1\u0166\1\3\2\0\6\3\4\0\2\3"+
    "\30\0\24\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\11\3\1\u0167\12\3\2\0\7\3"+
    "\1\67\4\3\2\0\2\3\1\u0168\3\3\4\0\2\3"+
    "\30\0\24\3\2\0\7\3\1\67\4\3\2\0\2\3"+
    "\1\u0169\3\3\4\0\2\3\30\0\24\3\2\0\7\3"+
    "\1\67\4\3\2\0\1\u016a\5\3\4\0\2\3\30\0"+
    "\24\3\2\0\7\3\1\67\4\3\2\0\6\3\4\0"+
    "\2\3\30\0\4\3\1\u016b\17\3\2\0\7\3\1\67"+
    "\4\3\2\0\6\3\4\0\2\3\30\0\12\3\1\u016c"+
    "\11\3\2\0\7\3\1\67\4\3\2\0\2\3\1\u016d"+
    "\3\3\4\0\2\3\30\0\24\3\2\0\7\3\1\67"+
    "\4\3\2\0\6\3\4\0\2\3\30\0\3\3\1\u016e"+
    "\20\3\2\0\7\3\1\67\1\u016f\3\3\2\0\6\3"+
    "\4\0\2\3\30\0\24\3\2\0\7\3\1\67\1\u0170"+
    "\3\3\2\0\6\3\4\0\2\3\30\0\24\3\2\0"+
    "\7\3\1\67\1\u0171\3\3\2\0\6\3\4\0\2\3"+
    "\30\0\24\3\2\0\7\3\1\67\4\3\2\0\2\3"+
    "\1\u0172\3\3\4\0\2\3\30\0\24\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\6\3"+
    "\1\u0173\15\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\12\3\1\u0174\11\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\10\3"+
    "\1\u0175\13\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\4\3\1\u0176\17\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\10\3"+
    "\1\u0177\13\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\7\3\1\u0178\14\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\15\3"+
    "\1\272\6\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\4\3\1\u0179\17\3\2\0\7\3"+
    "\1\67\4\3\2\0\2\3\1\u017a\3\3\4\0\2\3"+
    "\30\0\24\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\6\3\1\u017b\15\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\3\3"+
    "\1\u017c\20\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\1\u017d\23\3\2\0\7\3\1\67"+
    "\4\3\2\0\2\3\1\u017e\3\3\4\0\2\3\30\0"+
    "\24\3\2\0\7\3\1\67\4\3\2\0\6\3\4\0"+
    "\2\3\30\0\12\3\1\u017f\11\3\2\0\7\3\1\67"+
    "\4\3\2\0\6\3\4\0\2\3\30\0\1\u0180\23\3"+
    "\2\0\7\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\10\3\1\u0181\13\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\4\3\1\u0182\17\3"+
    "\2\0\7\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\7\3\1\u0183\14\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\10\3\1\u0184\13\3"+
    "\2\0\7\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\12\3\1\u0185\11\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\7\3\1\u0186\14\3"+
    "\2\0\7\3\1\67\4\3\2\0\2\3\1\u0187\3\3"+
    "\4\0\2\3\30\0\24\3\2\0\7\3\1\67\4\3"+
    "\2\0\6\3\4\0\2\3\30\0\10\3\1\u0188\13\3"+
    "\2\0\7\3\1\67\4\3\2\0\6\3\4\0\2\3"+
    "\30\0\1\u0189\23\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\1\3\1\u018a\22\3\2\0"+
    "\7\3\1\67\4\3\2\0\2\3\1\u018b\3\3\4\0"+
    "\2\3\30\0\24\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\1\3\1\u018c\22\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\15\3\1\u018d\6\3\2\0\4\3\1\u018e\2\3\1\67"+
    "\4\3\2\0\6\3\4\0\2\3\30\0\24\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\10\3\1\u018f\13\3\2\0\7\3\1\67\4\3\2\0"+
    "\2\3\1\u0190\3\3\4\0\2\3\30\0\24\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\4\3\1\u0191\17\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\4\3\1\u0192\17\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\11\3\1\u0193\12\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\4\3\1\u0194\17\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\1\3\1\u0195\22\3\2\0\7\3\1\67\2\3\1\u0196"+
    "\1\3\2\0\6\3\4\0\2\3\30\0\24\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\15\3\1\u0197\6\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\12\3\1\u0198\11\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\15\3\1\u012d\6\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\11\3\1\u0199\12\3\2\0"+
    "\7\3\1\67\4\3\2\0\6\3\4\0\2\3\30\0"+
    "\4\3\1\u019a\17\3\2\0\7\3\1\67\4\3\2\0"+
    "\6\3\4\0\2\3\30\0\1\u019b\23\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\3\3"+
    "\1\u019c\20\3\2\0\7\3\1\67\4\3\2\0\2\3"+
    "\1\u019d\3\3\4\0\2\3\30\0\24\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\15\3"+
    "\1\u0148\6\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\4\3\1\u019e\17\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\4\3"+
    "\1\u019f\17\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\1\3\1\u01a0\22\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\10\3"+
    "\1\u01a1\13\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\15\3\1\u01a2\6\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\15\3"+
    "\1\u01a3\6\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\1\3\1\u01a4\22\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\3\3"+
    "\1\u01a5\20\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\15\3\1\u01a6\6\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\15\3"+
    "\1\u017e\6\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\15\3\1\u0182\6\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\3\3"+
    "\1\u01a7\20\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\10\3\1\u01a8\13\3\2\0\7\3"+
    "\1\67\4\3\2\0\6\3\4\0\2\3\30\0\15\3"+
    "\1\u018f\6\3\2\0\7\3\1\67\4\3\2\0\6\3"+
    "\4\0\2\3\30\0\10\3\1\u01a9\13\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23616];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\1\11\3\1\7\11\3\1\1\11"+
    "\7\1\3\11\14\1\1\11\1\0\1\1\2\0\3\1"+
    "\1\0\4\1\2\0\5\11\10\1\2\0\1\11\1\0"+
    "\1\11\3\1\10\11\1\1\5\11\34\1\1\0\1\1"+
    "\1\0\2\1\1\11\2\1\1\0\1\11\14\1\1\11"+
    "\4\0\3\1\2\11\51\1\2\0\13\1\2\0\56\1"+
    "\1\0\7\1\2\0\50\1\1\0\155\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private ScopeStack scopes;
	
	private Symbol[] cache = new Symbol[4];
	private int cacheIndex = 0;
	
	private int tokenBegin = 0;
	
	
	public void setScopeStack( ScopeStack scopes ){
		this.scopes = scopes;
	}

	public ScopeStack getScopeStack(){
		return scopes;
	}
	
	private void reportError(){
		scopes.getParser().reportError( "Unknown token: '" + yytext() + "'", Insights.unknownSyntaxError(), tokenBegin, tokenBegin + yylength() );
		tokenBegin += yylength();
	}
	
	private Symbol token( int type ){
		return token( type, tokenBegin, tokenBegin + yylength(), yytext() );
	}
	
	private Symbol token( int type, String text ){
		return token( type, tokenBegin, tokenBegin + yylength(), text );
	}
	
	private Symbol token( int type, int left, int right, String text ){
		Symbol result = new Symbol( type, left, right, new Token( text, left, right, scopes.getLevel() ));
		cache[ cacheIndex++ ] = result;
		cacheIndex %= cache.length;
		tokenBegin = right;
		return result;
	}
	
	private Symbol follow( int type ){
		Symbol current = token( type );
		sendLater( current );
		return current;
	}
	
	protected abstract void sendLater( Symbol symbol );
	
	public Symbol previous( Symbol current ){
		for( int i = 0; i < cache.length; i++ ){
			if( cache[i] == current ){
				i -= 1;
				if( i < 0 )
					i += cache.length;
					
				if( i == cacheIndex )
					return null;
					
				return cache[i];
			}
		}
		
		return null;
	}
	
	public Symbol next( Token current ){
		for( int i = 0; i < cache.length; i++ ){
			if( cache[i].value == current ){
				i += 1;
				if( i >= cache.length )
					i -= cache.length;
					
				if( i == cacheIndex )
					return null;
					
				return cache[i];
			}
		}
		
		return null;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 75: 
          { return token( sym.K_UNION );
          }
        case 117: break;
        case 104: 
          { return token( sym.NK_INCLUDES );
          }
        case 118: break;
        case 73: 
          { return token( sym.K_CHAR );
          }
        case 119: break;
        case 101: 
          { return token( sym.K_UNSIGNED );
          }
        case 120: break;
        case 86: 
          { return token( sym.K_SIGNED );
          }
        case 121: break;
        case 34: 
          { return token( sym.P_RIGHT_ARROW );
          }
        case 122: break;
        case 52: 
          { return token( sym.P_OR );
          }
        case 123: break;
        case 27: 
          { return follow( sym.P_SEMICOLON );
          }
        case 124: break;
        case 47: 
          { return token( sym.P_SHIFT_LEFT );
          }
        case 125: break;
        case 45: 
          { return token( sym.P_MOD_ASSIGN );
          }
        case 126: break;
        case 77: 
          { return token( sym.NK_EVENT );
          }
        case 127: break;
        case 14: 
          { return follow( sym.P_CURLY_CLOSE );
          }
        case 128: break;
        case 60: 
          { return token( sym.K_INT );
          }
        case 129: break;
        case 94: 
          { return token( sym.NK_NORACE );
          }
        case 130: break;
        case 35: 
          { return token( sym.P_SUB_ASSIGN );
          }
        case 131: break;
        case 25: 
          { return token( sym.P_LINE );
          }
        case 132: break;
        case 11: 
          { return follow( sym.P_ROUND_OPEN );
          }
        case 133: break;
        case 50: 
          { return token( sym.P_XOR_ASSIGN );
          }
        case 134: break;
        case 87: 
          { return token( sym.NK_SIGNAL );
          }
        case 135: break;
        case 76: 
          { return token( sym.K_FLOAT );
          }
        case 136: break;
        case 116: 
          { return token( sym.NK_IMPLEMENTATION );
          }
        case 137: break;
        case 71: 
          { return token( sym.NK_CALL );
          }
        case 138: break;
        case 115: 
          { return token( sym.NK_CONFIGURATION );
          }
        case 139: break;
        case 88: 
          { return token( sym.K_STRUCT );
          }
        case 140: break;
        case 92: 
          { return token( sym.K_DOUBLE );
          }
        case 141: break;
        case 38: 
          { return token( sym.P_SHIFT_RIGHT );
          }
        case 142: break;
        case 39: 
          { return token( sym.P_GREATER_EQ );
          }
        case 143: break;
        case 63: 
          { return token( sym.NK_USES );
          }
        case 144: break;
        case 113: 
          { return token( sym.NK_COMPONENT );
          }
        case 145: break;
        case 43: 
          { return token( sym.P_NOT_EQ );
          }
        case 146: break;
        case 72: 
          { return token( sym.K_CASE );
          }
        case 147: break;
        case 23: 
          { return token( sym.P_ASSIGN );
          }
        case 148: break;
        case 16: 
          { return token( sym.P_AMP );
          }
        case 149: break;
        case 105: 
          { return token( sym.K_RESTRICT );
          }
        case 150: break;
        case 30: 
          { return token( sym.FLOATING_CONSTANT );
          }
        case 151: break;
        case 21: 
          { return token( sym.P_PERCENT );
          }
        case 152: break;
        case 12: 
          { return follow( sym.P_ROUND_CLOSE );
          }
        case 153: break;
        case 93: 
          { return token( sym.K_RETURN );
          }
        case 154: break;
        case 114: 
          { return token( sym.NK_COMPONENTS );
          }
        case 155: break;
        case 102: 
          { return token( sym.NK_PROVIDES );
          }
        case 156: break;
        case 57: 
          { return token( sym.P_ELLIPSIS );
          }
        case 157: break;
        case 17: 
          { return token( sym.P_STAR );
          }
        case 158: break;
        case 37: 
          { return token( sym.STRING );
          }
        case 159: break;
        case 56: 
          { return token( sym.K_FOR );
          }
        case 160: break;
        case 18: 
          { return token( sym.P_TILDE );
          }
        case 161: break;
        case 83: 
          { return token( sym.K_WHILE );
          }
        case 162: break;
        case 59: 
          { return token( sym.P_SHIFT_LEFT_ASSIGN );
          }
        case 163: break;
        case 1: 
          { reportError();
          }
        case 164: break;
        case 2: 
          { String text = yytext();
							if( scopes.isTypedef( text )){
								return token( sym.TYPEDEF, text );
							}
							else if( scopes.isEnum( text )){
								return token( sym.ENUMERATION_CONSTANT ); 
							}
							else{
								return token( sym.IDENTIFIER, text );
							}
          }
        case 165: break;
        case 46: 
          { return token( sym.NP_LEFT_ARROW );
          }
        case 166: break;
        case 78: 
          { return token( sym.K_BREAK );
          }
        case 167: break;
        case 98: 
          { return token( sym.K_DEFAULT );
          }
        case 168: break;
        case 91: 
          { return token( sym.K_INLINE );
          }
        case 169: break;
        case 97: 
          { return token( sym.K_TYPEDEF );
          }
        case 170: break;
        case 61: 
          { return token( sym.NK_NEW );
          }
        case 171: break;
        case 22: 
          { return follow( sym.P_SMALLER );
          }
        case 172: break;
        case 96: 
          { return token( sym.NK_MODULE );
          }
        case 173: break;
        case 48: 
          { return token( sym.P_SMALLER_EQ );
          }
        case 174: break;
        case 32: 
          { return token( sym.P_ADD_ASSIGN );
          }
        case 175: break;
        case 89: 
          { return token( sym.K_STATIC );
          }
        case 176: break;
        case 112: 
          { return token( sym.NK_NX_STRUCT );
          }
        case 177: break;
        case 80: 
          { return token( sym.NK_ASYNC );
          }
        case 178: break;
        case 6: 
          { return token( sym.P_POINT );
          }
        case 179: break;
        case 31: 
          { return token( sym.P_INCREMENT );
          }
        case 180: break;
        case 85: 
          { return token( sym.K_SIZEOF );
          }
        case 181: break;
        case 95: 
          { return token( sym.NK_ATOMIC );
          }
        case 182: break;
        case 103: 
          { return token( sym.K_VOLATILE );
          }
        case 183: break;
        case 51: 
          { return token( sym.P_OR_ASSIGN );
          }
        case 184: break;
        case 65: 
          { return token( sym.K_ELSE );
          }
        case 185: break;
        case 15: 
          { return follow( sym.P_GREATER );
          }
        case 186: break;
        case 26: 
          { return token( sym.P_COLON );
          }
        case 187: break;
        case 84: 
          { return token( sym.K_EXTERN );
          }
        case 188: break;
        case 81: 
          { return token( sym.K_CONST );
          }
        case 189: break;
        case 5: 
          { return token( sym.P_MINUS );
          }
        case 190: break;
        case 42: 
          { return token( sym.P_MUL_ASSIGN );
          }
        case 191: break;
        case 107: 
          { return token( sym.NK_NX_UNION );
          }
        case 192: break;
        case 110: 
          { return token( sym.K_EXTENSION );
          }
        case 193: break;
        case 7: 
          { return token( sym.P_QUESTION );
          }
        case 194: break;
        case 111: 
          { return token( sym.NK_INTERFACE );
          }
        case 195: break;
        case 90: 
          { return token( sym.K_SWITCH );
          }
        case 196: break;
        case 79: 
          { return token( sym.K_SHORT );
          }
        case 197: break;
        case 70: 
          { return token( sym.K_AUTO );
          }
        case 198: break;
        case 62: 
          { return token( sym.K_ASM );
          }
        case 199: break;
        case 106: 
          { return token( sym.K_REGISTER );
          }
        case 200: break;
        case 100: 
          { return token( sym.NK_GENERIC );
          }
        case 201: break;
        case 19: 
          { return token( sym.P_EXCLAMATION );
          }
        case 202: break;
        case 66: 
          { return token( sym.K_ENUM );
          }
        case 203: break;
        case 58: 
          { return token( sym.P_SHIFT_RIGHT_ASSIGN );
          }
        case 204: break;
        case 74: 
          { return token( sym.K_GOTO );
          }
        case 205: break;
        case 40: 
          { return token( sym.P_AND );
          }
        case 206: break;
        case 82: 
          { return token( sym.K__BOOL );
          }
        case 207: break;
        case 10: 
          { return token( sym.P_RECT_CLOSE );
          }
        case 208: break;
        case 53: 
          { return token( sym.K_IF );
          }
        case 209: break;
        case 69: 
          { return token( sym.NK_TASK );
          }
        case 210: break;
        case 64: 
          { return token( sym.K_LONG );
          }
        case 211: break;
        case 109: 
          { return token( sym.K__COMPLEX );
          }
        case 212: break;
        case 33: 
          { return token( sym.P_DECREMENT );
          }
        case 213: break;
        case 28: 
          { return token( sym.P_COMMA );
          }
        case 214: break;
        case 36: 
          { return token( sym.CHARACTER_CONSTANT );
          }
        case 215: break;
        case 41: 
          { return token( sym.P_AND_ASSIGN );
          }
        case 216: break;
        case 3: 
          { return token( sym.INTEGER_CONSTANT );
          }
        case 217: break;
        case 99: 
          { return token( sym.NK_COMMAND );
          }
        case 218: break;
        case 67: 
          { return token( sym.NK_POST );
          }
        case 219: break;
        case 4: 
          { return token( sym.P_PLUS );
          }
        case 220: break;
        case 68: 
          { return token( sym.K_VOID );
          }
        case 221: break;
        case 108: 
          { return token( sym.K_CONTINUE );
          }
        case 222: break;
        case 49: 
          { return token( sym.P_EQ );
          }
        case 223: break;
        case 54: 
          { return token( sym.K_DO );
          }
        case 224: break;
        case 20: 
          { return token( sym.P_SLASH );
          }
        case 225: break;
        case 55: 
          { return token( sym.NK_AS );
          }
        case 226: break;
        case 29: 
          { return token( sym.NP_AT );
          }
        case 227: break;
        case 44: 
          { return token( sym.P_DIV_ASSIGN );
          }
        case 228: break;
        case 13: 
          { return follow( sym.P_CURLY_OPEN );
          }
        case 229: break;
        case 24: 
          { return token( sym.P_CARET );
          }
        case 230: break;
        case 9: 
          { return token( sym.P_RECT_OPEN );
          }
        case 231: break;
        case 8: 
          { tokenBegin += yylength();
          }
        case 232: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
