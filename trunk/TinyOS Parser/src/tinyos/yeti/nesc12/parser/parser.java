/*
 * Yeti 2, NesC development in Eclipse.
 * Copyright (C) 2009 ETH Zurich
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Web:  http://tos-ide.ethz.ch
 * Mail: tos-ide@tik.ee.ethz.ch
 */

//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 06 11:19:47 CEST 2009
//----------------------------------------------------

package tinyos.yeti.nesc12.parser;

import java_cup.runtime.Symbol;
import java.util.*;
import tinyos.yeti.nesc12.lexer.Token;
import tinyos.yeti.nesc12.lexer.Lexer;
import tinyos.yeti.nesc12.parser.ast.*;
import tinyos.yeti.nesc12.parser.ast.nodes.*;
import tinyos.yeti.nesc12.parser.ast.nodes.declaration.*;
import tinyos.yeti.nesc12.parser.ast.nodes.definition.*;
import tinyos.yeti.nesc12.parser.ast.nodes.error.*;
import tinyos.yeti.nesc12.parser.ast.nodes.expression.*;
import tinyos.yeti.nesc12.parser.ast.nodes.general.*;
import tinyos.yeti.nesc12.parser.ast.nodes.nesc.*;
import tinyos.yeti.nesc12.parser.ast.nodes.statement.*;
import tinyos.yeti.nesc12.parser.actions.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 06 11:19:47 public class parser extends java_cup.runtime.lr_parserCEST 2009
  */
public abstract class parser extends java_cup.runtime.lr_parser implements RawParser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(StringRepository.get( parser.class, "repository0.txt" ));

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(StringRepository.get( parser.class, "repository1.txt" ));

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(StringRepository.get( parser.class, "repository2.txt" ));

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return _parser_actions[ act_num ].do_action( act_num, parser, stack, top, this );
  }
	protected static final ParserAction[] _parser_actions = ParserActionRepository.cases();

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
	protected ScopeStack scopes;
	
	 
	private LinkedList<Symbol> peekSymbols = new LinkedList<Symbol>();
	 
	private LinkedList<Symbol> errorSymbols = new LinkedList<Symbol>();
	
	
	private SyntaxErrorMessager syntaxError = new SyntaxErrorMessager( this );
	
	 
	
	public ScopeStack scopes(){
		return scopes;
	}
	
	private Symbol errorSymbol(){
		return errorSymbols.removeFirst();
	
	 
	}
	
	private Symbol peekSymbol(){
		return peekSymbols.removeFirst();
	}
	
	public ErrorASTNode errorNode( String rule, String expected ){
		return syntaxError.error( rule, expected, errorSymbol(), peekSymbol() );
	}
	
	public ErrorASTNode errorNode( String rule, String expected, int left, int right ){
		return syntaxError.error( rule, expected, errorSymbol(), peekSymbol(), left, right );
	}
	
	public ErrorASTNode missing( String rule, String expected, int left, int right ){
	  	return syntaxError.missing( rule, expected, left, right ); 
	}
	
	public ErrorASTNode missing( String rule, String expected, int location ){
	  	return syntaxError.missing( rule, expected, location, location ); 
	}
	
    public void report_fatal_error( String message, Object info ) throws Exception {
        done_parsing();
         
    }
	
	public void syntax_error( Symbol cur_token ) {
	    errorSymbols.addLast( cur_token );
	    peekSymbols.addLast( (Symbol)stack.peek() );
	}
	
    public List<ErrorASTNode> remainingErrors(){
        List<ErrorASTNode> result = new ArrayList<ErrorASTNode>();
        while( !peekSymbols.isEmpty() ){
            result.add( errorNode( null, null ) );
        }
        return result;
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
                                 
        
return null;    }
}

