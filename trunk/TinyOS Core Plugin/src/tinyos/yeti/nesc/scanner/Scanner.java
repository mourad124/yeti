/* The following code was generated by JFlex 1.4.1 on 27.03.06 09:21 */

// 
// To Test jlex definition: java -jar jlex.jar Scanner.lex
// To Generate java: 
// 
//		
// Processing first section -- user code.
// Processing second section -- JLex declarations.
// Processing third section -- lexical rules.
// Creating NFA machine representation.
// NFA comprised of 936 states.
// Creating DFA transition table.
// Working on DFA states................................
// .....................................................
// .....................................................
// .....................................................
// .....................................................
// ......................
// Minimizing DFA transition table.
// 353 states after removal of redundant states.
// Outputting lexical analyzer code.

package tinyos.yeti.nesc.scanner;

import java.io.IOException;
import java.util.ArrayList;

import tinyos.yeti.nesc.parser.IParser;
import tinyos.yeti.nesc.parser.NesCparser;
import tinyos.yeti.nesc.parser.yyInput;
import tinyos.yeti.nesc.parser.language.elements.AttributeElement;

/**
 *	NesC Scanner
 */

public class Scanner implements yyInput, ITypeNames {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int MULTILINECOMMENT = 1;
  public static final int STRING = 7;
  public static final int ATTRIBUTEFUNCTION = 6;
  public static final int ATTRIBUTEBEGIN = 5;
  public static final int ATTRIBUTE = 4;
  public static final int MACROELSE = 3;
  public static final int YYINITIAL = 0;
  public static final int MACRODEF = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\103\1\15\1\104\1\17\1\16\22\0\1\103\1\67\1\25"+
    "\1\21\1\0\1\63\1\64\1\56\1\75\1\76\1\24\1\6\1\73"+
    "\1\45\1\60\1\20\1\54\7\1\2\1\1\74\1\72\1\44\1\62"+
    "\1\61\1\102\1\0\4\4\1\5\1\10\5\3\1\12\10\3\1\14"+
    "\2\3\1\55\2\3\1\77\1\57\1\100\1\65\1\53\1\0\1\26"+
    "\1\46\1\27\1\33\1\22\1\7\1\37\1\47\1\36\1\3\1\42"+
    "\1\11\1\31\1\32\1\30\1\34\1\3\1\40\1\23\1\35\1\13"+
    "\1\41\1\52\1\50\1\43\1\51\1\71\1\66\1\70\1\101\6\0"+
    "\1\104\u05da\0\12\2\206\0\12\2\u026c\0\12\2\166\0\12\2\166\0"+
    "\12\2\166\0\12\2\166\0\12\2\167\0\11\2\166\0\12\2\166\0"+
    "\12\2\166\0\12\2\340\0\12\2\166\0\12\2\106\0\12\2\u0116\0"+
    "\12\2\u031f\0\11\2\u046e\0\12\2\46\0\12\2\u012c\0\12\2\u06d8\0"+
    "\2\104\udee6\0\12\2\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\1\1\3\3\1\2\4\1\5"+
    "\1\6\2\1\1\7\1\10\14\1\1\11\1\12\3\1"+
    "\1\2\1\1\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\2\36\2\37\1\0"+
    "\2\40\1\41\1\42\1\43\1\41\2\44\1\45\1\46"+
    "\1\47\1\50\1\51\2\52\1\53\1\54\1\0\1\2"+
    "\1\55\1\56\1\57\5\1\1\0\1\60\1\61\1\0"+
    "\10\1\1\62\1\1\1\63\10\1\1\64\4\1\1\65"+
    "\5\1\1\66\1\67\1\70\1\71\1\72\1\73\3\1"+
    "\3\0\1\74\1\0\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\2\4\1\0"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
    "\2\0\1\55\1\1\1\120\4\1\1\36\1\0\36\1"+
    "\1\121\5\1\1\122\3\1\1\2\1\123\1\0\1\74"+
    "\1\124\1\125\1\0\1\117\1\55\1\0\1\1\1\126"+
    "\1\127\2\1\1\0\1\130\1\131\10\1\1\132\2\1"+
    "\1\133\1\134\5\1\1\135\5\1\1\136\1\1\1\137"+
    "\5\1\1\140\3\1\1\141\3\1\1\74\2\0\1\142"+
    "\1\1\1\143\1\144\1\145\6\1\1\146\1\1\1\147"+
    "\4\1\1\150\17\1\1\151\1\152\1\1\1\0\1\1"+
    "\1\153\1\154\1\155\1\156\1\157\1\160\1\161\1\162"+
    "\5\1\1\163\1\164\1\1\1\165\3\1\1\166\2\1"+
    "\1\167\3\1\1\170\1\1\1\171\4\1\1\172\1\1"+
    "\1\173\6\1\1\174\2\1\1\175\1\176\1\177\1\1"+
    "\1\200\1\1\1\201\1\202\4\1\1\203\1\1\1\204"+
    "\11\1\1\205\1\1\1\206\1\207";

  private static int [] zzUnpackAction() {
    int [] result = new int[388];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u0228"+
    "\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u0228\0\u05a9"+
    "\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1"+
    "\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9"+
    "\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21"+
    "\0\u0c66\0\u0cab\0\u0228\0\u0228\0\u0228\0\u0228\0\u0cf0\0\u0228"+
    "\0\u0228\0\u0228\0\u0228\0\u0228\0\u0228\0\u0228\0\u0d35\0\u0228"+
    "\0\212\0\u0d7a\0\u0228\0\u0dbf\0\u0228\0\u0e04\0\u0228\0\u0e49"+
    "\0\u0228\0\u0e8e\0\u0228\0\u0ed3\0\u0228\0\u0228\0\u0f18\0\u0228"+
    "\0\u0f5d\0\u0228\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u0228\0\u0228"+
    "\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u0228\0\u0228"+
    "\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437"+
    "\0\u147c\0\u0228\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a"+
    "\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842"+
    "\0\u1887\0\u02b2\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25"+
    "\0\u0228\0\u0228\0\u0228\0\u0228\0\u0228\0\u1a6a\0\u1aaf\0\u1af4"+
    "\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u0228\0\u0228"+
    "\0\u0228\0\u0228\0\u0228\0\u0228\0\u0228\0\u0228\0\u0228\0\u0228"+
    "\0\u0228\0\u0d7a\0\u1cd7\0\u0228\0\u0228\0\u0228\0\u0228\0\u0228"+
    "\0\u0228\0\u0228\0\u1d1c\0\u1d61\0\u1da6\0\u0228\0\u1deb\0\u02b2"+
    "\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013"+
    "\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b"+
    "\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463"+
    "\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b"+
    "\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3"+
    "\0\u28f8\0\u293d\0\u0228\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u0228"+
    "\0\u2a96\0\u0228\0\u0228\0\u0228\0\u2adb\0\u0228\0\u2b20\0\u2b65"+
    "\0\u2baa\0\u02b2\0\u02b2\0\u2bef\0\u2c34\0\u2c79\0\u02b2\0\u02b2"+
    "\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1"+
    "\0\u02b2\0\u2ee6\0\u2f2b\0\u02b2\0\u02b2\0\u2f70\0\u2fb5\0\u2ffa"+
    "\0\u303f\0\u3084\0\u02b2\0\u30c9\0\u310e\0\u3153\0\u3198\0\u31dd"+
    "\0\u02b2\0\u3222\0\u02b2\0\u3267\0\u32ac\0\u32f1\0\u3336\0\u337b"+
    "\0\u02b2\0\u33c0\0\u3405\0\u344a\0\u02b2\0\u348f\0\u34d4\0\u3519"+
    "\0\u355e\0\u35a3\0\u35e8\0\u02b2\0\u362d\0\u02b2\0\u0228\0\u02b2"+
    "\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u3786\0\u37cb\0\u02b2\0\u3810"+
    "\0\u02b2\0\u3855\0\u389a\0\u38df\0\u3924\0\u02b2\0\u3969\0\u39ae"+
    "\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91\0\u3bd6"+
    "\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f\0\u02b2\0\u02b2\0\u3d74"+
    "\0\u3db9\0\u3dfe\0\u02b2\0\u02b2\0\u02b2\0\u02b2\0\u02b2\0\u02b2"+
    "\0\u02b2\0\u02b2\0\u3e43\0\u3e88\0\u3ecd\0\u3f12\0\u3f57\0\u02b2"+
    "\0\u02b2\0\u3f9c\0\u02b2\0\u3fe1\0\u4026\0\u406b\0\u02b2\0\u40b0"+
    "\0\u40f5\0\u02b2\0\u413a\0\u417f\0\u41c4\0\u0228\0\u4209\0\u02b2"+
    "\0\u424e\0\u4293\0\u42d8\0\u431d\0\u02b2\0\u4362\0\u02b2\0\u43a7"+
    "\0\u43ec\0\u4431\0\u4476\0\u44bb\0\u4500\0\u02b2\0\u4545\0\u458a"+
    "\0\u02b2\0\u02b2\0\u02b2\0\u45cf\0\u02b2\0\u4614\0\u02b2\0\u02b2"+
    "\0\u4659\0\u469e\0\u46e3\0\u4728\0\u02b2\0\u476d\0\u02b2\0\u47b2"+
    "\0\u47f7\0\u483c\0\u4881\0\u48c6\0\u490b\0\u4950\0\u4995\0\u49da"+
    "\0\u02b2\0\u4a1f\0\u02b2\0\u02b2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[388];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\2\12\3\13\1\14\1\15\1\13\1\16\1\13"+
    "\1\17\1\13\1\20\1\21\1\20\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\2\13"+
    "\1\44\1\45\1\46\3\13\1\47\1\50\1\51\1\13"+
    "\1\52\1\11\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\20\1\11\24\76"+
    "\1\77\60\76\15\3\1\100\2\101\37\3\1\102\24\3"+
    "\1\101\21\103\1\104\63\103\3\105\3\106\1\105\6\106"+
    "\1\20\1\21\1\20\2\105\2\106\2\105\16\106\2\105"+
    "\6\106\1\105\1\106\15\105\1\107\2\105\1\110\4\105"+
    "\1\20\1\105\15\111\1\20\1\21\1\20\55\111\1\112"+
    "\5\111\1\20\1\111\3\113\3\114\1\113\6\114\1\20"+
    "\1\21\1\20\2\113\2\114\2\113\16\114\2\113\6\114"+
    "\1\113\1\114\15\113\1\115\2\113\1\116\4\113\1\20"+
    "\1\113\15\117\1\120\1\121\6\117\1\122\31\117\1\123"+
    "\25\117\106\0\2\12\2\0\1\124\3\0\4\125\5\0"+
    "\1\124\31\0\1\12\3\0\1\126\25\0\5\13\1\0"+
    "\6\13\5\0\2\13\2\0\16\13\2\0\10\13\35\0"+
    "\1\127\53\0\1\130\23\0\5\13\1\0\2\13\1\131"+
    "\3\13\5\0\2\13\2\0\2\13\1\132\13\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\2\13\2\0"+
    "\2\13\1\133\13\13\2\0\10\13\30\0\5\13\1\0"+
    "\6\13\5\0\1\13\1\134\2\0\4\13\1\135\11\13"+
    "\2\0\10\13\44\0\1\20\107\0\1\136\3\0\1\137"+
    "\35\0\1\140\44\0\1\141\63\0\5\13\1\0\2\13"+
    "\1\142\3\13\5\0\2\13\2\0\4\13\1\143\6\13"+
    "\1\144\2\13\2\0\2\13\1\145\5\13\30\0\5\13"+
    "\1\0\6\13\5\0\2\13\2\0\7\13\1\146\1\147"+
    "\5\13\2\0\1\13\1\150\2\13\1\151\3\13\111\0"+
    "\1\152\23\0\5\13\1\0\4\13\1\153\1\13\5\0"+
    "\1\13\1\154\2\0\7\13\1\155\6\13\2\0\10\13"+
    "\30\0\5\13\1\0\6\13\5\0\2\13\2\0\1\156"+
    "\1\13\1\157\13\13\2\0\1\13\1\160\6\13\30\0"+
    "\5\13\1\0\1\161\5\13\5\0\2\13\2\0\16\13"+
    "\2\0\10\13\30\0\5\13\1\0\6\13\5\0\2\13"+
    "\2\0\2\13\1\162\13\13\2\0\10\13\30\0\5\13"+
    "\1\0\6\13\5\0\2\13\2\0\2\13\1\163\13\13"+
    "\2\0\10\13\30\0\5\13\1\0\6\13\5\0\1\164"+
    "\1\13\2\0\2\13\1\165\13\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\2\13\1\166"+
    "\7\13\1\167\3\13\2\0\10\13\30\0\5\13\1\0"+
    "\6\13\5\0\2\13\2\0\1\170\14\13\1\171\2\0"+
    "\10\13\30\0\5\13\1\0\1\172\5\13\5\0\2\13"+
    "\2\0\3\13\1\173\1\174\11\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\2\13\1\175"+
    "\13\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\1\176\1\13\2\0\16\13\2\0\10\13\30\0\5\13"+
    "\1\0\6\13\5\0\2\13\2\0\2\13\1\177\13\13"+
    "\2\0\10\13\73\0\1\200\1\201\14\0\1\202\11\0"+
    "\1\72\55\0\1\203\13\0\1\204\1\205\23\0\5\13"+
    "\1\0\6\13\5\0\2\13\2\0\12\13\1\206\3\13"+
    "\2\0\10\13\30\0\5\13\1\0\6\13\5\0\2\13"+
    "\2\0\16\13\2\0\1\13\1\207\6\13\30\0\5\13"+
    "\1\0\6\13\5\0\2\13\2\0\16\13\2\0\5\13"+
    "\1\210\2\13\30\0\2\12\2\0\1\124\3\0\4\125"+
    "\5\0\1\124\25\0\1\211\3\0\1\12\1\211\2\0"+
    "\1\126\24\0\56\212\1\0\1\213\25\212\1\0\2\214"+
    "\51\0\1\214\3\0\1\215\105\0\1\216\1\217\104\0"+
    "\1\220\104\0\1\221\104\0\1\222\1\0\1\223\102\0"+
    "\1\224\104\0\1\225\3\0\1\226\100\0\1\227\103\0"+
    "\1\73\43\0\1\230\64\0\15\102\1\231\2\232\64\102"+
    "\1\232\22\0\1\233\63\0\5\106\1\0\6\106\5\0"+
    "\2\106\2\0\16\106\2\0\10\106\17\0\1\234\105\0"+
    "\1\235\103\0\1\236\10\0\5\114\1\0\6\114\5\0"+
    "\2\114\2\0\16\114\2\0\10\114\27\0\15\117\2\0"+
    "\6\117\1\0\31\117\1\0\25\117\15\0\1\120\114\0"+
    "\1\237\4\0\1\240\2\0\1\241\2\0\1\242\45\0"+
    "\2\243\3\0\1\244\36\0\1\244\6\0\1\243\41\0"+
    "\4\125\71\0\2\214\2\0\1\245\1\0\4\246\7\0"+
    "\1\245\31\0\1\214\31\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\2\13\1\247\13\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\12\13\1\250"+
    "\3\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\4\13\1\251\11\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\1\252\1\13\2\0\16\13"+
    "\2\0\10\13\30\0\5\13\1\0\6\13\5\0\1\13"+
    "\1\253\2\0\10\13\1\254\5\13\2\0\10\13\27\0"+
    "\15\136\1\76\1\255\66\136\11\0\1\256\74\0\5\13"+
    "\1\0\6\13\5\0\1\13\1\257\2\0\16\13\2\0"+
    "\10\13\30\0\5\13\1\0\4\13\1\260\1\13\5\0"+
    "\2\13\2\0\16\13\2\0\10\13\30\0\5\13\1\0"+
    "\6\13\5\0\1\261\1\13\2\0\16\13\2\0\10\13"+
    "\30\0\5\13\1\0\6\13\5\0\2\13\2\0\7\13"+
    "\1\262\6\13\2\0\10\13\30\0\5\13\1\0\6\13"+
    "\5\0\2\13\2\0\1\263\11\13\1\264\3\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\2\13\2\0"+
    "\11\13\1\265\4\13\2\0\3\13\1\266\4\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\2\13\1\267"+
    "\13\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\10\13\1\270\5\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\7\13\1\271"+
    "\6\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\15\13\1\272\2\0\10\13\30\0\5\13"+
    "\1\0\6\13\5\0\2\13\2\0\2\13\1\273\13\13"+
    "\2\0\10\13\30\0\5\13\1\0\2\13\1\274\3\13"+
    "\5\0\1\13\1\275\2\0\16\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\3\13\1\276"+
    "\1\277\11\13\2\0\10\13\30\0\5\13\1\0\6\13"+
    "\5\0\2\13\2\0\1\300\15\13\2\0\10\13\30\0"+
    "\5\13\1\0\1\301\5\13\5\0\2\13\2\0\16\13"+
    "\2\0\10\13\30\0\5\13\1\0\6\13\5\0\2\13"+
    "\2\0\5\13\1\302\10\13\2\0\10\13\30\0\5\13"+
    "\1\0\6\13\5\0\2\13\2\0\12\13\1\303\3\13"+
    "\2\0\10\13\30\0\5\13\1\0\1\304\5\13\5\0"+
    "\2\13\2\0\16\13\2\0\10\13\30\0\5\13\1\0"+
    "\4\13\1\305\1\13\5\0\2\13\2\0\16\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\1\13\1\306"+
    "\2\0\16\13\2\0\10\13\30\0\5\13\1\0\6\13"+
    "\5\0\2\13\2\0\2\13\1\307\13\13\2\0\10\13"+
    "\30\0\5\13\1\0\6\13\5\0\1\13\1\310\2\0"+
    "\16\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\6\13\1\311\7\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\6\13\1\312"+
    "\7\13\2\0\10\13\30\0\5\13\1\0\2\13\1\313"+
    "\3\13\5\0\2\13\2\0\1\13\1\314\5\13\1\315"+
    "\6\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\7\13\1\316\6\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\7\13\1\317"+
    "\1\13\1\320\4\13\2\0\10\13\30\0\5\13\1\0"+
    "\2\13\1\321\3\13\5\0\2\13\2\0\10\13\1\322"+
    "\5\13\2\0\10\13\111\0\1\323\23\0\5\13\1\0"+
    "\6\13\5\0\1\324\1\13\2\0\16\13\2\0\10\13"+
    "\30\0\5\13\1\0\6\13\5\0\2\13\2\0\10\13"+
    "\1\325\5\13\2\0\10\13\30\0\5\13\1\0\6\13"+
    "\5\0\2\13\2\0\1\326\15\13\2\0\10\13\30\0"+
    "\1\327\2\0\2\327\1\0\2\327\11\0\1\327\3\0"+
    "\2\327\3\0\1\327\12\0\1\327\5\0\1\327\30\0"+
    "\56\212\1\330\1\213\42\212\1\0\67\212\1\0\2\214"+
    "\2\0\1\331\1\0\4\332\7\0\1\331\31\0\1\214"+
    "\110\0\1\333\106\0\1\334\54\0\1\335\53\0\2\243"+
    "\4\0\4\336\41\0\1\243\31\0\2\243\51\0\1\243"+
    "\31\0\2\337\3\0\1\340\36\0\1\340\6\0\1\337"+
    "\31\0\5\13\1\0\6\13\5\0\2\13\2\0\1\341"+
    "\15\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\11\13\1\342\4\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\1\13\1\343\2\0\16\13"+
    "\2\0\10\13\30\0\5\13\1\0\6\13\5\0\2\13"+
    "\2\0\10\13\1\344\5\13\2\0\10\13\30\0\5\13"+
    "\1\0\6\13\5\0\2\13\2\0\2\13\1\345\13\13"+
    "\2\0\10\13\44\0\1\76\112\0\1\346\62\0\5\13"+
    "\1\0\6\13\5\0\1\347\1\13\2\0\16\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\2\13\2\0"+
    "\3\13\1\350\12\13\2\0\10\13\30\0\5\13\1\0"+
    "\6\13\5\0\2\13\2\0\4\13\1\351\11\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\1\352\1\13"+
    "\2\0\16\13\2\0\10\13\30\0\5\13\1\0\6\13"+
    "\5\0\2\13\2\0\7\13\1\353\6\13\2\0\10\13"+
    "\30\0\5\13\1\0\4\13\1\354\1\13\5\0\2\13"+
    "\2\0\16\13\2\0\10\13\30\0\5\13\1\0\6\13"+
    "\5\0\2\13\2\0\4\13\1\355\11\13\2\0\10\13"+
    "\30\0\5\13\1\0\6\13\5\0\1\356\1\13\2\0"+
    "\16\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\12\13\1\357\3\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\7\13\1\360"+
    "\6\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\2\13\1\361\13\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\4\13\1\362"+
    "\11\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\3\13\1\363\12\13\2\0\10\13\30\0"+
    "\5\13\1\0\2\13\1\364\3\13\5\0\2\13\2\0"+
    "\16\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\1\365\1\13\2\0\16\13\2\0\10\13\30\0\5\13"+
    "\1\0\6\13\5\0\2\13\2\0\3\13\1\366\2\13"+
    "\1\367\7\13\2\0\10\13\30\0\5\13\1\0\1\370"+
    "\5\13\5\0\1\13\1\371\2\0\7\13\1\372\6\13"+
    "\2\0\10\13\30\0\5\13\1\0\6\13\5\0\2\13"+
    "\2\0\12\13\1\373\3\13\2\0\10\13\30\0\5\13"+
    "\1\0\6\13\5\0\1\13\1\374\2\0\16\13\2\0"+
    "\10\13\30\0\5\13\1\0\4\13\1\375\1\13\5\0"+
    "\2\13\2\0\16\13\2\0\10\13\30\0\5\13\1\0"+
    "\6\13\5\0\2\13\2\0\1\376\15\13\2\0\10\13"+
    "\30\0\5\13\1\0\6\13\5\0\2\13\2\0\1\377"+
    "\15\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\16\13\2\0\1\u0100\7\13\30\0\5\13"+
    "\1\0\6\13\5\0\2\13\2\0\7\13\1\u0101\6\13"+
    "\2\0\10\13\30\0\5\13\1\0\6\13\5\0\2\13"+
    "\2\0\13\13\1\u0102\2\13\2\0\10\13\30\0\5\13"+
    "\1\0\6\13\5\0\2\13\2\0\14\13\1\u0103\1\13"+
    "\2\0\10\13\30\0\5\13\1\0\6\13\5\0\1\u0104"+
    "\1\13\2\0\16\13\2\0\10\13\30\0\5\13\1\0"+
    "\2\13\1\u0105\3\13\5\0\2\13\2\0\16\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\2\13\2\0"+
    "\10\13\1\u0106\5\13\2\0\10\13\30\0\5\13\1\0"+
    "\2\13\1\u0107\3\13\5\0\2\13\2\0\16\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\1\u0108\1\13"+
    "\2\0\16\13\2\0\10\13\30\0\5\13\1\0\6\13"+
    "\5\0\2\13\2\0\2\13\1\u0109\13\13\2\0\10\13"+
    "\30\0\5\13\1\0\4\13\1\u010a\1\13\5\0\2\13"+
    "\2\0\16\13\2\0\10\13\30\0\5\13\1\0\6\13"+
    "\5\0\2\13\2\0\10\13\1\u010b\5\13\2\0\10\13"+
    "\30\0\5\13\1\0\6\13\5\0\2\13\2\0\1\u010c"+
    "\15\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\5\13\1\u010d\10\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\1\u010e\15\13"+
    "\2\0\10\13\30\0\5\13\1\0\2\13\1\u010f\3\13"+
    "\5\0\2\13\2\0\16\13\2\0\10\13\30\0\5\13"+
    "\1\0\6\13\5\0\2\13\2\0\7\13\1\u0110\6\13"+
    "\2\0\10\13\30\0\1\327\2\0\2\327\1\0\2\327"+
    "\4\125\5\0\1\327\3\0\2\327\3\0\1\327\12\0"+
    "\1\327\5\0\1\327\31\0\2\u0111\3\0\1\u0112\36\0"+
    "\1\u0112\6\0\1\u0111\63\0\1\u0113\52\0\2\337\4\0"+
    "\4\246\41\0\1\337\31\0\2\337\51\0\1\337\31\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\7\13\1\u0114"+
    "\6\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\11\13\1\u0115\4\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\4\13\1\u0116"+
    "\11\13\2\0\10\13\51\0\1\u0117\63\0\5\13\1\0"+
    "\6\13\5\0\2\13\2\0\7\13\1\u0118\6\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\2\13\2\0"+
    "\12\13\1\u0119\3\13\2\0\10\13\30\0\5\13\1\0"+
    "\6\13\5\0\2\13\2\0\10\13\1\u011a\5\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\2\13\2\0"+
    "\1\13\1\u011b\14\13\2\0\10\13\30\0\5\13\1\0"+
    "\6\13\5\0\1\u011c\1\13\2\0\1\u011d\15\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\2\13\2\0"+
    "\2\13\1\u011e\13\13\2\0\10\13\30\0\5\13\1\0"+
    "\6\13\5\0\2\13\2\0\7\13\1\u011f\6\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\2\13\2\0"+
    "\1\13\1\u0120\14\13\2\0\10\13\30\0\5\13\1\0"+
    "\6\13\5\0\2\13\2\0\1\13\1\u0121\14\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\2\13\2\0"+
    "\10\13\1\u0122\5\13\2\0\10\13\30\0\5\13\1\0"+
    "\6\13\5\0\2\13\2\0\1\u0123\15\13\2\0\10\13"+
    "\30\0\5\13\1\0\6\13\5\0\2\13\2\0\2\13"+
    "\1\u0124\13\13\2\0\10\13\30\0\5\13\1\0\6\13"+
    "\5\0\2\13\2\0\10\13\1\u0125\5\13\2\0\10\13"+
    "\30\0\5\13\1\0\6\13\5\0\2\13\2\0\7\13"+
    "\1\u0126\6\13\2\0\10\13\30\0\5\13\1\0\6\13"+
    "\5\0\2\13\2\0\10\13\1\u0127\5\13\2\0\10\13"+
    "\30\0\5\13\1\0\6\13\5\0\1\u0128\1\13\2\0"+
    "\16\13\2\0\10\13\30\0\5\13\1\0\2\13\1\u0129"+
    "\3\13\5\0\2\13\2\0\16\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\1\13\1\u012a"+
    "\14\13\2\0\10\13\30\0\5\13\1\0\4\13\1\u012b"+
    "\1\13\5\0\2\13\2\0\16\13\2\0\10\13\30\0"+
    "\5\13\1\0\2\13\1\u012c\3\13\5\0\2\13\2\0"+
    "\16\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\10\13\1\u012d\5\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\5\13\1\u012e"+
    "\10\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\1\u012f\1\13\2\0\16\13\2\0\10\13\30\0\5\13"+
    "\1\0\6\13\5\0\2\13\2\0\4\13\1\u0130\11\13"+
    "\2\0\10\13\30\0\5\13\1\0\4\13\1\u0131\1\13"+
    "\5\0\2\13\2\0\16\13\2\0\10\13\30\0\5\13"+
    "\1\0\6\13\5\0\2\13\2\0\12\13\1\u0132\3\13"+
    "\2\0\10\13\30\0\5\13\1\0\6\13\5\0\2\13"+
    "\2\0\12\13\1\u0133\3\13\2\0\10\13\30\0\5\13"+
    "\1\0\6\13\5\0\1\13\1\u0134\2\0\16\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\2\13\2\0"+
    "\7\13\1\u0135\6\13\2\0\10\13\30\0\5\13\1\0"+
    "\6\13\5\0\2\13\2\0\14\13\1\u0136\1\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\1\u0137\1\13"+
    "\2\0\16\13\2\0\10\13\30\0\5\13\1\0\6\13"+
    "\5\0\2\13\2\0\7\13\1\u0138\6\13\2\0\10\13"+
    "\30\0\2\u0111\4\0\4\332\41\0\1\u0111\31\0\2\u0111"+
    "\51\0\1\u0111\66\0\1\u0139\47\0\5\13\1\0\6\13"+
    "\5\0\2\13\2\0\4\13\1\u013a\11\13\2\0\10\13"+
    "\30\0\5\13\1\0\6\13\5\0\2\13\2\0\4\13"+
    "\1\u013b\11\13\2\0\10\13\30\0\5\13\1\0\6\13"+
    "\5\0\2\13\2\0\1\13\1\u013c\14\13\2\0\10\13"+
    "\30\0\5\13\1\0\6\13\5\0\2\13\2\0\7\13"+
    "\1\u013d\6\13\2\0\10\13\30\0\5\13\1\0\6\13"+
    "\5\0\2\13\2\0\5\13\1\u013e\10\13\2\0\10\13"+
    "\30\0\5\13\1\0\2\13\1\u013f\3\13\5\0\2\13"+
    "\2\0\16\13\2\0\10\13\30\0\5\13\1\0\1\u0140"+
    "\5\13\5\0\2\13\2\0\16\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\16\13\2\0"+
    "\1\13\1\u0141\6\13\30\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\1\13\1\u0142\14\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\4\13\1\u0143"+
    "\11\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\4\13\1\u0144\11\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\11\13\1\u0145"+
    "\4\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\4\13\1\u0146\11\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\7\13\1\u0147"+
    "\6\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\1\u0148\1\13\2\0\16\13\2\0\10\13\30\0\5\13"+
    "\1\0\6\13\5\0\1\u0149\1\13\2\0\16\13\2\0"+
    "\10\13\30\0\5\13\1\0\2\13\1\u014a\3\13\5\0"+
    "\2\13\2\0\16\13\2\0\10\13\30\0\5\13\1\0"+
    "\6\13\5\0\1\u014b\1\13\2\0\16\13\2\0\10\13"+
    "\30\0\5\13\1\0\6\13\5\0\2\13\2\0\5\13"+
    "\1\u014c\10\13\2\0\10\13\30\0\5\13\1\0\6\13"+
    "\5\0\1\u014d\1\13\2\0\16\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\3\13\1\u014e"+
    "\12\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\1\u014f\1\13\2\0\16\13\2\0\10\13\30\0\5\13"+
    "\1\0\6\13\5\0\2\13\2\0\5\13\1\u0150\10\13"+
    "\2\0\10\13\30\0\5\13\1\0\1\u0151\5\13\5\0"+
    "\2\13\2\0\16\13\2\0\10\13\30\0\5\13\1\0"+
    "\6\13\5\0\2\13\2\0\4\13\1\u0152\11\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\2\13\2\0"+
    "\7\13\1\u0153\6\13\2\0\10\13\30\0\5\13\1\0"+
    "\6\13\5\0\2\13\2\0\10\13\1\u0154\5\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\2\13\2\0"+
    "\12\13\1\u0155\3\13\2\0\10\13\36\0\1\u0156\76\0"+
    "\5\13\1\0\6\13\5\0\1\u0157\1\13\2\0\16\13"+
    "\2\0\10\13\30\0\5\13\1\0\6\13\5\0\2\13"+
    "\2\0\5\13\1\u0158\10\13\2\0\10\13\30\0\5\13"+
    "\1\0\6\13\5\0\1\u0159\1\13\2\0\16\13\2\0"+
    "\10\13\30\0\5\13\1\0\4\13\1\u015a\1\13\5\0"+
    "\2\13\2\0\16\13\2\0\10\13\30\0\5\13\1\0"+
    "\4\13\1\u015b\1\13\5\0\2\13\2\0\16\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\2\13\2\0"+
    "\2\13\1\u015c\13\13\2\0\10\13\30\0\5\13\1\0"+
    "\6\13\5\0\2\13\2\0\7\13\1\u015d\6\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\1\u015e\1\13"+
    "\2\0\16\13\2\0\10\13\30\0\5\13\1\0\1\u015f"+
    "\5\13\5\0\2\13\2\0\16\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\1\u0160\1\13\2\0\16\13"+
    "\2\0\10\13\30\0\5\13\1\0\6\13\5\0\1\u0161"+
    "\1\13\2\0\16\13\2\0\10\13\30\0\5\13\1\0"+
    "\6\13\5\0\2\13\2\0\1\u0162\15\13\2\0\10\13"+
    "\30\0\5\13\1\0\6\13\5\0\1\u0163\1\13\2\0"+
    "\16\13\2\0\10\13\30\0\5\13\1\0\2\13\1\u0164"+
    "\3\13\5\0\2\13\2\0\16\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\10\13\1\u0165"+
    "\5\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\5\13\1\u0166\10\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\4\13\1\u0167"+
    "\11\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\12\13\1\u0168\3\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\1\u0169\1\13\2\0\16\13"+
    "\2\0\10\13\30\0\5\13\1\0\1\u016a\5\13\5\0"+
    "\2\13\2\0\16\13\2\0\10\13\30\0\5\13\1\0"+
    "\6\13\5\0\1\13\1\u016b\2\0\16\13\2\0\10\13"+
    "\30\0\5\13\1\0\6\13\5\0\2\13\2\0\4\13"+
    "\1\u016c\11\13\2\0\10\13\30\0\5\13\1\0\6\13"+
    "\5\0\1\13\1\u016d\2\0\16\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\2\13\2\0\1\13\1\u016e"+
    "\14\13\2\0\10\13\30\0\5\13\1\0\6\13\5\0"+
    "\2\13\2\0\12\13\1\u016f\3\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\1\u0170\1\13\2\0\16\13"+
    "\2\0\10\13\30\0\5\13\1\0\6\13\5\0\2\13"+
    "\2\0\16\13\2\0\1\u0171\7\13\30\0\5\13\1\0"+
    "\6\13\5\0\2\13\2\0\7\13\1\u0172\6\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\2\13\2\0"+
    "\1\u0173\15\13\2\0\10\13\30\0\5\13\1\0\6\13"+
    "\5\0\2\13\2\0\7\13\1\u0174\6\13\2\0\10\13"+
    "\30\0\5\13\1\0\6\13\5\0\1\u0175\1\13\2\0"+
    "\16\13\2\0\10\13\30\0\5\13\1\0\4\13\1\u0176"+
    "\1\13\5\0\2\13\2\0\16\13\2\0\10\13\30\0"+
    "\5\13\1\0\6\13\5\0\1\13\1\u0177\2\0\16\13"+
    "\2\0\10\13\30\0\5\13\1\0\6\13\5\0\2\13"+
    "\2\0\7\13\1\u0178\6\13\2\0\10\13\30\0\5\13"+
    "\1\0\6\13\5\0\2\13\2\0\1\u0179\15\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\2\13\2\0"+
    "\7\13\1\u017a\6\13\2\0\10\13\30\0\5\13\1\0"+
    "\6\13\5\0\2\13\2\0\10\13\1\u017b\5\13\2\0"+
    "\10\13\30\0\5\13\1\0\6\13\5\0\2\13\2\0"+
    "\7\13\1\u017c\6\13\2\0\10\13\30\0\5\13\1\0"+
    "\6\13\5\0\1\u017d\1\13\2\0\16\13\2\0\10\13"+
    "\30\0\5\13\1\0\6\13\5\0\2\13\2\0\2\13"+
    "\1\u017e\13\13\2\0\10\13\30\0\5\13\1\0\6\13"+
    "\5\0\2\13\2\0\10\13\1\u017f\5\13\2\0\10\13"+
    "\30\0\5\13\1\0\6\13\5\0\2\13\2\0\16\13"+
    "\2\0\5\13\1\u0180\2\13\30\0\5\13\1\0\6\13"+
    "\5\0\2\13\2\0\4\13\1\u0181\11\13\2\0\10\13"+
    "\30\0\5\13\1\0\6\13\5\0\2\13\2\0\2\13"+
    "\1\u0182\13\13\2\0\10\13\30\0\5\13\1\0\6\13"+
    "\5\0\2\13\2\0\16\13\2\0\5\13\1\u0183\2\13"+
    "\30\0\5\13\1\0\6\13\5\0\2\13\2\0\4\13"+
    "\1\u0184\11\13\2\0\10\13\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19044];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\2\5\0\1\11\6\1\1\11\6\1\1\11"+
    "\33\1\4\11\1\1\7\11\1\1\1\15\1\7\1\2"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\2\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\0\2\1\2\11\5\1\1\0\2\11\1\0\10\1"+
    "\1\11\26\1\5\11\3\1\3\0\1\1\1\0\1\1"+
    "\12\11\1\15\1\7\1\0\7\11\1\1\2\0\1\11"+
    "\7\1\1\0\44\1\1\11\4\1\1\11\1\0\3\11"+
    "\1\0\1\11\1\1\1\0\5\1\1\0\53\1\2\0"+
    "\3\1\1\11\41\1\1\0\34\1\1\11\56\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[388];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    Object value; 
    Object previous_value;
 	StringBuffer string = new StringBuffer();
    private int token;
    IParser parser = null;
    
    int ifcount = 0;
    
    public ArrayList multiLineCommentTokens = new ArrayList();
    public ArrayList attributeElements = new ArrayList();
    
	AttributeElement attribute;    
    Token multiLineBeginToken;
    
    public void setCallback(IParser n) {
    	this.parser = n;
    }

    /** move on to next token.
        @returns false if positioned beyond tokens.
        @throws IOException on input error.
      */
    public boolean advance () throws java.io.IOException {
	  token=yylex();
	  return token != YYEOF;
    }

    /** classifies current token.
        Should not be called if advance() returned false.
        @returns current %token or single character.
      */
    public int token () {
	  return token;
    }

	public int getPosition() {
		return yychar;
	}


    /** associated with current token.
        Should not be called if advance() returned false.
        @returns value for token().
      */
    public Object value () {
	  return value;
    }

	/* Probably because of its use for interactive line-interpreters
	 * like "dc", original yacc uses a "lazy" lookahead, that is to say, it
	 * does not fetch a lookahead when the only action is the default
	 * reduction. But our scanner-feedback must keep the lookahead in
	 * sync. This routine sees to it that the lookahead has been
	 * fetched.
	 *
	 * yychar is the yacc lookahead token. It is -1 when
	 * yacc is being "lazy". yylex() is allowed to return -1 (or any
	 * negative int) to indicate EOF, but yacc uses 0 to indicate EOF.
	 */
	public void lex_sync() {
		if(yychar == -1) {
			try {
				yychar = yylex();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if (yychar < 0) {
			  yychar = 0;
			}
	    }
	}
	
	public Object previousValue() {
		return previous_value;
	}
	
	public int identifier_or_typedef_name() {
	    /* Return the type of the token,
		 * IDENTIFIER, TYPEDEF_NAME, or ENUM_CONSTANT
	 	 */
	 	if(parser.get_idents_only()) {
	 		previous_value = value;
	 		value = makeToken(NesCparser.IDENTIFIER);
		 	return NesCparser.IDENTIFIER;
		} else {		
	 		previous_value = value;
			value = makeToken(NesCparser.TYPEDEF_NAME);
	  		return parser.type_of_name(yytext());
		}
 	}

	private Token makeToken(int value) {
		return new Token(value, yytext(), yyline, yychar, yychar+ yytext().length());
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
  	// Constructor

    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 248) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;

      zzWasPushback = false;

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { value = makeToken('~'); return('~');
          }
        case 136: break;
        case 40: 
          { attribute.finishFunction();
											  yybegin(ATTRIBUTE);
          }
        case 137: break;
        case 110: 
          { value = makeToken(NesCparser.SIGNED);
									   return(NesCparser.SIGNED);
          }
        case 138: break;
        case 52: 
          { value = makeToken(NesCparser.DO);
									  return(NesCparser.DO);
          }
        case 139: break;
        case 82: 
          { value = makeToken(NesCparser.LEFT_ASSIGN); return(NesCparser.LEFT_ASSIGN);
          }
        case 140: break;
        case 66: 
          { value = makeToken(NesCparser.AND_OP); return(NesCparser.AND_OP);
          }
        case 141: break;
        case 90: 
          { value = makeToken(NesCparser.AUTO);
									  return(NesCparser.AUTO);
          }
        case 142: break;
        case 22: 
          { value = makeToken(',');  return(',');
          }
        case 143: break;
        case 25: 
          { value = makeToken(')'); return(')');
          }
        case 144: break;
        case 126: 
          { value = makeToken(NesCparser.OFFSETOF);
									  return(NesCparser.OFFSETOF);
          }
        case 145: break;
        case 86: 
          { value = makeToken(NesCparser.LONG);
									  return(NesCparser.LONG);
          }
        case 146: break;
        case 47: 
          { value = makeToken(NesCparser.ADD_ASSIGN); return(NesCparser.ADD_ASSIGN);
          }
        case 147: break;
        case 46: 
          { value = makeToken(NesCparser.INC_OP); return(NesCparser.INC_OP);
          }
        case 148: break;
        case 79: 
          { value = makeToken(NesCparser.FLOATING_CONSTANT); 
									  return(NesCparser.FLOATING_CONSTANT);
          }
        case 149: break;
        case 18: 
          { value = makeToken('!'); return('!');
          }
        case 150: break;
        case 131: 
          { value = makeToken(NesCparser.INTERFACE); 
									  return NesCparser.INTERFACE;
          }
        case 151: break;
        case 83: 
          { value = makeToken(NesCparser.CHARACTER_CONSTANT); 
									  return(NesCparser.CHARACTER_CONSTANT);
          }
        case 152: break;
        case 73: 
          { //finished attribute declaration
											  attribute.setClosingBrackets();
											  attributeElements.add(attribute);
											  yybegin(YYINITIAL);
          }
        case 153: break;
        case 72: 
          { /* attribute function */ 
											  attribute.addFunction(yytext().substring(0,yytext().length()-1), 
											  						yyline, 
											  						yychar-1, 
											  						yychar+yytext().length()-1);	
											  yybegin(ATTRIBUTEFUNCTION);
          }
        case 154: break;
        case 109: 
          { value = makeToken(NesCparser.STRUCT);
									   return(NesCparser.STRUCT);
          }
        case 155: break;
        case 76: 
          { string.append('\n');
          }
        case 156: break;
        case 6: 
          { yybegin(MACRODEF);
          }
        case 157: break;
        case 54: 
          { value = makeToken(NesCparser.LEFT_OP); return(NesCparser.LEFT_OP);
          }
        case 158: break;
        case 75: 
          { string.append('\"');
          }
        case 159: break;
        case 116: 
          { value = makeToken(NesCparser.NORACE); 
									    return NesCparser.NORACE;
          }
        case 160: break;
        case 36: 
          { /* error go back */
											  yybegin(YYINITIAL);
          }
        case 161: break;
        case 20: 
          { value = makeToken(123); return(123);
          }
        case 162: break;
        case 29: 
          { value = makeToken('?'); return('?');
          }
        case 163: break;
        case 88: 
          { value = makeToken(NesCparser.ELSE);
									  return(NesCparser.ELSE);
          }
        case 164: break;
        case 43: 
          { yybegin(YYINITIAL); 
									value = makeToken(NesCparser.STRING);
  									return(NesCparser.STRING);
          }
        case 165: break;
        case 16: 
          { value = makeToken('^'); return('^');
          }
        case 166: break;
        case 102: 
          { value = makeToken(NesCparser.SHORT);
									   return(NesCparser.SHORT);
          }
        case 167: break;
        case 78: 
          { string.append('\r');
          }
        case 168: break;
        case 24: 
          { value = makeToken('('); return('(');
          }
        case 169: break;
        case 100: 
          { //System.out.println("-------- macro/else");
									 yybegin(MACROELSE);
          }
        case 170: break;
        case 80: 
          { value = makeToken(NesCparser.FOR);
									  return(NesCparser.FOR);
          }
        case 171: break;
        case 8: 
          { string.setLength(0); yybegin(STRING);
          }
        case 172: break;
        case 5: 
          { value = makeToken('/'); return('/');
          }
        case 173: break;
        case 53: 
          { value = makeToken(NesCparser.IF);
									  return(NesCparser.IF);
          }
        case 174: break;
        case 27: 
          { value = makeToken(']'); return(']');
          }
        case 175: break;
        case 84: 
          { value = makeToken(NesCparser.ELLIPSIS); return(NesCparser.ELLIPSIS);
          }
        case 176: break;
        case 129: 
          { value = makeToken(NesCparser.REGISTER);									  
									  return(NesCparser.REGISTER);
          }
        case 177: break;
        case 2: 
          { value = makeToken(NesCparser.INTEGER_CONSTANT); 
									  return(NesCparser.INTEGER_CONSTANT);
          }
        case 178: break;
        case 77: 
          { string.append('\t');
          }
        case 179: break;
        case 63: 
          { value = makeToken(NesCparser.EQ_OP); return(NesCparser.EQ_OP);
          }
        case 180: break;
        case 17: 
          { value = makeToken('|'); return('|');
          }
        case 181: break;
        case 34: 
          { /* attribute word  */
											  attribute.addWord(makeToken(NesCparser.IDENTIFIER));
          }
        case 182: break;
        case 60: 
          { value = makeToken(NesCparser.FLOATING_CONSTANT); 
										  return(NesCparser.FLOATING_CONSTANT);
          }
        case 183: break;
        case 1: 
          { return(identifier_or_typedef_name());
          }
        case 184: break;
        case 35: 
          { attribute.addSpacer();
          }
        case 185: break;
        case 107: 
          { value = makeToken(NesCparser.EXTERN);
									   return(NesCparser.EXTERN);
          }
        case 186: break;
        case 134: 
          { attribute = new AttributeElement(makeToken(NesCparser.ATTRIBUTE));
									  yybegin(ATTRIBUTEBEGIN);
									  //return(NesCparser.ATTRIBUTE);
          }
        case 187: break;
        case 123: 
          { value = makeToken(NesCparser.TYPEDEF);
									  return(NesCparser.TYPEDEF);
          }
        case 188: break;
        case 65: 
          { value = makeToken(NesCparser.AND_ASSIGN); return(NesCparser.AND_ASSIGN);
          }
        case 189: break;
        case 93: 
          { value = makeToken(NesCparser.CHAR);
									  return(NesCparser.CHAR);
          }
        case 190: break;
        case 12: 
          { value = makeToken('>'); return('>');
          }
        case 191: break;
        case 111: 
          { value = makeToken(NesCparser.SIGNAL); 
									   return NesCparser.SIGNAL;
          }
        case 192: break;
        case 50: 
          { value = makeToken(NesCparser.MUL_ASSIGN); return(NesCparser.MUL_ASSIGN);
          }
        case 193: break;
        case 55: 
          { value = makeToken(NesCparser.LEFTARROW); 
									   return NesCparser.LEFTARROW;
          }
        case 194: break;
        case 39: 
          { attribute.addFunctionArgumentDelimiter();
          }
        case 195: break;
        case 128: 
          { value = makeToken(NesCparser.INCLUDES); 
									   return NesCparser.INCLUDES;
          }
        case 196: break;
        case 115: 
          { value = makeToken(NesCparser.MODULE); 
									   return NesCparser.MODULE;
          }
        case 197: break;
        case 68: 
          { value = makeToken(NesCparser.OR_ASSIGN); return(NesCparser.OR_ASSIGN);
          }
        case 198: break;
        case 95: 
          { value = makeToken(NesCparser.TASK); 
									   return NesCparser.TASK;
          }
        case 199: break;
        case 70: 
          { value = makeToken(NesCparser.NE_OP); return(NesCparser.NE_OP);
          }
        case 200: break;
        case 135: 
          { value = makeToken(NesCparser.IMPLEMENTATION); 
									  return NesCparser.IMPLEMENTATION;
          }
        case 201: break;
        case 119: 
          { value = makeToken(NesCparser.RETURN);
  								      return(NesCparser.RETURN);
          }
        case 202: break;
        case 13: 
          { value = makeToken('='); return('=');
          }
        case 203: break;
        case 62: 
          { value = makeToken(NesCparser.GE_OP); return(NesCparser.GE_OP);
          }
        case 204: break;
        case 11: 
          { value = makeToken('.'); return('.');
          }
        case 205: break;
        case 127: 
          { value = makeToken(NesCparser.PROVIDES); 
									   return NesCparser.PROVIDES;
          }
        case 206: break;
        case 120: 
          { yybegin(YYINITIAL); 
											//System.out.println("---- end macro/else");
          }
        case 207: break;
        case 108: 
          { value = makeToken(NesCparser.STATIC);
									   return(NesCparser.STATIC);
          }
        case 208: break;
        case 15: 
          { value = makeToken('&'); return('&');
          }
        case 209: break;
        case 106: 
          { value = makeToken(NesCparser.WHILE);
									  return(NesCparser.WHILE);
          }
        case 210: break;
        case 59: 
          { value = makeToken(NesCparser.SUB_ASSIGN); return(NesCparser.SUB_ASSIGN);
          }
        case 211: break;
        case 105: 
          { value = makeToken(NesCparser.BREAK);
									   return(NesCparser.BREAK);
          }
        case 212: break;
        case 10: 
          { value = makeToken('-'); return('-');
          }
        case 213: break;
        case 92: 
          { value = makeToken(NesCparser.CASE);
									  return(NesCparser.CASE);
          }
        case 214: break;
        case 38: 
          { attribute.addFunctionArgument(makeToken(NesCparser.IDENTIFIER));
          }
        case 215: break;
        case 121: 
          { value = makeToken(NesCparser.COMMAND); 
									  return NesCparser.COMMAND;
          }
        case 216: break;
        case 26: 
          { value = makeToken('['); return('[');
          }
        case 217: break;
        case 89: 
          { value = makeToken(NesCparser.ENUM);
									  return(NesCparser.ENUM);
          }
        case 218: break;
        case 87: 
          { value = makeToken(NesCparser.USES); 
									   return NesCparser.USES;
          }
        case 219: break;
        case 14: 
          { value = makeToken('%'); return('%');
          }
        case 220: break;
        case 49: 
          { value = makeToken(NesCparser.DIV_ASSIGN); return(NesCparser.DIV_ASSIGN);
          }
        case 221: break;
        case 85: 
          { value = makeToken(NesCparser.RIGHT_ASSIGN); return(NesCparser.RIGHT_ASSIGN);
          }
        case 222: break;
        case 64: 
          { value = makeToken(NesCparser.MOD_ASSIGN); return(NesCparser.MOD_ASSIGN);
          }
        case 223: break;
        case 56: 
          { value = makeToken(NesCparser.LE_OP); return(NesCparser.LE_OP);
          }
        case 224: break;
        case 58: 
          { value = makeToken(NesCparser.PTR_OP); return(NesCparser.PTR_OP);
          }
        case 225: break;
        case 9: 
          { value = makeToken('<'); return('<');
          }
        case 226: break;
        case 117: 
          { value = makeToken(NesCparser.DOUBLE);
									   return(NesCparser.DOUBLE);
          }
        case 227: break;
        case 32: 
          { /*empty*/
          }
        case 228: break;
        case 96: 
          { value = makeToken(NesCparser.GOTO);
									  return(NesCparser.GOTO);
          }
        case 229: break;
        case 118: 
          { value = makeToken(NesCparser.INLINE); 
									    return NesCparser.INLINE;
          }
        case 230: break;
        case 99: 
          { value = makeToken(NesCparser.UNION);
									  return(NesCparser.UNION);
          }
        case 231: break;
        case 74: 
          { attribute.setOpenBrackets();
//											  Token(value, yytext(), yyline, yychar, yychar+ yytext().length());
											  yybegin(ATTRIBUTE);
          }
        case 232: break;
        case 31: 
          { yybegin(YYINITIAL);
          }
        case 233: break;
        case 133: 
          { value = makeToken(NesCparser.CONFIGURATION); 
									  return NesCparser.CONFIGURATION;
          }
        case 234: break;
        case 67: 
          { value = makeToken(NesCparser.XOR_ASSIGN); return(NesCparser.XOR_ASSIGN);
          }
        case 235: break;
        case 45: 
          { value = makeToken(NesCparser.FLOATING_CONSTANT); 
										 return(NesCparser.FLOATING_CONSTANT);
          }
        case 236: break;
        case 44: 
          { string.append('\\');
          }
        case 237: break;
        case 101: 
          { value = makeToken(NesCparser.EVENT); 
									  return NesCparser.EVENT;
          }
        case 238: break;
        case 81: 
          { value = makeToken(NesCparser.INT);
									  return(NesCparser.INT);
          }
        case 239: break;
        case 112: 
          { value = makeToken(NesCparser.SIZEOF);
									   return(NesCparser.SIZEOF);
          }
        case 240: break;
        case 61: 
          { value = makeToken(NesCparser.RIGHT_OP); return(NesCparser.RIGHT_OP);
          }
        case 241: break;
        case 19: 
          { value = makeToken(125); return(125);
          }
        case 242: break;
        case 98: 
          { value = makeToken(NesCparser.FLOAT);
									   return(NesCparser.FLOAT);
          }
        case 243: break;
        case 33: 
          { /* error */
											  attribute.setError();
											  yybegin(YYINITIAL);
          }
        case 244: break;
        case 69: 
          { value = makeToken(NesCparser.OR_OP); return(NesCparser.OR_OP);
          }
        case 245: break;
        case 21: 
          { value = makeToken(';'); return(';');
          }
        case 246: break;
        case 97: 
          { value = makeToken(NesCparser.VOID);
									  return(NesCparser.VOID);
          }
        case 247: break;
        case 42: 
          { // String was not closed...
  									yybegin(YYINITIAL); 
									value = makeToken(NesCparser.ERRORSTRING);
  									return(NesCparser.ERRORSTRING);
          }
        case 248: break;
        case 4: 
          { /* ignore */
          }
        case 249: break;
        case 57: 
          { value = makeToken(NesCparser.DEC_OP); return(NesCparser.DEC_OP);
          }
        case 250: break;
        case 113: 
          { value = makeToken(NesCparser.SWITCH);
									   return(NesCparser.SWITCH);
          }
        case 251: break;
        case 71: 
          { multiLineBeginToken.end = makeToken(0).end;
											  multiLineCommentTokens.add(multiLineBeginToken);
											  yybegin(YYINITIAL);
          }
        case 252: break;
        case 23: 
          { value = makeToken(':'); return(':');
          }
        case 253: break;
        case 41: 
          { string.append( yytext() );
          }
        case 254: break;
        case 3: 
          { value = makeToken('+'); return('+');
          }
        case 255: break;
        case 51: 
          { value = makeToken(NesCparser.AS); 
									  return NesCparser.AS;
          }
        case 256: break;
        case 124: 
          { value = makeToken(NesCparser.UNSIGNED);									  
									  return(NesCparser.UNSIGNED);
          }
        case 257: break;
        case 130: 
          { value = makeToken(NesCparser.VOLATILE);									  
									  return(NesCparser.VOLATILE);
          }
        case 258: break;
        case 7: 
          { value = makeToken('*'); return('*');
          }
        case 259: break;
        case 48: 
          { multiLineBeginToken = makeToken(0);
									  yybegin(MULTILINECOMMENT);
          }
        case 260: break;
        case 94: 
          { value = makeToken(NesCparser.POST); 
									   return NesCparser.POST;
          }
        case 261: break;
        case 132: 
          { value = makeToken(NesCparser.COMPONENTS); 
									  return NesCparser.COMPONENTS;
          }
        case 262: break;
        case 122: 
          { value = makeToken(NesCparser.DEFAULT);
									  return(NesCparser.DEFAULT);
          }
        case 263: break;
        case 114: 
          { value = makeToken(NesCparser.ATOMIC); 
									    return NesCparser.ATOMIC;
          }
        case 264: break;
        case 125: 
          { value = makeToken(NesCparser.CONTINUE);									  
									  return(NesCparser.CONTINUE);
          }
        case 265: break;
        case 103: 
          { value = makeToken(NesCparser.ASYNC); 
									    return NesCparser.ASYNC;
          }
        case 266: break;
        case 104: 
          { value = makeToken(NesCparser.CONST);
									   return(NesCparser.CONST);
          }
        case 267: break;
        case 91: 
          { value = makeToken(NesCparser.CALL); 
									  return NesCparser.CALL;
          }
        case 268: break;
        case 30: 
          { 
          }
        case 269: break;
        case 37: 
          { /* error */ 
											  attribute.setError();
											  yybegin(ATTRIBUTE);
          }
        case 270: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return YYEOF;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
