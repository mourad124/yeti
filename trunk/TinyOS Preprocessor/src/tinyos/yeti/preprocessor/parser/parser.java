/*
 * Yeti 2, NesC development in Eclipse.
 * Copyright (C) 2009 ETH Zurich
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Web:  http://tos-ide.ethz.ch
 * Mail: tos-ide@tik.ee.ethz.ch
 */

//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 24 09:18:36 CET 2009
//----------------------------------------------------

package tinyos.yeti.preprocessor.parser;

import java_cup.runtime.*;
import tinyos.yeti.preprocessor.lexer.*;
import tinyos.yeti.preprocessor.output.Insights;
import tinyos.yeti.preprocessor.output.TokenSequenceToSource;
import tinyos.yeti.preprocessor.parser.elements.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 24 09:18:36 CET 2009
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\036\004\000\002\036\005\000" +
    "\002\036\004\000\002\036\003\000\002\037\004\000\002" +
    "\037\003\000\002\037\004\000\002\037\003\000\002\024" +
    "\004\000\002\024\005\000\002\024\006\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\004\005\000\002\004\005" +
    "\000\002\040\003\000\002\040\004\000\002\040\004\000" +
    "\002\040\005\000\002\025\003\000\002\025\004\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\006\003\000\002\006\005\000\002\006\006" +
    "\000\002\006\005\000\002\006\007\000\002\006\006\000" +
    "\002\006\007\000\002\006\006\000\002\006\011\000\002" +
    "\006\010\000\002\006\010\000\002\006\007\000\002\007" +
    "\005\000\002\027\003\000\002\027\005\000\002\010\004" +
    "\000\002\010\004\000\002\023\004\000\002\015\004\000" +
    "\002\016\003\000\002\016\004\000\002\017\004\000\002" +
    "\017\005\000\002\017\004\000\002\017\003\000\002\020" +
    "\004\000\002\020\005\000\002\020\004\000\002\020\003" +
    "\000\002\021\004\000\002\022\003\000\002\022\004\000" +
    "\002\022\004\000\002\012\004\000\002\011\004\000\002" +
    "\013\004\000\002\014\004\000\002\035\003\000\002\035" +
    "\004\000\002\030\003\000\002\030\004\000\002\032\003" +
    "\000\002\032\004\000\002\031\003\000\002\031\004\000" +
    "\002\033\003\000\002\034\003\000\002\034\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\074\003\032\004\021\005\034\006\027\007" +
    "\047\010\011\011\037\012\013\013\015\014\014\015\016" +
    "\016\053\017\042\020\050\021\023\022\026\023\040\024" +
    "\043\025\017\026\044\027\031\030\024\031\036\032\051" +
    "\033\052\034\022\035\035\036\007\037\045\001\002\000" +
    "\072\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\036\ufff3\037\ufff3\001\002\000\072\004\021\005\226" +
    "\006\027\007\047\010\011\011\125\012\013\013\015\014" +
    "\014\015\016\016\053\017\042\020\050\021\023\022\026" +
    "\023\040\024\043\025\017\026\044\027\031\030\024\031" +
    "\036\032\051\033\052\034\022\035\035\036\007\037\045" +
    "\001\002\000\076\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\001" +
    "\002\000\072\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\001\002\000\076\002\ufffc" +
    "\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc" +
    "\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026" +
    "\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\001\002\000\072\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037" +
    "\uffed\001\002\000\066\003\104\005\105\006\027\007\047" +
    "\010\011\012\013\013\015\014\014\015\016\016\053\017" +
    "\042\020\050\021\023\022\100\024\113\025\074\026\114" +
    "\027\103\030\077\031\110\032\122\033\123\034\075\035" +
    "\106\036\070\037\115\001\002\000\072\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec" +
    "\001\002\000\072\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\001\002\000\072\004" +
    "\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\001\002\000\072\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\001\002" +
    "\000\072\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\001\002\000\076\002\ufffe\003" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe" +
    "\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035" +
    "\ufffe\036\ufffe\037\ufffe\001\002\000\074\003\uff90\004\uff90" +
    "\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013" +
    "\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90" +
    "\022\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030" +
    "\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90" +
    "\037\uff90\001\002\000\072\004\uffda\005\uffda\006\uffda\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\001\002\000" +
    "\072\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\001\002\000\072\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\001\002\000\076\002\064\003\032\004\021\005\034\006" +
    "\027\007\047\010\011\011\037\012\013\013\015\014\014" +
    "\015\016\016\053\017\042\020\050\021\023\022\026\023" +
    "\040\024\043\025\017\026\044\027\031\030\024\031\036" +
    "\032\051\033\052\034\022\035\035\036\007\037\045\001" +
    "\002\000\072\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\001\002\000\072\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\001\002\000\072\004\021\005\061\006\027\007" +
    "\047\010\011\011\057\012\013\013\015\014\014\015\016" +
    "\016\053\017\042\020\050\021\023\022\026\023\040\024" +
    "\043\025\017\026\044\027\031\030\024\031\036\032\051" +
    "\033\052\034\022\035\035\036\007\037\045\001\002\000" +
    "\072\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde" +
    "\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\001\002\000\004\005\056\001\002" +
    "\000\074\003\uff8f\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010" +
    "\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f" +
    "\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025" +
    "\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f" +
    "\034\uff8f\035\uff8f\036\uff8f\037\uff8f\001\002\000\076\002" +
    "\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\036\ufff7\037\ufff7\001\002\000\072\004\uffd9" +
    "\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\001\002\000\072\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\001\002\000" +
    "\070\003\uffd4\004\021\005\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\022\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\001\002\000\072\004\uffe3\005\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\001\002" +
    "\000\076\002\001\003\001\004\001\005\001\006\001\007" +
    "\001\010\001\011\001\012\001\013\001\014\001\015\001" +
    "\016\001\017\001\020\001\021\001\022\001\023\001\024" +
    "\001\025\001\026\001\027\001\030\001\031\001\032\001" +
    "\033\001\034\001\035\001\036\001\037\001\001\002\000" +
    "\072\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035" +
    "\uffea\036\uffea\037\uffea\001\002\000\072\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\001\002\000\072\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\037\uffdf\001\002\000\072\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\001\002\000\072\004\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\001\002" +
    "\000\072\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\001\002\000\072\004\uffe9\005" +
    "\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037" +
    "\uffe9\001\002\000\072\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\001\002\000\072" +
    "\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\001\002\000\072\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\001" +
    "\002\000\070\003\uffd2\004\021\005\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\001\002\000\074\003\uff8e\004\uff8e" +
    "\005\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e\013" +
    "\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e" +
    "\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030" +
    "\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e" +
    "\037\uff8e\001\002\000\076\002\ufffb\003\ufffb\004\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037" +
    "\ufffb\001\002\000\070\003\uffd3\004\021\005\uffd3\006\uffd3" +
    "\007\uffd3\010\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\001\002\000\072\004\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\001\002\000\076\002\ufff8\003\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\001\002\000\072\004\ufff4\005\ufff4\006\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\001\002\000\070" +
    "\003\uffd1\004\021\005\uffd1\006\uffd1\007\uffd1\010\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\001\002\000\004\002\000\001\002\000\076\002" +
    "\uffff\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff" +
    "\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017" +
    "\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff" +
    "\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\034" +
    "\uffff\035\uffff\036\uffff\037\uffff\001\002\000\010\004\021" +
    "\005\uffbd\017\170\001\002\000\004\005\uffc8\001\002\000" +
    "\070\004\021\006\027\007\047\010\011\011\125\012\013" +
    "\013\015\014\014\015\016\016\053\017\042\020\050\021" +
    "\023\022\026\023\040\024\043\025\017\026\044\027\031" +
    "\030\024\031\036\032\051\033\052\034\022\035\035\036" +
    "\007\037\045\001\002\000\004\005\uffc7\001\002\000\004" +
    "\005\uffbe\001\002\000\004\005\uffc6\001\002\000\070\004" +
    "\021\006\027\007\047\010\011\011\125\012\013\013\015" +
    "\014\014\015\016\016\053\017\042\020\050\021\023\022" +
    "\026\023\040\024\043\025\017\026\044\027\031\030\024" +
    "\031\036\032\051\033\052\034\022\035\035\036\007\037" +
    "\045\001\002\000\070\004\021\006\027\007\047\010\011" +
    "\011\125\012\013\013\015\014\014\015\016\016\053\017" +
    "\042\020\050\021\023\022\026\023\040\024\043\025\017" +
    "\026\044\027\031\030\024\031\036\032\051\033\052\034" +
    "\022\035\035\036\007\037\045\001\002\000\004\005\uffc5" +
    "\001\002\000\072\004\021\005\uffaa\006\027\007\047\010" +
    "\011\011\125\012\013\013\015\014\014\015\016\016\053" +
    "\017\042\020\050\021\023\022\026\023\040\024\043\025" +
    "\017\026\044\027\031\030\024\031\036\032\051\033\052" +
    "\034\022\035\035\036\007\037\045\001\002\000\004\004" +
    "\021\001\002\000\004\005\160\001\002\000\004\005\uffc9" +
    "\001\002\000\012\003\156\004\021\005\uffa1\016\145\001" +
    "\002\000\004\005\154\001\002\000\076\002\ufff2\003\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2" +
    "\036\ufff2\037\ufff2\001\002\000\070\004\021\006\027\007" +
    "\047\010\011\011\125\012\013\013\015\014\014\015\016" +
    "\016\053\017\042\020\050\021\023\022\026\023\040\024" +
    "\043\025\017\026\044\027\031\030\024\031\036\032\051" +
    "\033\052\034\022\035\035\036\007\037\045\001\002\000" +
    "\004\005\uffc0\001\002\000\070\004\021\006\027\007\047" +
    "\010\011\011\125\012\013\013\015\014\014\015\016\016" +
    "\053\017\042\020\050\021\023\022\026\023\040\024\043" +
    "\025\017\026\044\027\031\030\024\031\036\032\051\033" +
    "\052\034\022\035\035\036\007\037\045\001\002\000\004" +
    "\005\uffc3\001\002\000\004\005\uffca\001\002\000\010\003" +
    "\151\004\021\016\145\001\002\000\012\003\144\004\021" +
    "\005\uffa5\016\145\001\002\000\070\004\021\006\027\007" +
    "\047\010\011\011\125\012\013\013\015\014\014\015\016" +
    "\016\053\017\042\020\050\021\023\022\026\023\040\024" +
    "\043\025\017\026\044\027\031\030\024\031\036\032\051" +
    "\033\052\034\022\035\035\036\007\037\045\001\002\000" +
    "\072\004\021\005\137\006\027\007\047\010\011\011\125" +
    "\012\013\013\015\014\014\015\016\016\053\017\042\020" +
    "\050\021\023\022\026\023\040\024\043\025\017\026\044" +
    "\027\031\030\024\031\036\032\051\033\052\034\022\035" +
    "\035\036\007\037\045\001\002\000\004\005\uffc2\001\002" +
    "\000\004\005\uffbf\001\002\000\004\005\uffc1\001\002\000" +
    "\010\003\134\004\021\005\uff9f\001\002\000\070\004\021" +
    "\006\027\007\047\010\011\011\125\012\013\013\015\014" +
    "\014\015\016\016\053\017\042\020\050\021\023\022\026" +
    "\023\040\024\043\025\017\026\044\027\031\030\024\031" +
    "\036\032\051\033\052\034\022\035\035\036\007\037\045" +
    "\001\002\000\004\005\uffc4\001\002\000\072\004\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\001\002\000\072\004\021\005\uffac\006\027\007\047" +
    "\010\011\011\125\012\013\013\015\014\014\015\016\016" +
    "\053\017\042\020\050\021\023\022\026\023\040\024\043" +
    "\025\017\026\044\027\031\030\024\031\036\032\051\033" +
    "\052\034\022\035\035\036\007\037\045\001\002\000\072" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\036\uffcc\037\uffcc\001\002\000\072\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\001" +
    "\002\000\072\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\001\002\000\072\004\uffcb" +
    "\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\001\002\000\072\004\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\001\002\000" +
    "\004\005\uff9d\001\002\000\006\004\021\005\uff9e\001\002" +
    "\000\072\004\021\005\140\006\027\007\047\010\011\011" +
    "\125\012\013\013\015\014\014\015\016\016\053\017\042" +
    "\020\050\021\023\022\026\023\040\024\043\025\017\026" +
    "\044\027\031\030\024\031\036\032\051\033\052\034\022" +
    "\035\035\036\007\037\045\001\002\000\076\002\ufff1\003" +
    "\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\036\ufff1\037\ufff1\001\002\000\076\002\ufff0\003\ufff0" +
    "\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0" +
    "\036\ufff0\037\ufff0\001\002\000\072\004\021\005\uff99\006" +
    "\027\007\047\010\011\011\125\012\013\013\015\014\014" +
    "\015\016\016\053\017\042\020\050\021\023\022\026\023" +
    "\040\024\043\025\017\026\044\027\031\030\024\031\036" +
    "\032\051\033\052\034\022\035\035\036\007\037\045\001" +
    "\002\000\006\003\147\005\uffa8\001\002\000\006\004\021" +
    "\016\146\001\002\000\004\005\uffa6\001\002\000\016\003" +
    "\uff96\004\uff96\005\uff96\015\uff96\020\uff96\021\uff96\001\002" +
    "\000\016\003\uff95\004\uff95\005\uff95\015\uff95\020\uff95\021" +
    "\uff95\001\002\000\004\005\uffa7\001\002\000\004\005\uffae" +
    "\001\002\000\004\005\uffad\001\002\000\072\004\021\005" +
    "\uffa0\006\027\007\047\010\011\011\125\012\013\013\015" +
    "\014\014\015\016\016\053\017\042\020\050\021\023\022" +
    "\026\023\040\024\043\025\017\026\044\027\031\030\024" +
    "\031\036\032\051\033\052\034\022\035\035\036\007\037" +
    "\045\001\002\000\072\004\021\005\uff9c\006\027\007\047" +
    "\010\011\011\125\012\013\013\015\014\014\015\016\016" +
    "\053\017\042\020\050\021\023\022\026\023\040\024\043" +
    "\025\017\026\044\027\031\030\024\031\036\032\051\033" +
    "\052\034\022\035\035\036\007\037\045\001\002\000\076" +
    "\002\uffd5\003\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010" +
    "\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\037\uffd5\001\002\000\006\003" +
    "\157\005\uffa4\001\002\000\004\005\uffa2\001\002\000\004" +
    "\005\uffa3\001\002\000\076\002\uffd6\003\uffd6\004\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\001\002\000\004\016\162\001\002\000\010\004\uffb1" +
    "\005\uffb1\017\uffb1\001\002\000\072\004\021\005\uffa9\006" +
    "\027\007\047\010\011\011\125\012\013\013\015\014\014" +
    "\015\016\016\053\017\042\020\050\021\023\022\026\023" +
    "\040\024\043\025\017\026\044\027\031\030\024\031\036" +
    "\032\051\033\052\034\022\035\035\036\007\037\045\001" +
    "\002\000\072\004\021\005\uff9b\006\027\007\047\010\011" +
    "\011\125\012\013\013\015\014\014\015\016\016\053\017" +
    "\042\020\050\021\023\022\026\023\040\024\043\025\017" +
    "\026\044\027\031\030\024\031\036\032\051\033\052\034" +
    "\022\035\035\036\007\037\045\001\002\000\072\004\021" +
    "\005\uffab\006\027\007\047\010\011\011\125\012\013\013" +
    "\015\014\014\015\016\016\053\017\042\020\050\021\023" +
    "\022\026\023\040\024\043\025\017\026\044\027\031\030" +
    "\024\031\036\032\051\033\052\034\022\035\035\036\007" +
    "\037\045\001\002\000\072\004\021\005\uff9a\006\027\007" +
    "\047\010\011\011\125\012\013\013\015\014\014\015\016" +
    "\016\053\017\042\020\050\021\023\022\026\023\040\024" +
    "\043\025\017\026\044\027\031\030\024\031\036\032\051" +
    "\033\052\034\022\035\035\036\007\037\045\001\002\000" +
    "\070\004\021\006\027\007\047\010\011\011\125\012\013" +
    "\013\015\014\014\015\016\016\053\017\042\020\050\021" +
    "\023\022\026\023\040\024\043\025\017\026\044\027\031" +
    "\030\024\031\036\032\051\033\052\034\022\035\035\036" +
    "\007\037\045\001\002\000\012\004\021\015\177\016\145" +
    "\020\175\001\002\000\012\004\uffb0\015\uffb0\020\uffb0\021" +
    "\uffb0\001\002\000\072\004\021\005\uffba\006\027\007\047" +
    "\010\011\011\125\012\013\013\015\014\014\015\016\016" +
    "\053\017\042\020\050\021\023\022\026\023\040\024\043" +
    "\025\017\026\044\027\031\030\024\031\036\032\051\033" +
    "\052\034\022\035\035\036\007\037\045\001\002\000\006" +
    "\004\021\020\175\001\002\000\012\004\021\015\206\016" +
    "\146\020\207\001\002\000\072\004\uff92\005\uff92\006\uff92" +
    "\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015" +
    "\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92" +
    "\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032" +
    "\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\001\002" +
    "\000\012\004\021\015\177\020\175\021\204\001\002\000" +
    "\006\004\uff98\020\uff98\001\002\000\072\004\021\005\uffb8" +
    "\006\027\007\047\010\011\011\125\012\013\013\015\014" +
    "\014\015\016\016\053\017\042\020\050\021\023\022\026" +
    "\023\040\024\043\025\017\026\044\027\031\030\024\031" +
    "\036\032\051\033\052\034\022\035\035\036\007\037\045" +
    "\001\002\000\006\004\021\020\175\001\002\000\010\004" +
    "\021\015\177\016\145\001\002\000\012\004\021\015\206" +
    "\020\207\021\205\001\002\000\010\004\uff94\015\uff94\016" +
    "\uff94\001\002\000\010\004\uff93\015\uff93\016\uff93\001\002" +
    "\000\006\004\uff97\020\uff97\001\002\000\072\004\uff91\005" +
    "\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91" +
    "\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022" +
    "\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91" +
    "\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037" +
    "\uff91\001\002\000\012\004\uffaf\015\uffaf\020\uffaf\021\uffaf" +
    "\001\002\000\010\004\021\015\206\016\146\001\002\000" +
    "\006\004\021\020\175\001\002\000\072\004\021\005\uffb4" +
    "\006\027\007\047\010\011\011\125\012\013\013\015\014" +
    "\014\015\016\016\053\017\042\020\050\021\023\022\026" +
    "\023\040\024\043\025\017\026\044\027\031\030\024\031" +
    "\036\032\051\033\052\034\022\035\035\036\007\037\045" +
    "\001\002\000\006\004\021\020\207\001\002\000\072\004" +
    "\021\005\uffb5\006\027\007\047\010\011\011\125\012\013" +
    "\013\015\014\014\015\016\016\053\017\042\020\050\021" +
    "\023\022\026\023\040\024\043\025\017\026\044\027\031" +
    "\030\024\031\036\032\051\033\052\034\022\035\035\036" +
    "\007\037\045\001\002\000\072\004\021\005\uffb2\006\027" +
    "\007\047\010\011\011\125\012\013\013\015\014\014\015" +
    "\016\016\053\017\042\020\050\021\023\022\026\023\040" +
    "\024\043\025\017\026\044\027\031\030\024\031\036\032" +
    "\051\033\052\034\022\035\035\036\007\037\045\001\002" +
    "\000\072\004\021\005\uffb3\006\027\007\047\010\011\011" +
    "\125\012\013\013\015\014\014\015\016\016\053\017\042" +
    "\020\050\021\023\022\026\023\040\024\043\025\017\026" +
    "\044\027\031\030\024\031\036\032\051\033\052\034\022" +
    "\035\035\036\007\037\045\001\002\000\072\004\021\005" +
    "\uffb9\006\027\007\047\010\011\011\125\012\013\013\015" +
    "\014\014\015\016\016\053\017\042\020\050\021\023\022" +
    "\026\023\040\024\043\025\017\026\044\027\031\030\024" +
    "\031\036\032\051\033\052\034\022\035\035\036\007\037" +
    "\045\001\002\000\072\004\021\005\uffb6\006\027\007\047" +
    "\010\011\011\125\012\013\013\015\014\014\015\016\016" +
    "\053\017\042\020\050\021\023\022\026\023\040\024\043" +
    "\025\017\026\044\027\031\030\024\031\036\032\051\033" +
    "\052\034\022\035\035\036\007\037\045\001\002\000\072" +
    "\004\021\005\uffb7\006\027\007\047\010\011\011\125\012" +
    "\013\013\015\014\014\015\016\016\053\017\042\020\050" +
    "\021\023\022\026\023\040\024\043\025\017\026\044\027" +
    "\031\030\024\031\036\032\051\033\052\034\022\035\035" +
    "\036\007\037\045\001\002\000\072\004\021\005\uffbb\006" +
    "\027\007\047\010\011\011\125\012\013\013\015\014\014" +
    "\015\016\016\053\017\042\020\050\021\023\022\026\023" +
    "\040\024\043\025\017\026\044\027\031\030\024\031\036" +
    "\032\051\033\052\034\022\035\035\036\007\037\045\001" +
    "\002\000\072\004\021\005\uffbc\006\027\007\047\010\011" +
    "\011\125\012\013\013\015\014\014\015\016\016\053\017" +
    "\042\020\050\021\023\022\026\023\040\024\043\025\017" +
    "\026\044\027\031\030\024\031\036\032\051\033\052\034" +
    "\022\035\035\036\007\037\045\001\002\000\072\004\021" +
    "\005\227\006\027\007\047\010\011\011\125\012\013\013" +
    "\015\014\014\015\016\016\053\017\042\020\050\021\023" +
    "\022\026\023\040\024\043\025\017\026\044\027\031\030" +
    "\024\031\036\032\051\033\052\034\022\035\035\036\007" +
    "\037\045\001\002\000\076\002\ufffa\003\ufffa\004\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022" +
    "\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa" +
    "\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\001\002\000\076\002\ufff9\003\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031" +
    "\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\030\002\024\003\040\004\017\024\005\033" +
    "\032\034\027\036\007\037\004\040\011\041\045\042\003" +
    "\001\001\000\002\001\001\000\014\025\224\026\127\033" +
    "\130\041\126\042\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\005" +
    "\100\006\111\007\065\010\101\011\071\012\117\013\120" +
    "\014\106\015\070\016\072\017\075\020\123\021\110\022" +
    "\116\023\066\041\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\064\004" +
    "\017\024\005\033\032\034\027\036\007\037\004\040\011" +
    "\041\045\042\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\033\054\041\057\042\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\032" +
    "\034\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\032\034\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\166" +
    "\001\001\000\002\001\001\000\014\025\165\026\127\033" +
    "\130\041\126\042\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\025\164\026\127\033" +
    "\130\041\126\042\131\001\001\000\014\025\163\026\127" +
    "\033\130\041\126\042\131\001\001\000\002\001\001\000" +
    "\014\025\162\026\127\033\130\041\126\042\131\001\001" +
    "\000\004\033\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\154\033\032\034\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\025\152\026\127\033" +
    "\130\041\126\042\131\001\001\000\002\001\001\000\014" +
    "\025\151\026\127\033\130\041\126\042\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\147\033\032" +
    "\034\142\001\001\000\010\030\141\033\032\034\142\001" +
    "\001\000\014\025\140\026\127\033\130\041\126\042\131" +
    "\001\001\000\014\025\135\026\127\033\130\041\126\042" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\032\034\134\001\001\000\014\025" +
    "\125\026\127\033\130\041\126\042\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\026\132\033\130\041" +
    "\126\042\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\054\001\001\000\012\026\132" +
    "\033\130\041\126\042\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\026\132\033\130\041\126\042\131" +
    "\001\001\000\002\001\001\000\004\033\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\132\033\130\041\126\042\131\001\001\000\012\026\132" +
    "\033\130\041\126\042\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\132\033\130\041\126\042\131\001\001\000\012\026\132" +
    "\033\130\041\126\042\131\001\001\000\012\026\132\033" +
    "\130\041\126\042\131\001\001\000\012\026\132\033\130" +
    "\041\126\042\131\001\001\000\014\025\223\026\127\033" +
    "\130\041\126\042\131\001\001\000\016\027\175\030\170" +
    "\031\171\033\032\034\173\035\172\001\001\000\002\001" +
    "\001\000\014\025\222\026\127\033\130\041\126\042\131" +
    "\001\001\000\010\031\220\033\032\034\213\001\001\000" +
    "\004\033\054\001\001\000\002\001\001\000\014\031\177" +
    "\032\201\033\032\034\202\035\200\001\001\000\002\001" +
    "\001\000\014\025\217\026\127\033\130\041\126\042\131" +
    "\001\001\000\010\031\215\033\032\034\213\001\001\000" +
    "\012\030\207\033\032\034\210\035\211\001\001\000\004" +
    "\033\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\054\001\001\000\010\031\212\033\032\034\213\001" +
    "\001\000\014\025\214\026\127\033\130\041\126\042\131" +
    "\001\001\000\004\033\054\001\001\000\012\026\132\033" +
    "\130\041\126\042\131\001\001\000\014\025\216\026\127" +
    "\033\130\041\126\042\131\001\001\000\012\026\132\033" +
    "\130\041\126\042\131\001\001\000\012\026\132\033\130" +
    "\041\126\042\131\001\001\000\014\025\221\026\127\033" +
    "\130\041\126\042\131\001\001\000\012\026\132\033\130" +
    "\041\126\042\131\001\001\000\012\026\132\033\130\041" +
    "\126\042\131\001\001\000\012\026\132\033\130\041\126" +
    "\042\131\001\001\000\012\026\132\033\130\041\126\042" +
    "\131\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
	State states;
	
	public void setStates( State states ){
		this.states = states;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // whitespaces ::= whitespaces whitespace 
            {
              TokenSequence RESULT =null;
		TokenSequence w = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; w.tokens().add( s ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whitespaces",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // whitespaces ::= whitespace 
            {
              TokenSequence RESULT =null;
		Token w = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TokenSequence( w ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whitespaces",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // whitespace ::= WHITESPACE 
            {
              Token RESULT =null;
		PreprocessorToken w = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( w ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whitespace",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // wclose ::= whitespaces CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("wclose",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // wclose ::= CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("wclose",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // wcomma ::= whitespaces COMMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("wcomma",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // wcomma ::= COMMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("wcomma",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // widentifier ::= whitespaces IDENTIFIER 
            {
              Identifier RESULT =null;
		PreprocessorToken i = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier( i ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("widentifier",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // widentifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		PreprocessorToken i = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier( i ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("widentifier",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // wvararg ::= whitespaces VARARG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("wvararg",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // wvararg ::= VARARG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("wvararg",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cerror ::= K_ERROR token_sequence 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		TokenSequence t = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.states.reportWarning( "#error:" + TokenSequenceToSource.toString( t ), Insights.directiveError(), new Token( k ) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cerror",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cwarning ::= K_WARNING token_sequence 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		TokenSequence t = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.states.reportWarning( "#warning:" + TokenSequenceToSource.toString( t ), Insights.directiveWarning(), new Token( k ) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cwarning",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // line ::= K_LINE token_sequence 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		TokenSequence t = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Line line = new Line( k, t );
			line.apply( parser.states ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("line",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // pragma ::= K_PRAGMA token_sequence 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		TokenSequence t = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.states.reportMessage( "Directive #pragma found and ignored", Insights.directivePragmaIgnored(), new Token( k ), t ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pragma",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // endif_part ::= K_ENDIF error 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.states.reportError( "Directive #endif must not have arguments", Insights.directiveEndifWithArgument(), new Token( k ) );
			parser.states.endifpart( new Token( k ) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("endif_part",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // endif_part ::= K_ENDIF whitespaces 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.states.endifpart( new Token( k ) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("endif_part",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // endif_part ::= K_ENDIF 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.states.endifpart( new Token( k ) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("endif_part",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // elif_part ::= K_ELIF token_sequence 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		TokenSequence t = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ElifPart p = new ElifPart( k, t );
			parser.states.elifpart( p );
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_part",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ifndef_part ::= K_IFNDEF 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.states.reportError( "Directive #ifndef must have exactly one identifier as argument", Insights.directiveIfndefMissingIdentifierArgument(), new Token( k )); 
			parser.states.ifndefpart( new IfndefPart( k, null ) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifndef_part",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ifndef_part ::= K_IFNDEF error 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.states.reportError( "Directive #ifndef must have exactly one identifier as argument", Insights.directiveIfndefMissingIdentifierArgument(), new Token( k )); 
			parser.states.ifndefpart( new IfndefPart( k, null ) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifndef_part",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ifndef_part ::= K_IFNDEF widentifier error 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.states.reportError( "Directive #ifndef must have exactly one identifier as argument", Insights.directiveIfndefMissingIdentifierArgument(), new Token( k )); 
			parser.states.ifndefpart( new IfndefPart( k, i ) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifndef_part",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ifndef_part ::= K_IFNDEF widentifier 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 IfndefPart p = new IfndefPart( k, i );
			parser.states.ifndefpart( p ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifndef_part",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ifdef_part ::= K_IFDEF 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.states.reportError( "Directive #ifdef must have exactly one identifier as argument", Insights.directiveIfdefMissingIdentifierArgument(), new Token( k ));
			parser.states.ifdefpart( new IfdefPart( k, null ) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdef_part",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ifdef_part ::= K_IFDEF error 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.states.reportError( "Directive #ifdef must have exactly one identifier as argument", Insights.directiveIfdefMissingIdentifierArgument(), new Token( k ));
			parser.states.ifdefpart( new IfdefPart( k, null ) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdef_part",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ifdef_part ::= K_IFDEF widentifier error 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.states.reportError( "Directive #ifdef must have exactly one identifier as argument", Insights.directiveIfdefMissingIdentifierArgument(), new Token( k ));
			parser.states.ifdefpart( new IfdefPart( k, i ) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdef_part",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ifdef_part ::= K_IFDEF widentifier 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 IfdefPart p = new IfdefPart( k, i );
			parser.states.ifdefpart( p ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdef_part",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // else_part ::= K_ELSE token_sequence 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		TokenSequence t = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.states.elsepart( new Token( k ) ); 
			parser.states.reportWarning( "Directive #else does not need any arguments", Insights.directiveElseWithArgument(), new Token( k ), t ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // else_part ::= K_ELSE 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.states.elsepart( new Token( k ) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // if_part ::= K_IF token_sequence 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		TokenSequence t = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 IfPart p = new IfPart( k, t );
			parser.states.ifpart( p );
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_part",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // include ::= K_INCLUDE token_sequence 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		TokenSequence t = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Include d = new Include( k, t );
			parser.states.include( d ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("include",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // undef ::= K_UNDEF error 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.states.reportError( "Directive #undef must have exactly one identifier argument", Insights.directiveUndefMissingIdentifierArgument(), new Token( k )); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("undef",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // undef ::= K_UNDEF widentifier 
            {
              Object RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Undef d = new Undef( k, i );
			parser.states.undef( d );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("undef",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // identifier_list ::= identifier_list wcomma widentifier 
            {
              IdentifierList RESULT =null;
		IdentifierList l = (IdentifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.identifiers().add( i ); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // identifier_list ::= widentifier 
            {
              IdentifierList RESULT =null;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierList( i ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // define_head ::= K_DEFINE whitespace IDENTIFIER 
            {
              Define RESULT =null;
		PreprocessorToken k = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		PreprocessorToken i = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Define d = new Define( k, new Identifier( i ));
			RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define_head",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // define ::= define_head OPEN identifier_list wvararg wclose 
            {
              Object RESULT =null;
		Define h = (Define)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		IdentifierList l = (IdentifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 h.setParameters( l );
			h.setTokens( new TokenSequence() );
			h.setVarArg( Define.VarArg.YES_NAMED );
			parser.states.define( h ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // define ::= define_head OPEN identifier_list wvararg wclose token_sequence 
            {
              Object RESULT =null;
		Define h = (Define)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		IdentifierList l = (IdentifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		TokenSequence t = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 h.setParameters( l );
			h.setTokens( t );
			h.setVarArg( Define.VarArg.YES_NAMED );
			parser.states.define( h ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // define ::= define_head OPEN identifier_list wcomma wvararg wclose 
            {
              Object RESULT =null;
		Define h = (Define)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		IdentifierList l = (IdentifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 h.setParameters( l );
			h.setTokens( new TokenSequence() );
			h.setVarArg( Define.VarArg.YES_UNNAMED );
			parser.states.define( h ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // define ::= define_head OPEN identifier_list wcomma wvararg wclose token_sequence 
            {
              Object RESULT =null;
		Define h = (Define)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		IdentifierList l = (IdentifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		TokenSequence t = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 h.setParameters( l );
			h.setTokens( t );
			h.setVarArg( Define.VarArg.YES_UNNAMED );
			parser.states.define( h ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // define ::= define_head OPEN wvararg wclose 
            {
              Object RESULT =null;
		Define h = (Define)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  h.setTokens( new TokenSequence() );
			h.setVarArg( Define.VarArg.YES_UNNAMED );
			h.setParameters( new IdentifierList() );
			parser.states.define( h ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // define ::= define_head OPEN wvararg wclose token_sequence 
            {
              Object RESULT =null;
		Define h = (Define)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		TokenSequence t = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  h.setTokens( t );
			h.setParameters( new IdentifierList() );
			h.setVarArg( Define.VarArg.YES_UNNAMED );
			parser.states.define( h ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // define ::= define_head OPEN identifier_list wclose 
            {
              Object RESULT =null;
		Define h = (Define)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		IdentifierList l = (IdentifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 h.setParameters( l );
			h.setTokens( new TokenSequence() );
			parser.states.define( h ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // define ::= define_head OPEN identifier_list wclose token_sequence 
            {
              Object RESULT =null;
		Define h = (Define)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		IdentifierList l = (IdentifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		TokenSequence t = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 h.setParameters( l );
			h.setTokens( t );
			parser.states.define( h ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // define ::= define_head OPEN wclose 
            {
              Object RESULT =null;
		Define h = (Define)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 h.setTokens( new TokenSequence() );
			h.setParameters( new IdentifierList() );
			parser.states.define( h ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // define ::= define_head OPEN wclose token_sequence 
            {
              Object RESULT =null;
		Define h = (Define)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		TokenSequence t = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 h.setTokens( t );
			h.setParameters( new IdentifierList() );
			parser.states.define( h ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // define ::= define_head whitespace token_sequence 
            {
              Object RESULT =null;
		Define h = (Define)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		TokenSequence t = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 h.setTokens( t );
			parser.states.define( h ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // define ::= define_head 
            {
              Object RESULT =null;
		Define h = (Define)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 h.setTokens( new TokenSequence() );
			parser.states.define( h ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // control ::= line 
            {
              Token RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // control ::= pragma 
            {
              Token RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // control ::= cerror 
            {
              Token RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // control ::= cwarning 
            {
              Token RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // control ::= endif_part 
            {
              Token RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // control ::= elif_part 
            {
              Token RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // control ::= ifndef_part 
            {
              Token RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // control ::= ifdef_part 
            {
              Token RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // control ::= else_part 
            {
              Token RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // control ::= if_part 
            {
              Token RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // control ::= include 
            {
              Token RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // control ::= undef 
            {
              Token RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // control ::= define 
            {
              Token RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // token_sequence_element ::= keyword 
            {
              PreprocessorElement RESULT =null;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = k; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("token_sequence_element",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // token_sequence_element ::= first_element 
            {
              PreprocessorElement RESULT =null;
		PreprocessorElement x = (PreprocessorElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("token_sequence_element",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // token_sequence_element ::= SHARP 
            {
              PreprocessorElement RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("token_sequence_element",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // token_sequence_element ::= whitespace 
            {
              PreprocessorElement RESULT =null;
		Token x = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("token_sequence_element",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // token_sequence ::= token_sequence token_sequence_element 
            {
              TokenSequence RESULT =null;
		TokenSequence d = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		PreprocessorElement t = (PreprocessorElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.tokens().add( t ); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("token_sequence",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // token_sequence ::= token_sequence_element 
            {
              TokenSequence RESULT =null;
		PreprocessorElement t = (PreprocessorElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TokenSequence( t ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("token_sequence",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sharp_line ::= whitespaces SHARP whitespaces 
            {
              TokenSequence RESULT =null;
		TokenSequence w = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		PreprocessorToken s = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		TokenSequence t = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; w.tokens().add( new Token( s )); RESULT.copy( t ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sharp_line",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sharp_line ::= SHARP whitespaces 
            {
              TokenSequence RESULT =null;
		PreprocessorToken s = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		TokenSequence t = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TokenSequence( new Token( s )); RESULT.copy( t ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sharp_line",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sharp_line ::= whitespaces SHARP 
            {
              TokenSequence RESULT =null;
		TokenSequence w = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		PreprocessorToken s = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; w.tokens().add( new Token( s )); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sharp_line",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sharp_line ::= SHARP 
            {
              TokenSequence RESULT =null;
		PreprocessorToken s = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TokenSequence( new Token( s )); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sharp_line",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // control_line ::= sharp_line error NEWLINE 
            {
              TokenSequence RESULT =null;
		PreprocessorToken n = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TokenSequence( new Token( n ));
			parser.states.reportError( "Unknown syntax error in directive", Insights.unknownSyntaxError(), RESULT ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_line",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // control_line ::= sharp_line control NEWLINE 
            {
              TokenSequence RESULT =null;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		PreprocessorToken n = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			TokenSequence t = new TokenSequence();
			if( c != null ){
				t.tokens().add( t );
			}
			t.tokens().add( new Token( n ) );
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_line",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // keyword ::= K_ERROR 
            {
              Token RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // keyword ::= K_WARNING 
            {
              Token RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // keyword ::= K_PRAGMA 
            {
              Token RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // keyword ::= K_LINE 
            {
              Token RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // keyword ::= K_INCLUDE 
            {
              Token RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // keyword ::= K_ENDIF 
            {
              Token RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // keyword ::= K_ELIF 
            {
              Token RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // keyword ::= K_IFNDEF 
            {
              Token RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // keyword ::= K_IFDEF 
            {
              Token RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // keyword ::= K_ELSE 
            {
              Token RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // keyword ::= K_IF 
            {
              Token RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // keyword ::= K_UNDEF 
            {
              Token RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // keyword ::= K_DEFINED 
            {
              Token RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // keyword ::= K_DEFINE 
            {
              Token RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // first_element ::= VARARG 
            {
              PreprocessorElement RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("first_element",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // first_element ::= SMALLER 
            {
              PreprocessorElement RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("first_element",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // first_element ::= GREATER 
            {
              PreprocessorElement RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("first_element",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // first_element ::= COMMA 
            {
              PreprocessorElement RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("first_element",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // first_element ::= CLOSE 
            {
              PreprocessorElement RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("first_element",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // first_element ::= OPEN 
            {
              PreprocessorElement RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("first_element",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // first_element ::= IDENTIFIER 
            {
              PreprocessorElement RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("first_element",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // first_element ::= CONCAT 
            {
              PreprocessorElement RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("first_element",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // first_element ::= MASKED_QUOTE 
            {
              PreprocessorElement RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("first_element",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // first_element ::= TEXT 
            {
              PreprocessorElement RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("first_element",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // first_element ::= QUOTE 
            {
              PreprocessorElement RESULT =null;
		PreprocessorToken x = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Token( x ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("first_element",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // unknown_control ::= sharp_line first_element token_sequence NEWLINE 
            {
              Object RESULT =null;
		PreprocessorElement f = (PreprocessorElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		TokenSequence t = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.states.reportWarning( "unknown directive", Insights.unknownDirective( f.toString() ), f ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unknown_control",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // unknown_control ::= sharp_line first_element NEWLINE 
            {
              Object RESULT =null;
		PreprocessorElement f = (PreprocessorElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.states.reportWarning( "unknown directive", Insights.unknownDirective( f.toString() ), f ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unknown_control",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // unknown_control ::= sharp_line NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unknown_control",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // no_control_begin ::= keyword 
            {
              TokenSequence RESULT =null;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TokenSequence( k ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("no_control_begin",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // no_control_begin ::= whitespaces keyword 
            {
              TokenSequence RESULT =null;
		TokenSequence w = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; w.tokens().add( k ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("no_control_begin",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // no_control_begin ::= first_element 
            {
              TokenSequence RESULT =null;
		PreprocessorElement f = (PreprocessorElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TokenSequence( f ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("no_control_begin",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // no_control_begin ::= whitespaces first_element 
            {
              TokenSequence RESULT =null;
		TokenSequence w = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		PreprocessorElement f = (PreprocessorElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; w.tokens().add( f ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("no_control_begin",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // no_control_line ::= NEWLINE 
            {
              TokenSequence RESULT =null;
		PreprocessorToken n = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TokenSequence( new Token( n )); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("no_control_line",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // no_control_line ::= whitespaces NEWLINE 
            {
              TokenSequence RESULT =null;
		TokenSequence w = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		PreprocessorToken n = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; w.tokens().add( new Token( n )); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("no_control_line",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // no_control_line ::= no_control_begin token_sequence NEWLINE 
            {
              TokenSequence RESULT =null;
		TokenSequence n = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		TokenSequence t = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		PreprocessorToken l = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; n.copy( t ); n.tokens().add( new Token( l )); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("no_control_line",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // no_control_line ::= no_control_begin NEWLINE 
            {
              TokenSequence RESULT =null;
		TokenSequence n = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		PreprocessorToken l = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; n.tokens().add( new Token( l )); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("no_control_line",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // source_element ::= error NEWLINE 
            {
              PreprocessorElement RESULT =null;
		PreprocessorToken n = (PreprocessorToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TokenSequence( new Token( n ));
			parser.states.reportError( "Unknown syntax error", Insights.unknownSyntaxError(), RESULT ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("source_element",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // source_element ::= no_control_line 
            {
              PreprocessorElement RESULT =null;
		TokenSequence c = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("source_element",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // source_element ::= unknown_control 
            {
              PreprocessorElement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("source_element",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // source_element ::= control_line 
            {
              PreprocessorElement RESULT =null;
		TokenSequence c = (TokenSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("source_element",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // source ::= source source_element 
            {
              Source RESULT =null;
		Source s = (Source)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		PreprocessorElement t = (PreprocessorElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if( t != null ){
				s.tokens().add( t );
			}
			RESULT = s; 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("source",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= source EOF 
            {
              Object RESULT =null;
		Source start_val = (Source)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // source ::= source_element 
            {
              Source RESULT =null;
		PreprocessorElement s = (PreprocessorElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			if( s == null ){
				RESULT = new Source();
			}
			else{
				RESULT = new Source( s ); 
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("source",0, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

