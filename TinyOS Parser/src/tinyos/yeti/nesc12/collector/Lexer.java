/* The following code was generated by JFlex 1.4.1 on 10/6/09 11:19 AM */

package tinyos.yeti.nesc12.collector;

import tinyos.yeti.nesc12.lexer.Token;
import tinyos.yeti.nesc12.collector.sym;
import java_cup.runtime.Symbol;
import tinyos.yeti.nesc12.parser.ScopeStack;
import tinyos.yeti.preprocessor.output.Insights;


 


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 10/6/09 11:19 AM from the specification file
 * <tt>temp.jflex</tt>
 */
public abstract class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INCLUDES = 7;
  public static final int INTERFACE = 1;
  public static final int INCLUDE_COMPONENT = 5;
  public static final int INCLUDE_INTERFACE = 4;
  public static final int YYINITIAL = 0;
  public static final int IMPLEMENTATION = 3;
  public static final int READ_IDENTIFIER = 6;
  public static final int COMPONENT = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\36\1\34\1\35\1\35\1\33\22\0\1\36\1\51\1\27"+
    "\1\0\1\1\1\53\1\46\1\26\1\41\1\42\1\47\1\15\1\62"+
    "\1\16\1\25\1\52\1\2\7\7\2\3\1\60\1\61\1\54\1\55"+
    "\1\45\1\30\1\107\1\4\1\101\1\103\1\4\1\22\1\20\5\1"+
    "\1\14\2\1\1\102\1\24\4\1\1\12\2\1\1\6\2\1\1\37"+
    "\1\10\1\40\1\56\1\100\1\0\1\74\1\32\1\75\1\71\1\21"+
    "\1\17\1\76\1\77\1\64\1\1\1\106\1\13\1\104\1\73\1\66"+
    "\1\23\1\1\1\72\1\63\1\67\1\11\1\31\1\105\1\5\1\70"+
    "\1\65\1\43\1\57\1\44\1\50\6\0\1\35\u1fa2\0\1\35\1\35"+
    "\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\2\3\3\2\1\4\1\5\3\2"+
    "\1\6\2\1\1\7\2\2\2\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\14\2\1\35\4\36\1\37\1\40\3\36\1\41"+
    "\1\42\1\43\1\36\1\44\1\45\1\46\2\44\1\47"+
    "\1\50\1\51\1\0\1\3\2\0\3\3\1\0\1\52"+
    "\3\2\2\0\1\53\1\54\1\55\1\56\1\57\10\2"+
    "\2\0\1\60\1\0\1\61\2\2\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\4\2\1\101\5\2\1\102"+
    "\5\2\1\103\13\2\7\0\1\44\1\104\3\0\1\3"+
    "\1\0\4\3\1\52\1\0\1\52\5\2\1\105\6\2"+
    "\1\106\4\0\3\2\1\107\1\110\7\2\1\111\12\2"+
    "\1\112\3\2\1\113\22\2\7\0\1\36\4\0\1\114"+
    "\2\2\1\115\2\2\1\116\1\2\1\117\1\120\1\2"+
    "\2\0\1\2\1\121\14\2\1\122\10\2\1\123\7\2"+
    "\1\124\1\125\1\126\1\2\1\127\12\2\1\0\1\130"+
    "\7\0\1\2\1\131\1\132\2\2\1\133\1\2\2\0"+
    "\1\2\1\134\5\2\1\135\16\2\1\136\2\2\1\137"+
    "\12\2\1\140\2\2\1\141\10\0\1\2\1\142\3\2"+
    "\1\143\1\144\1\145\1\146\1\147\1\150\1\151\5\2"+
    "\1\152\1\2\1\153\3\2\1\154\1\155\14\2\1\156"+
    "\5\0\7\2\1\157\1\160\7\2\1\161\1\36\6\2"+
    "\2\0\1\162\1\2\1\163\1\164\1\2\1\165\1\2"+
    "\1\166\1\167\1\170\2\2\1\171\6\2\1\172\2\0"+
    "\1\173\1\174\1\2\1\175\1\2\1\156\4\2\1\0"+
    "\1\176\2\2\1\177\3\2\1\200\11\2\1\201";

  private static int [] zzUnpackAction() {
    int [] result = new int[500];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438"+
    "\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0240"+
    "\0\u0678\0\u06c0\0\u0708\0\u0240\0\u0240\0\u0240\0\u0240\0\u0240"+
    "\0\u0240\0\u0240\0\u0750\0\u0798\0\u07e0\0\u0240\0\u0828\0\u0870"+
    "\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0240\0\u0240\0\u0240"+
    "\0\u0a20\0\u0a68\0\u0ab0\0\u0af8\0\u0b40\0\u0b88\0\u0bd0\0\u0c18"+
    "\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u0240\0\u0240\0\u0d80\0\u0dc8"+
    "\0\u0e10\0\u0240\0\u0240\0\u0e58\0\u0ea0\0\u0ee8\0\u0240\0\u0240"+
    "\0\u0240\0\u0f30\0\u0f78\0\u0240\0\u0240\0\u0fc0\0\u1008\0\u1050"+
    "\0\u1098\0\u0240\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200\0\u1248"+
    "\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8\0\u05e8\0\u0630"+
    "\0\u0240\0\u0240\0\u0240\0\u0240\0\u0240\0\u1440\0\u1488\0\u14d0"+
    "\0\u1518\0\u1560\0\u15a8\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u0240"+
    "\0\u1710\0\u0240\0\u1758\0\u17a0\0\u17e8\0\u0240\0\u0240\0\u0240"+
    "\0\u0240\0\u0240\0\u0240\0\u0240\0\u0240\0\u1830\0\u0240\0\u0240"+
    "\0\u0240\0\u0240\0\u0240\0\u1878\0\u18c0\0\u1908\0\u1950\0\u0288"+
    "\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90"+
    "\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0"+
    "\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8\0\u0dc8"+
    "\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u2130\0\u2178\0\u21c0\0\u0f78"+
    "\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328\0\u2370\0\u23b8\0\u0240"+
    "\0\u2400\0\u2448\0\u2490\0\u0240\0\u24d8\0\u2520\0\u2568\0\u25b0"+
    "\0\u25f8\0\u0288\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760\0\u27a8"+
    "\0\u0240\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910\0\u2958\0\u29a0"+
    "\0\u0240\0\u0240\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50"+
    "\0\u2b98\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u2d00\0\u2d48\0\u2d90"+
    "\0\u2dd8\0\u2e20\0\u2e68\0\u2eb0\0\u0288\0\u2ef8\0\u2f40\0\u2f88"+
    "\0\u0288\0\u2fd0\0\u3018\0\u3060\0\u30a8\0\u30f0\0\u3138\0\u3180"+
    "\0\u31c8\0\u3210\0\u3258\0\u32a0\0\u32e8\0\u3330\0\u3378\0\u33c0"+
    "\0\u3408\0\u3450\0\u3498\0\u34e0\0\u3528\0\u3570\0\u35b8\0\u3600"+
    "\0\u3648\0\u3690\0\u0f78\0\u36d8\0\u3720\0\u3768\0\u37b0\0\u0288"+
    "\0\u37f8\0\u3840\0\u0288\0\u3888\0\u38d0\0\u0288\0\u3918\0\u0288"+
    "\0\u0288\0\u3960\0\u39a8\0\u39f0\0\u3a38\0\u0288\0\u3a80\0\u3ac8"+
    "\0\u3b10\0\u3b58\0\u3ba0\0\u3be8\0\u3c30\0\u3c78\0\u3cc0\0\u3d08"+
    "\0\u3d50\0\u3d98\0\u0288\0\u3de0\0\u3e28\0\u3e70\0\u3eb8\0\u3f00"+
    "\0\u3f48\0\u3f90\0\u3fd8\0\u0288\0\u4020\0\u4068\0\u40b0\0\u40f8"+
    "\0\u4140\0\u4188\0\u41d0\0\u0288\0\u0288\0\u0288\0\u4218\0\u0288"+
    "\0\u4260\0\u42a8\0\u42f0\0\u4338\0\u4380\0\u43c8\0\u4410\0\u4458"+
    "\0\u44a0\0\u44e8\0\u4530\0\u0240\0\u4578\0\u45c0\0\u4608\0\u4650"+
    "\0\u4698\0\u46e0\0\u4728\0\u4770\0\u0288\0\u0288\0\u47b8\0\u4800"+
    "\0\u0288\0\u4848\0\u4890\0\u48d8\0\u4920\0\u0288\0\u4968\0\u49b0"+
    "\0\u49f8\0\u4a40\0\u4a88\0\u0288\0\u4ad0\0\u4b18\0\u4b60\0\u4ba8"+
    "\0\u4bf0\0\u4c38\0\u4c80\0\u4cc8\0\u4d10\0\u4d58\0\u4da0\0\u4de8"+
    "\0\u4e30\0\u4e78\0\u0288\0\u4ec0\0\u4f08\0\u0288\0\u4f50\0\u4f98"+
    "\0\u4fe0\0\u5028\0\u5070\0\u50b8\0\u5100\0\u5148\0\u5190\0\u51d8"+
    "\0\u0288\0\u5220\0\u5268\0\u0288\0\u52b0\0\u52f8\0\u5340\0\u5388"+
    "\0\u53d0\0\u5418\0\u5460\0\u54a8\0\u54f0\0\u0288\0\u5538\0\u5580"+
    "\0\u55c8\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288"+
    "\0\u5610\0\u5658\0\u56a0\0\u56e8\0\u5730\0\u0288\0\u5778\0\u0288"+
    "\0\u57c0\0\u5808\0\u5850\0\u0288\0\u0288\0\u5898\0\u58e0\0\u5928"+
    "\0\u5970\0\u59b8\0\u5a00\0\u5a48\0\u5a90\0\u5ad8\0\u5b20\0\u5b68"+
    "\0\u5bb0\0\u0288\0\u5bf8\0\u5c40\0\u5c88\0\u5cd0\0\u5d18\0\u5d60"+
    "\0\u5da8\0\u5df0\0\u5e38\0\u5e80\0\u5ec8\0\u5f10\0\u0288\0\u0288"+
    "\0\u5f58\0\u5fa0\0\u5fe8\0\u6030\0\u6078\0\u60c0\0\u6108\0\u0288"+
    "\0\u0288\0\u6150\0\u6198\0\u61e0\0\u6228\0\u6270\0\u62b8\0\u6300"+
    "\0\u6348\0\u0288\0\u6390\0\u0288\0\u0288\0\u63d8\0\u0288\0\u6420"+
    "\0\u0288\0\u0288\0\u0288\0\u6468\0\u64b0\0\u0288\0\u64f8\0\u6540"+
    "\0\u6588\0\u65d0\0\u6618\0\u6660\0\u0288\0\u66a8\0\u66f0\0\u0288"+
    "\0\u0288\0\u6738\0\u0288\0\u6780\0\u67c8\0\u6810\0\u6858\0\u68a0"+
    "\0\u68e8\0\u6930\0\u0240\0\u6978\0\u69c0\0\u0288\0\u6a08\0\u6a50"+
    "\0\u6a98\0\u0240\0\u6ae0\0\u6b28\0\u6b70\0\u6bb8\0\u6c00\0\u6c48"+
    "\0\u6c90\0\u6cd8\0\u6d20\0\u0288";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[500];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\3\12\1\14\1\11\1\15"+
    "\1\12\1\16\1\17\1\20\1\21\1\22\1\12\1\23"+
    "\1\12\1\24\1\12\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\3\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\2\12\1\63\1\12\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\12\1\72\3\12\1\73\1\74\1\12"+
    "\1\75\14\76\1\77\12\76\1\100\3\76\1\101\7\76"+
    "\1\102\1\103\54\76\1\104\2\76\1\77\6\76\1\105"+
    "\3\76\1\100\3\76\1\101\7\76\1\102\1\103\57\76"+
    "\1\77\12\76\1\100\3\76\1\101\7\76\1\102\1\103"+
    "\30\76\1\106\26\76\1\77\12\76\1\100\3\76\1\101"+
    "\7\76\1\107\1\110\14\76\1\111\2\76\1\112\24\76"+
    "\1\113\2\76\3\113\2\76\4\113\2\76\6\113\4\76"+
    "\2\113\1\101\25\76\1\114\1\115\10\113\1\116\1\117"+
    "\12\113\2\76\1\120\2\76\3\120\2\76\4\120\2\76"+
    "\6\120\4\76\2\120\1\101\27\76\24\120\2\76\1\121"+
    "\2\76\3\121\2\76\4\121\2\76\6\121\4\76\2\121"+
    "\1\101\25\76\1\122\1\76\24\121\1\76\111\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\24\12"+
    "\3\0\1\124\1\125\1\0\2\126\1\124\1\0\2\127"+
    "\1\130\1\131\4\0\2\132\2\0\1\133\64\0\2\14"+
    "\3\0\1\14\1\0\2\127\1\130\1\131\4\0\2\132"+
    "\2\0\1\133\63\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\1\134\7\12\1\135\13\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\3\12\1\136\20\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\1\0\1\137\1\140\1\0\2\12\30\0\24\12"+
    "\16\0\1\141\37\0\1\142\50\0\1\143\26\0\1\144"+
    "\7\0\1\145\33\0\7\12\1\123\2\12\1\146\1\12"+
    "\2\0\6\12\4\0\2\12\30\0\3\12\1\147\20\12"+
    "\2\0\4\12\1\150\2\12\1\123\2\12\1\151\1\12"+
    "\2\0\6\12\4\0\1\152\1\12\30\0\10\12\1\153"+
    "\13\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\3\12\1\154\3\12\1\155\14\12\3\0"+
    "\2\133\3\0\1\133\15\0\1\156\62\0\10\137\1\157"+
    "\15\137\1\160\4\137\3\0\52\137\10\140\1\161\16\140"+
    "\1\162\3\140\3\0\52\140\1\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\3\12\1\163\20\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\7\12\1\164\14\12\35\0\1\34\120\0\1\165"+
    "\7\0\1\166\100\0\1\167\6\0\1\170\107\0\1\171"+
    "\107\0\1\172\107\0\1\173\107\0\1\174\50\0\1\175"+
    "\35\0\1\176\1\177\107\0\1\200\107\0\1\201\107\0"+
    "\1\202\1\0\1\203\31\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\1\12\1\204\2\12\1\205"+
    "\7\12\1\206\5\12\1\207\1\12\2\0\7\12\1\123"+
    "\4\12\2\0\1\210\5\12\4\0\2\12\30\0\10\12"+
    "\1\211\10\12\1\212\2\12\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\5\12\1\213\3\12"+
    "\1\214\12\12\2\0\7\12\1\123\4\12\2\0\2\12"+
    "\1\215\3\12\4\0\2\12\30\0\3\12\1\216\20\12"+
    "\2\0\7\12\1\123\4\12\2\0\2\12\1\217\3\12"+
    "\4\0\2\12\30\0\24\12\2\0\4\12\1\220\2\12"+
    "\1\123\4\12\2\0\2\12\1\221\3\12\4\0\2\12"+
    "\30\0\3\12\1\222\20\12\2\0\7\12\1\123\1\223"+
    "\3\12\2\0\6\12\4\0\2\12\30\0\1\224\3\12"+
    "\1\225\17\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\3\12\1\226\5\12\1\227\2\12"+
    "\1\230\7\12\2\0\7\12\1\123\4\12\2\0\2\12"+
    "\1\231\3\12\4\0\2\12\30\0\3\12\1\232\20\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\15\12\1\233\1\234\1\12\1\235\3\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\3\12\1\236\20\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\14\12\1\237\7\12\30\0"+
    "\1\240\60\0\10\240\1\241\16\240\1\76\3\240\3\0"+
    "\52\240\34\0\1\76\136\0\1\242\116\0\1\243\103\0"+
    "\1\244\114\0\1\245\15\0\7\113\1\246\4\113\2\0"+
    "\6\113\4\0\2\113\30\0\24\113\2\0\7\113\1\246"+
    "\4\113\2\0\2\113\1\247\3\113\4\0\2\113\30\0"+
    "\24\113\2\0\7\113\1\246\4\113\2\0\6\113\4\0"+
    "\2\113\30\0\1\250\23\113\2\0\7\120\1\251\4\120"+
    "\2\0\6\120\4\0\2\120\30\0\24\120\2\0\7\121"+
    "\1\252\4\121\2\0\6\121\4\0\2\121\30\0\24\121"+
    "\12\0\2\253\77\0\1\124\1\125\3\0\1\124\1\0"+
    "\2\127\1\130\1\131\4\0\2\132\2\0\1\133\64\0"+
    "\2\125\3\0\1\125\11\0\2\132\2\0\1\133\64\0"+
    "\3\254\2\0\1\254\7\0\4\254\2\0\1\255\4\0"+
    "\1\254\36\0\1\254\2\0\2\254\3\0\1\254\1\0"+
    "\1\254\17\0\1\256\1\257\104\0\2\260\1\261\105\0"+
    "\2\260\1\0\1\261\75\0\2\262\3\0\1\262\5\0"+
    "\2\263\73\0\2\133\3\0\1\133\3\0\2\264\2\0"+
    "\2\264\2\132\66\0\7\12\1\123\4\12\2\0\2\12"+
    "\1\265\3\12\4\0\2\12\30\0\24\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\1\266"+
    "\1\267\22\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\10\12\1\270\13\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\3\12"+
    "\1\271\20\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\7\12\1\272\14\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\4\12"+
    "\1\273\17\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\1\274\23\12\2\0\7\12\1\123"+
    "\4\12\2\0\2\12\1\275\3\12\4\0\2\12\30\0"+
    "\24\12\2\0\7\12\1\123\1\276\3\12\2\0\6\12"+
    "\4\0\2\12\30\0\24\12\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\1\277\23\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\3\12\1\300\20\12\26\0\1\301\64\0\1\137\2\0"+
    "\1\302\1\0\2\137\2\303\4\0\1\137\6\0\5\137"+
    "\34\0\1\137\2\0\3\137\15\0\1\140\2\0\1\304"+
    "\1\0\2\140\2\305\4\0\1\140\6\0\5\140\34\0"+
    "\1\140\2\0\3\140\14\0\7\12\1\123\2\12\1\306"+
    "\1\12\2\0\6\12\4\0\2\12\30\0\1\12\1\307"+
    "\22\12\2\0\7\12\1\123\4\12\2\0\2\12\1\310"+
    "\3\12\4\0\2\12\30\0\24\12\56\0\1\311\107\0"+
    "\1\312\33\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\2\12\1\313\10\12\1\314\10\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\7\12\1\315\1\12\1\316\12\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\3\12\1\317"+
    "\20\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\1\12\1\320\22\12\2\0\7\12\1\123"+
    "\2\12\1\321\1\12\2\0\6\12\4\0\2\12\30\0"+
    "\4\12\1\322\5\12\1\323\11\12\2\0\7\12\1\123"+
    "\4\12\2\0\4\12\1\324\1\12\4\0\2\12\30\0"+
    "\24\12\2\0\7\12\1\123\4\12\2\0\4\12\1\325"+
    "\1\12\4\0\2\12\30\0\24\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\1\326\23\12"+
    "\2\0\7\12\1\123\4\12\2\0\1\327\5\12\4\0"+
    "\2\12\30\0\24\12\2\0\7\12\1\123\1\330\3\12"+
    "\2\0\6\12\4\0\2\12\30\0\24\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\1\331"+
    "\3\12\1\332\6\12\1\333\10\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\15\12\1\334"+
    "\6\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\22\12\1\335\1\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\7\12\1\336"+
    "\14\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\4\12\1\337\17\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\5\12\1\340"+
    "\13\12\1\341\2\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\3\12\1\342\20\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\10\12\1\343\10\12\1\344\2\12\2\0\7\12\1\123"+
    "\2\12\1\345\1\12\2\0\6\12\4\0\2\12\30\0"+
    "\1\346\23\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\11\12\1\347\12\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\10\12"+
    "\1\350\13\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\4\12\1\351\17\12\2\0\7\12"+
    "\1\123\4\12\2\0\2\12\1\352\3\12\4\0\1\353"+
    "\1\12\30\0\1\12\1\354\5\12\1\355\1\12\1\356"+
    "\1\357\11\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\17\12\1\360\4\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\3\12"+
    "\1\361\20\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\6\12\1\362\15\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\1\12"+
    "\1\363\22\12\3\0\1\240\2\0\1\364\1\0\2\240"+
    "\2\365\4\0\1\240\6\0\5\240\34\0\1\240\2\0"+
    "\3\240\34\0\1\366\154\0\1\367\125\0\1\370\72\0"+
    "\1\371\31\0\2\372\76\0\7\113\1\246\4\113\2\0"+
    "\6\113\4\0\2\113\30\0\22\113\1\373\1\113\12\0"+
    "\2\374\106\0\2\375\77\0\3\376\2\0\1\376\7\0"+
    "\4\376\7\0\1\376\36\0\1\376\2\0\2\376\3\0"+
    "\1\376\1\0\1\376\6\0\3\254\2\0\1\254\1\0"+
    "\2\127\1\130\1\131\2\0\4\254\2\132\1\377\4\0"+
    "\1\254\36\0\1\254\2\0\2\254\3\0\1\254\1\0"+
    "\1\254\6\0\3\377\2\0\1\377\7\0\4\377\7\0"+
    "\1\377\36\0\1\377\2\0\2\377\3\0\1\377\1\0"+
    "\1\377\17\0\1\260\110\0\1\260\104\0\2\260\77\0"+
    "\2\262\3\0\1\262\3\0\2\264\2\0\2\264\71\0"+
    "\2\262\3\0\1\262\101\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\1\u0100\23\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\1\12"+
    "\1\u0101\22\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\3\12\1\u0102\20\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\13\12"+
    "\1\u0103\10\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\11\12\1\u0104\12\12\2\0\7\12"+
    "\1\123\4\12\2\0\2\12\1\u0105\3\12\4\0\2\12"+
    "\30\0\24\12\2\0\7\12\1\123\4\12\2\0\2\12"+
    "\1\u0106\3\12\4\0\2\12\30\0\24\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\10\12"+
    "\1\u0107\13\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\21\12\1\u0108\2\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\4\12"+
    "\1\u0109\17\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\1\u010a\1\12\30\0\24\12\3\0\3\137\2\0"+
    "\1\137\7\0\4\137\7\0\1\137\36\0\1\137\2\0"+
    "\2\137\3\0\1\137\1\0\1\137\6\0\3\u010b\2\0"+
    "\1\u010b\7\0\4\u010b\7\0\1\u010b\36\0\1\u010b\2\0"+
    "\2\u010b\3\0\1\u010b\1\0\1\u010b\6\0\3\140\2\0"+
    "\1\140\7\0\4\140\7\0\1\140\36\0\1\140\2\0"+
    "\2\140\3\0\1\140\1\0\1\140\6\0\3\u010c\2\0"+
    "\1\u010c\7\0\4\u010c\7\0\1\u010c\36\0\1\u010c\2\0"+
    "\2\u010c\3\0\1\u010c\1\0\1\u010c\5\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\11\12\1\u010d"+
    "\12\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\6\12\1\u010e\15\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\11\12\1\u010f"+
    "\12\12\2\0\7\12\1\123\4\12\2\0\2\12\1\u0110"+
    "\3\12\4\0\2\12\30\0\24\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\10\12\1\u0111"+
    "\13\12\2\0\7\12\1\123\1\u0112\3\12\2\0\6\12"+
    "\4\0\2\12\30\0\24\12\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\4\12\1\u0113\17\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\7\12\1\u0114\14\12\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\4\12\1\u0115\17\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\1\12\1\u0116\22\12\2\0\7\12\1\123\4\12"+
    "\2\0\2\12\1\u0117\3\12\4\0\2\12\30\0\24\12"+
    "\2\0\7\12\1\123\2\12\1\u0118\1\12\2\0\6\12"+
    "\4\0\2\12\30\0\24\12\2\0\7\12\1\123\2\12"+
    "\1\u0119\1\12\2\0\6\12\4\0\2\12\30\0\24\12"+
    "\2\0\7\12\1\123\4\12\2\0\2\12\1\u011a\3\12"+
    "\4\0\2\12\30\0\24\12\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\23\12\1\u011b\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\11\12\1\u011c\12\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\1\12\1\u011d\30\0\24\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\4\12"+
    "\1\u011e\17\12\2\0\7\12\1\123\1\u011f\3\12\2\0"+
    "\6\12\4\0\2\12\30\0\24\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\1\12\1\u0120"+
    "\22\12\2\0\7\12\1\123\1\u0121\3\12\2\0\6\12"+
    "\4\0\2\12\30\0\1\u0122\23\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\11\12\1\u0123"+
    "\12\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\3\12\1\u0124\20\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\10\12\1\u0125"+
    "\13\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\21\12\1\u0126\2\12\2\0\7\12\1\123"+
    "\4\12\2\0\1\u0127\5\12\4\0\2\12\30\0\1\u0128"+
    "\3\12\1\u0129\17\12\2\0\7\12\1\123\4\12\2\0"+
    "\4\12\1\u012a\1\12\4\0\2\12\30\0\21\12\1\u012b"+
    "\2\12\2\0\7\12\1\123\2\12\1\u012c\1\12\2\0"+
    "\6\12\4\0\2\12\30\0\24\12\2\0\7\12\1\123"+
    "\4\12\2\0\2\12\1\u012d\3\12\4\0\2\12\30\0"+
    "\24\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\7\12\1\u012e\14\12\2\0\7\12\1\123"+
    "\4\12\2\0\2\12\1\u012f\3\12\4\0\2\12\30\0"+
    "\24\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\3\12\1\u0130\20\12\2\0\4\12\1\u0131"+
    "\2\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\24\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\3\12\1\u0132\20\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\10\12\1\u0133"+
    "\13\12\2\0\7\12\1\123\4\12\2\0\2\12\1\u0134"+
    "\3\12\4\0\2\12\30\0\24\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\1\u0135\23\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\3\12\1\u0136\20\12\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\17\12\1\u0137\4\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\21\12\1\u0138\2\12\2\0\7\12\1\123\1\u0139"+
    "\3\12\2\0\6\12\4\0\2\12\30\0\24\12\2\0"+
    "\7\12\1\123\2\12\1\u013a\1\12\2\0\6\12\4\0"+
    "\2\12\30\0\24\12\3\0\3\240\2\0\1\240\7\0"+
    "\4\240\7\0\1\240\36\0\1\240\2\0\2\240\3\0"+
    "\1\240\1\0\1\240\6\0\3\u013b\2\0\1\u013b\7\0"+
    "\4\u013b\7\0\1\u013b\36\0\1\u013b\2\0\2\u013b\3\0"+
    "\1\u013b\1\0\1\u013b\67\0\1\u013c\55\0\1\u013d\101\0"+
    "\1\u013e\105\0\1\u013f\70\0\3\u0140\2\0\1\u0140\7\0"+
    "\4\u0140\7\0\1\u0140\36\0\1\u0140\2\0\2\u0140\3\0"+
    "\1\u0140\1\0\1\u0140\6\0\3\u0141\2\0\1\u0141\7\0"+
    "\4\u0141\7\0\1\u0141\36\0\1\u0141\2\0\2\u0141\3\0"+
    "\1\u0141\1\0\1\u0141\6\0\3\u0142\2\0\1\u0142\7\0"+
    "\4\u0142\7\0\1\u0142\36\0\1\u0142\2\0\2\u0142\3\0"+
    "\1\u0142\1\0\1\u0142\6\0\3\u0143\2\0\1\u0143\7\0"+
    "\4\u0143\7\0\1\u0143\36\0\1\u0143\2\0\2\u0143\3\0"+
    "\1\u0143\1\0\1\u0143\6\0\3\377\2\0\1\377\7\0"+
    "\4\377\2\132\5\0\1\377\36\0\1\377\2\0\2\377"+
    "\3\0\1\377\1\0\1\377\5\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\13\12\1\u0144\10\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\10\12\1\u0145\13\12\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\4\12\1\u0146\17\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\7\12\1\u0147\1\u0148\13\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\4\12\1\u0149"+
    "\17\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\1\12\1\u014a\22\12\3\0\3\u014b\2\0"+
    "\1\u014b\7\0\4\u014b\7\0\1\u014b\36\0\1\u014b\2\0"+
    "\2\u014b\3\0\1\u014b\1\0\1\u014b\6\0\3\u014c\2\0"+
    "\1\u014c\7\0\4\u014c\7\0\1\u014c\36\0\1\u014c\2\0"+
    "\2\u014c\3\0\1\u014c\1\0\1\u014c\5\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\4\12\1\u014d"+
    "\17\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\23\12\1\u014e\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\3\12\1\u014f\20\12"+
    "\2\0\7\12\1\123\4\12\2\0\2\12\1\u0150\3\12"+
    "\4\0\2\12\30\0\11\12\1\u0151\12\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\12\12"+
    "\1\u0152\11\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\1\12\1\u0153\22\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\4\12"+
    "\1\u0154\17\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\12\12\1\u0155\11\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\10\12"+
    "\1\u0156\13\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\7\12\1\u0157\14\12\2\0\7\12"+
    "\1\123\1\u0158\3\12\2\0\6\12\4\0\2\12\30\0"+
    "\24\12\2\0\7\12\1\123\4\12\2\0\2\12\1\u0159"+
    "\3\12\4\0\2\12\30\0\24\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\6\12\1\u015a"+
    "\15\12\2\0\7\12\1\123\1\u015b\3\12\2\0\6\12"+
    "\4\0\2\12\30\0\24\12\2\0\7\12\1\123\2\12"+
    "\1\u015c\1\12\2\0\6\12\4\0\2\12\30\0\24\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\7\12\1\u015d\14\12\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\7\12\1\u015e\14\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\1\u015f\23\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\10\12\1\u0160\13\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\4\12\1\u0161\17\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\12\12\1\u0162\11\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\12\12\1\u0163\11\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\1\12\1\u0164\22\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\1\12\1\u0165\22\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\4\12\1\u0166\17\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\1\12\1\u0167\22\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\3\12\1\u0168\20\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\11\12\1\u0169\12\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\7\12\1\u016a\14\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\4\12\1\u016b\17\12\2\0\7\12\1\123\2\12\1\u016c"+
    "\1\12\2\0\6\12\4\0\2\12\30\0\24\12\2\0"+
    "\7\12\1\123\2\12\1\u016d\1\12\2\0\6\12\4\0"+
    "\2\12\30\0\24\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\1\u016e\23\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\21\12"+
    "\1\u016f\2\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\10\12\1\u0170\13\12\2\0\7\12"+
    "\1\123\3\12\1\u0171\2\0\6\12\4\0\2\12\30\0"+
    "\24\12\2\0\7\12\1\123\4\12\2\0\4\12\1\u0172"+
    "\1\12\4\0\2\12\30\0\24\12\2\0\7\12\1\123"+
    "\2\12\1\u0173\1\12\2\0\6\12\4\0\2\12\30\0"+
    "\24\12\2\0\7\12\1\123\4\12\2\0\2\12\1\u0174"+
    "\3\12\4\0\2\12\30\0\24\12\3\0\3\u0175\2\0"+
    "\1\u0175\7\0\4\u0175\7\0\1\u0175\36\0\1\u0175\2\0"+
    "\2\u0175\3\0\1\u0175\1\0\1\u0175\70\0\1\u0176\111\0"+
    "\1\u0177\113\0\1\u0178\17\0\3\u0179\2\0\1\u0179\7\0"+
    "\4\u0179\7\0\1\u0179\36\0\1\u0179\2\0\2\u0179\3\0"+
    "\1\u0179\1\0\1\u0179\6\0\3\u017a\2\0\1\u017a\7\0"+
    "\4\u017a\7\0\1\u017a\36\0\1\u017a\2\0\2\u017a\3\0"+
    "\1\u017a\1\0\1\u017a\6\0\3\u017b\2\0\1\u017b\7\0"+
    "\4\u017b\7\0\1\u017b\36\0\1\u017b\2\0\2\u017b\3\0"+
    "\1\u017b\1\0\1\u017b\6\0\3\u017c\2\0\1\u017c\7\0"+
    "\4\u017c\7\0\1\u017c\36\0\1\u017c\2\0\2\u017c\3\0"+
    "\1\u017c\1\0\1\u017c\5\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\10\12\1\u017d\13\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\10\12\1\u017e\13\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\1\u017f\23\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\6\12"+
    "\1\u0180\15\12\3\0\3\302\2\0\1\302\7\0\4\302"+
    "\7\0\1\302\36\0\1\302\2\0\2\302\3\0\1\302"+
    "\1\0\1\302\6\0\3\304\2\0\1\304\7\0\4\304"+
    "\7\0\1\304\36\0\1\304\2\0\2\304\3\0\1\304"+
    "\1\0\1\304\5\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\1\12\1\u0181\22\12\2\0\7\12"+
    "\1\123\4\12\2\0\1\u0182\5\12\4\0\2\12\30\0"+
    "\24\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\6\12\1\u0183\15\12\2\0\7\12\1\123"+
    "\2\12\1\u0184\1\12\2\0\6\12\4\0\2\12\30\0"+
    "\24\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\4\12\1\u0185\17\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\12\12\1\u0186"+
    "\11\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\14\12\1\u0187\7\12\2\0\7\12\1\123"+
    "\4\12\2\0\2\12\1\u0188\3\12\4\0\2\12\30\0"+
    "\24\12\2\0\7\12\1\123\4\12\2\0\1\u0189\5\12"+
    "\4\0\2\12\30\0\24\12\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\6\12\1\u018a\15\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\21\12\1\u018b\2\12\2\0\7\12\1\123\4\12"+
    "\2\0\2\12\1\u018c\3\12\4\0\2\12\30\0\24\12"+
    "\2\0\7\12\1\123\2\12\1\u018d\1\12\2\0\6\12"+
    "\4\0\2\12\30\0\24\12\2\0\7\12\1\123\4\12"+
    "\2\0\2\12\1\u018e\3\12\4\0\2\12\30\0\24\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\1\12\1\u018f\22\12\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\10\12\1\u0190\13\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\4\12\1\u0191\17\12\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\1\12\1\u0192\22\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\7\12\1\u0193\14\12\2\0\7\12\1\123\4\12"+
    "\2\0\2\12\1\u0194\3\12\4\0\2\12\30\0\24\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\12\12\1\u0195\11\12\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\13\12\1\u0196\10\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\10\12\1\u0197\13\12\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\10\12\1\u0198\13\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\10\12\1\u0199\13\12\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\1\12\1\u019a\22\12"+
    "\2\0\7\12\1\123\4\12\2\0\2\12\1\u019b\3\12"+
    "\4\0\2\12\30\0\24\12\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\11\12\1\u019c\12\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\1\12\1\u019d\22\12\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\4\12\1\u019e\17\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\15\12\1\u019f\6\12\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\1\u01a0\23\12\2\0"+
    "\7\12\1\123\2\12\1\u01a1\1\12\2\0\6\12\4\0"+
    "\2\12\30\0\24\12\2\0\7\12\1\123\4\12\2\0"+
    "\2\12\1\u01a2\3\12\4\0\2\12\30\0\24\12\3\0"+
    "\3\364\2\0\1\364\7\0\4\364\7\0\1\364\36\0"+
    "\1\364\2\0\2\364\3\0\1\364\1\0\1\364\75\0"+
    "\1\242\111\0\1\u01a3\33\0\1\u01a4\72\0\3\u01a5\2\0"+
    "\1\u01a5\7\0\4\u01a5\7\0\1\u01a5\36\0\1\u01a5\2\0"+
    "\2\u01a5\3\0\1\u01a5\1\0\1\u01a5\6\0\3\u01a6\2\0"+
    "\1\u01a6\7\0\4\u01a6\7\0\1\u01a6\36\0\1\u01a6\2\0"+
    "\2\u01a6\3\0\1\u01a6\1\0\1\u01a6\6\0\3\u01a7\2\0"+
    "\1\u01a7\7\0\4\u01a7\7\0\1\u01a7\36\0\1\u01a7\2\0"+
    "\2\u01a7\3\0\1\u01a7\1\0\1\u01a7\6\0\3\12\2\0"+
    "\1\12\7\0\4\12\7\0\1\12\36\0\1\12\2\0"+
    "\2\12\3\0\1\12\1\0\1\12\5\0\7\12\1\123"+
    "\4\12\2\0\2\12\1\u01a8\3\12\4\0\2\12\30\0"+
    "\24\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\1\12\1\u01a9\22\12\2\0\7\12\1\123"+
    "\4\12\2\0\2\12\1\u01aa\3\12\4\0\2\12\30\0"+
    "\24\12\2\0\7\12\1\123\2\12\1\u01ab\1\12\2\0"+
    "\6\12\4\0\2\12\30\0\24\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\11\12\1\u01ac"+
    "\12\12\2\0\7\12\1\123\4\12\2\0\2\12\1\u01ad"+
    "\3\12\4\0\2\12\30\0\24\12\2\0\7\12\1\123"+
    "\4\12\2\0\2\12\1\u01ae\3\12\4\0\2\12\30\0"+
    "\24\12\2\0\7\12\1\123\4\12\2\0\1\u01af\5\12"+
    "\4\0\2\12\30\0\24\12\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\4\12\1\u01b0\17\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\12\12\1\u01b1\11\12\2\0\7\12\1\123\4\12"+
    "\2\0\2\12\1\u01b2\3\12\4\0\2\12\30\0\24\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\3\12\1\u01b3\20\12\2\0\7\12\1\123\1\u01b4"+
    "\3\12\2\0\6\12\4\0\2\12\30\0\24\12\2\0"+
    "\7\12\1\123\1\u01b5\3\12\2\0\6\12\4\0\2\12"+
    "\30\0\24\12\2\0\7\12\1\123\1\u01b6\3\12\2\0"+
    "\6\12\4\0\2\12\30\0\24\12\2\0\7\12\1\123"+
    "\4\12\2\0\2\12\1\u01b7\3\12\4\0\2\12\30\0"+
    "\24\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\6\12\1\u01b8\15\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\12\12\1\u01b9"+
    "\11\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\10\12\1\u01ba\13\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\4\12\1\u01bb"+
    "\17\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\10\12\1\u01bc\13\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\7\12\1\u01bd"+
    "\14\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\15\12\1\341\6\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\4\12\1\u01be"+
    "\17\12\2\0\7\12\1\123\4\12\2\0\2\12\1\u01bf"+
    "\3\12\4\0\2\12\30\0\24\12\22\0\1\u01c0\162\0"+
    "\1\u01c1\15\0\3\113\2\0\1\113\7\0\4\113\7\0"+
    "\1\113\36\0\1\113\2\0\2\113\3\0\1\113\1\0"+
    "\1\113\6\0\3\120\2\0\1\120\7\0\4\120\7\0"+
    "\1\120\36\0\1\120\2\0\2\120\3\0\1\120\1\0"+
    "\1\120\6\0\3\121\2\0\1\121\7\0\4\121\7\0"+
    "\1\121\36\0\1\121\2\0\2\121\3\0\1\121\1\0"+
    "\1\121\5\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\6\12\1\u01c2\15\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\3\12\1\u01c3"+
    "\20\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\1\u01c4\23\12\2\0\7\12\1\123\4\12"+
    "\2\0\2\12\1\u01c5\3\12\4\0\2\12\30\0\24\12"+
    "\2\0\7\12\1\123\4\12\2\0\6\12\4\0\2\12"+
    "\30\0\12\12\1\u01c6\11\12\2\0\7\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\1\u01c7\23\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\10\12\1\u01c8\13\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\4\12\1\u01c9\17\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\7\12\1\u01ca\14\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\10\12\1\u01cb\13\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\12\12\1\u01cc\11\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\7\12\1\u01cd\14\12\2\0"+
    "\7\12\1\123\4\12\2\0\2\12\1\u01ce\3\12\4\0"+
    "\2\12\30\0\24\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\10\12\1\u01cf\13\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\1\u01d0\23\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\1\12\1\u01d1\22\12\2\0\7\12"+
    "\1\123\4\12\2\0\2\12\1\u01d2\3\12\4\0\2\12"+
    "\30\0\24\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\1\12\1\u01d3\22\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\15\12"+
    "\1\u01d4\6\12\2\0\4\12\1\u01d5\2\12\1\123\4\12"+
    "\2\0\6\12\4\0\2\12\30\0\24\12\74\0\1\u01d6"+
    "\111\0\1\u01d7\13\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\10\12\1\u01d8\13\12\2\0\7\12"+
    "\1\123\4\12\2\0\2\12\1\u01d9\3\12\4\0\2\12"+
    "\30\0\24\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\4\12\1\u01da\17\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\4\12"+
    "\1\u01db\17\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\11\12\1\u01dc\12\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\4\12"+
    "\1\u01dd\17\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\1\12\1\u01de\22\12\2\0\7\12"+
    "\1\123\2\12\1\u01df\1\12\2\0\6\12\4\0\2\12"+
    "\30\0\24\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\15\12\1\u01e0\6\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\12\12"+
    "\1\u01e1\11\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\15\12\1\u0166\6\12\70\0\1\u01e2"+
    "\41\0\1\u01e3\67\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\11\12\1\u01e4\12\12\2\0\7\12"+
    "\1\123\4\12\2\0\6\12\4\0\2\12\30\0\4\12"+
    "\1\u01e5\17\12\2\0\7\12\1\123\4\12\2\0\6\12"+
    "\4\0\2\12\30\0\1\u01e6\23\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\3\12\1\u01e7"+
    "\20\12\2\0\7\12\1\123\4\12\2\0\2\12\1\u01e8"+
    "\3\12\4\0\2\12\30\0\24\12\2\0\7\12\1\123"+
    "\4\12\2\0\6\12\4\0\2\12\30\0\15\12\1\u0188"+
    "\6\12\2\0\7\12\1\123\4\12\2\0\6\12\4\0"+
    "\2\12\30\0\4\12\1\u01e9\17\12\64\0\1\u01ea\25\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\4\12\1\u01eb\17\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\1\12\1\u01ec\22\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\10\12\1\u01ed\13\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\15\12\1\u01ee\6\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\15\12\1\u01ef\6\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\1\12\1\u01f0\22\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\3\12\1\u01f1\20\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\15\12\1\u01f2\6\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\15\12\1\u01c5\6\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\15\12\1\u01c9\6\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\3\12\1\u01f3\20\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\10\12\1\u01a2\13\12\2\0"+
    "\7\12\1\123\4\12\2\0\6\12\4\0\2\12\30\0"+
    "\15\12\1\u01d8\6\12\2\0\7\12\1\123\4\12\2\0"+
    "\6\12\4\0\2\12\30\0\10\12\1\u01f4\13\12\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28008];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\16\1\1\11\3\1\7\11\3\1\1\11"+
    "\7\1\3\11\14\1\2\11\3\1\2\11\3\1\3\11"+
    "\2\1\2\11\4\1\1\11\1\0\1\1\2\0\3\1"+
    "\1\0\4\1\2\0\5\11\10\1\2\0\1\11\1\0"+
    "\1\11\3\1\10\11\1\1\5\11\34\1\7\0\2\1"+
    "\3\0\1\1\1\0\2\1\1\11\2\1\1\0\1\11"+
    "\14\1\1\11\4\0\3\1\2\11\51\1\7\0\1\1"+
    "\4\0\13\1\2\0\56\1\1\0\1\11\7\0\7\1"+
    "\2\0\50\1\10\0\46\1\5\0\30\1\2\0\24\1"+
    "\2\0\12\1\1\0\1\11\6\1\1\11\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[500];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private ScopeStack scopes;
	
	private Symbol[] cache = new Symbol[4];
	private int cacheIndex = 0;
	
	private int tokenBegin = 0;
	
	private int nested = 0;
	private int nestedIntern = 0;
	
	private int afterReadIdentifier;
	private int afterReadInclusion;
	
	private boolean readAs = false;
	
	public void setScopeStack( ScopeStack scopes ){
		this.scopes = scopes;
	}

	public ScopeStack getScopeStack(){
		return scopes;
	}
	
	private void reportError(){
		scopes.getParser().reportError( "Unknown token: '" + yytext() + "'", Insights.unknownSyntaxError(), tokenBegin, tokenBegin + yylength() );
		tokenBegin += yylength();
	}
	
	private Symbol token( int type ){
		return token( type, tokenBegin, tokenBegin + yylength(), yytext() );
	}
	
	private Symbol token( int type, String text ){
		return token( type, tokenBegin, tokenBegin + yylength(), text );
	}
	
	private Symbol token( int type, int left, int right, String text ){
		Symbol result = new Symbol( type, left, right, new Token( text, left, right, scopes.getLevel() ));
		cache[ cacheIndex++ ] = result;
		cacheIndex %= cache.length;
		tokenBegin = right;
		return result;
	}
	
	private Symbol follow( int type ){
		Symbol current = token( type );
		sendLater( current );
		return current;
	}
	
	protected abstract void sendLater( Symbol symbol );
	
	public Symbol previous( Symbol current ){
		for( int i = 0; i < cache.length; i++ ){
			if( cache[i] == current ){
				i -= 1;
				if( i < 0 )
					i += cache.length;
					
				if( i == cacheIndex )
					return null;
					
				return cache[i];
			}
		}
		
		return null;
	}
	
	public Symbol next( Token current ){
		for( int i = 0; i < cache.length; i++ ){
			if( cache[i].value == current ){
				i += 1;
				if( i >= cache.length )
					i -= cache.length;
					
				if( i == cacheIndex )
					return null;
					
				return cache[i];
			}
		}
		
		return null;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 89: 
          { return token( sym.K_UNION );
          }
        case 130: break;
        case 34: 
          { nestedIntern--;
							if( nestedIntern <= 0 ){
								nestedIntern = 0;
								yybegin( afterReadIdentifier );
							}
          }
        case 131: break;
        case 86: 
          { return token( sym.K_CHAR );
          }
        case 132: break;
        case 114: 
          { return token( sym.K_UNSIGNED );
          }
        case 133: break;
        case 100: 
          { return token( sym.K_SIGNED );
          }
        case 134: break;
        case 46: 
          { return token( sym.P_RIGHT_ARROW );
          }
        case 135: break;
        case 64: 
          { return token( sym.P_OR );
          }
        case 136: break;
        case 27: 
          { return follow( sym.P_SEMICOLON );
          }
        case 137: break;
        case 59: 
          { return token( sym.P_SHIFT_LEFT );
          }
        case 138: break;
        case 57: 
          { return token( sym.P_MOD_ASSIGN );
          }
        case 139: break;
        case 91: 
          { return token( sym.NK_EVENT );
          }
        case 140: break;
        case 14: 
          { return follow( sym.P_CURLY_CLOSE );
          }
        case 141: break;
        case 73: 
          { return token( sym.K_INT );
          }
        case 142: break;
        case 108: 
          { return token( sym.NK_NORACE );
          }
        case 143: break;
        case 47: 
          { return token( sym.P_SUB_ASSIGN );
          }
        case 144: break;
        case 25: 
          { return token( sym.P_LINE );
          }
        case 145: break;
        case 11: 
          { return follow( sym.P_ROUND_OPEN );
          }
        case 146: break;
        case 62: 
          { return token( sym.P_XOR_ASSIGN );
          }
        case 147: break;
        case 101: 
          { return token( sym.NK_SIGNAL );
          }
        case 148: break;
        case 90: 
          { return token( sym.K_FLOAT );
          }
        case 149: break;
        case 84: 
          { return token( sym.NK_CALL );
          }
        case 150: break;
        case 102: 
          { return token( sym.K_STRUCT );
          }
        case 151: break;
        case 106: 
          { return token( sym.K_DOUBLE );
          }
        case 152: break;
        case 50: 
          { return token( sym.P_SHIFT_RIGHT );
          }
        case 153: break;
        case 51: 
          { return token( sym.P_GREATER_EQ );
          }
        case 154: break;
        case 76: 
          { return token( sym.NK_USES );
          }
        case 155: break;
        case 55: 
          { return token( sym.P_NOT_EQ );
          }
        case 156: break;
        case 85: 
          { return token( sym.K_CASE );
          }
        case 157: break;
        case 31: 
          { nested++;
          }
        case 158: break;
        case 23: 
          { return token( sym.P_ASSIGN );
          }
        case 159: break;
        case 16: 
          { return token( sym.P_AMP );
          }
        case 160: break;
        case 118: 
          { return token( sym.K_RESTRICT );
          }
        case 161: break;
        case 42: 
          { return token( sym.FLOATING_CONSTANT );
          }
        case 162: break;
        case 21: 
          { return token( sym.P_PERCENT );
          }
        case 163: break;
        case 35: 
          { if( nestedIntern <= 0 ){
								nestedIntern = 0;
								yybegin( afterReadInclusion );
							}
          }
        case 164: break;
        case 12: 
          { return follow( sym.P_ROUND_CLOSE );
          }
        case 165: break;
        case 107: 
          { return token( sym.K_RETURN );
          }
        case 166: break;
        case 127: 
          { return token( sym.NK_COMPONENTS );
          }
        case 167: break;
        case 115: 
          { return token( sym.NK_PROVIDES );
          }
        case 168: break;
        case 70: 
          { return token( sym.P_ELLIPSIS );
          }
        case 169: break;
        case 17: 
          { return token( sym.P_STAR );
          }
        case 170: break;
        case 49: 
          { return token( sym.STRING );
          }
        case 171: break;
        case 124: 
          { yybegin( INTERFACE );
          }
        case 172: break;
        case 69: 
          { return token( sym.K_FOR );
          }
        case 173: break;
        case 18: 
          { return token( sym.P_TILDE );
          }
        case 174: break;
        case 68: 
          { readAs = true;
          }
        case 175: break;
        case 97: 
          { return token( sym.K_WHILE );
          }
        case 176: break;
        case 72: 
          { return token( sym.P_SHIFT_LEFT_ASSIGN );
          }
        case 177: break;
        case 88: 
          { yybegin( INCLUDE_INTERFACE ); afterReadInclusion = COMPONENT;
          }
        case 178: break;
        case 1: 
          { reportError();
          }
        case 179: break;
        case 2: 
          { String text = yytext();
							if( scopes.isTypedef( text )){
								return token( sym.TYPEDEF, text );
							}
							else if( scopes.isEnum( text )){
								return token( sym.ENUMERATION_CONSTANT ); 
							}
							else{
								return token( sym.IDENTIFIER, text );
							}
          }
        case 180: break;
        case 58: 
          { return token( sym.NP_LEFT_ARROW );
          }
        case 181: break;
        case 92: 
          { return token( sym.K_BREAK );
          }
        case 182: break;
        case 112: 
          { return token( sym.K_DEFAULT );
          }
        case 183: break;
        case 105: 
          { return token( sym.K_INLINE );
          }
        case 184: break;
        case 111: 
          { return token( sym.K_TYPEDEF );
          }
        case 185: break;
        case 74: 
          { return token( sym.NK_NEW );
          }
        case 186: break;
        case 22: 
          { return follow( sym.P_SMALLER );
          }
        case 187: break;
        case 60: 
          { return token( sym.P_SMALLER_EQ );
          }
        case 188: break;
        case 44: 
          { return token( sym.P_ADD_ASSIGN );
          }
        case 189: break;
        case 103: 
          { return token( sym.K_STATIC );
          }
        case 190: break;
        case 125: 
          { return token( sym.NK_NX_STRUCT );
          }
        case 191: break;
        case 94: 
          { return token( sym.NK_ASYNC );
          }
        case 192: break;
        case 6: 
          { return token( sym.P_POINT );
          }
        case 193: break;
        case 129: 
          { yybegin( IMPLEMENTATION );
          }
        case 194: break;
        case 43: 
          { return token( sym.P_INCREMENT );
          }
        case 195: break;
        case 99: 
          { return token( sym.K_SIZEOF );
          }
        case 196: break;
        case 109: 
          { return token( sym.NK_ATOMIC );
          }
        case 197: break;
        case 116: 
          { return token( sym.K_VOLATILE );
          }
        case 198: break;
        case 63: 
          { return token( sym.P_OR_ASSIGN );
          }
        case 199: break;
        case 78: 
          { return token( sym.K_ELSE );
          }
        case 200: break;
        case 15: 
          { return follow( sym.P_GREATER );
          }
        case 201: break;
        case 26: 
          { return token( sym.P_COLON );
          }
        case 202: break;
        case 98: 
          { return token( sym.K_EXTERN );
          }
        case 203: break;
        case 95: 
          { return token( sym.K_CONST );
          }
        case 204: break;
        case 5: 
          { return token( sym.P_MINUS );
          }
        case 205: break;
        case 54: 
          { return token( sym.P_MUL_ASSIGN );
          }
        case 206: break;
        case 120: 
          { return token( sym.NK_NX_UNION );
          }
        case 207: break;
        case 117: 
          { yybegin( INCLUDES );
          }
        case 208: break;
        case 40: 
          { return token( sym.INCLUDE_FILE );
          }
        case 209: break;
        case 123: 
          { return token( sym.K_EXTENSION );
          }
        case 210: break;
        case 7: 
          { return token( sym.P_QUESTION );
          }
        case 211: break;
        case 104: 
          { return token( sym.K_SWITCH );
          }
        case 212: break;
        case 93: 
          { return token( sym.K_SHORT );
          }
        case 213: break;
        case 83: 
          { return token( sym.K_AUTO );
          }
        case 214: break;
        case 75: 
          { return token( sym.K_ASM );
          }
        case 215: break;
        case 119: 
          { return token( sym.K_REGISTER );
          }
        case 216: break;
        case 19: 
          { return token( sym.P_EXCLAMATION );
          }
        case 217: break;
        case 79: 
          { return token( sym.K_ENUM );
          }
        case 218: break;
        case 33: 
          { nestedIntern++;
          }
        case 219: break;
        case 71: 
          { return token( sym.P_SHIFT_RIGHT_ASSIGN );
          }
        case 220: break;
        case 87: 
          { return token( sym.K_GOTO );
          }
        case 221: break;
        case 52: 
          { return token( sym.P_AND );
          }
        case 222: break;
        case 96: 
          { return token( sym.K__BOOL );
          }
        case 223: break;
        case 10: 
          { return token( sym.P_RECT_CLOSE );
          }
        case 224: break;
        case 65: 
          { return token( sym.K_IF );
          }
        case 225: break;
        case 38: 
          { readAs = false;
          }
        case 226: break;
        case 82: 
          { return token( sym.NK_TASK );
          }
        case 227: break;
        case 77: 
          { return token( sym.K_LONG );
          }
        case 228: break;
        case 122: 
          { return token( sym.K__COMPLEX );
          }
        case 229: break;
        case 45: 
          { return token( sym.P_DECREMENT );
          }
        case 230: break;
        case 32: 
          { nested--; 
							if( nested <= 0 ){
								nested = 0;
								yybegin( YYINITIAL );
							}
          }
        case 231: break;
        case 128: 
          { yybegin( INCLUDE_COMPONENT ); afterReadInclusion = IMPLEMENTATION;
          }
        case 232: break;
        case 28: 
          { return token( sym.P_COMMA );
          }
        case 233: break;
        case 48: 
          { return token( sym.CHARACTER_CONSTANT );
          }
        case 234: break;
        case 53: 
          { return token( sym.P_AND_ASSIGN );
          }
        case 235: break;
        case 3: 
          { return token( sym.INTEGER_CONSTANT );
          }
        case 236: break;
        case 113: 
          { return token( sym.NK_COMMAND );
          }
        case 237: break;
        case 80: 
          { return token( sym.NK_POST );
          }
        case 238: break;
        case 4: 
          { return token( sym.P_PLUS );
          }
        case 239: break;
        case 81: 
          { return token( sym.K_VOID );
          }
        case 240: break;
        case 36: 
          { if( !readAs ){
								return token( sym.INCLUDE_COMPONENT );
							}
          }
        case 241: break;
        case 110: 
          { yybegin( COMPONENT );
          }
        case 242: break;
        case 121: 
          { return token( sym.K_CONTINUE );
          }
        case 243: break;
        case 61: 
          { return token( sym.P_EQ );
          }
        case 244: break;
        case 66: 
          { return token( sym.K_DO );
          }
        case 245: break;
        case 20: 
          { return token( sym.P_SLASH );
          }
        case 246: break;
        case 67: 
          { return token( sym.NK_AS );
          }
        case 247: break;
        case 126: 
          { yybegin( READ_IDENTIFIER ); afterReadIdentifier = INCLUDE_INTERFACE;
          }
        case 248: break;
        case 29: 
          { return token( sym.NP_AT );
          }
        case 249: break;
        case 56: 
          { return token( sym.P_DIV_ASSIGN );
          }
        case 250: break;
        case 13: 
          { return follow( sym.P_CURLY_OPEN );
          }
        case 251: break;
        case 24: 
          { return token( sym.P_CARET );
          }
        case 252: break;
        case 39: 
          { yybegin( afterReadIdentifier ); return token( sym.INCLUDE_INTERFACE );
          }
        case 253: break;
        case 9: 
          { return token( sym.P_RECT_OPEN );
          }
        case 254: break;
        case 41: 
          { yybegin( YYINITIAL );
          }
        case 255: break;
        case 37: 
          { readAs = false; yybegin( afterReadInclusion );
          }
        case 256: break;
        case 8: 
          { tokenBegin += yylength();
          }
        case 257: break;
        case 30: 
          { 
          }
        case 258: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
