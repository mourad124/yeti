/*
 * Yeti 2, NesC development in Eclipse.
 * Copyright (C) 2009 ETH Zurich
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Web:  http://tos-ide.ethz.ch
 * Mail: tos-ide@tik.ee.ethz.ch
 */

//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Aug 20 10:42:35 CEST 2008
//----------------------------------------------------

package tinyos.yeti.preprocessor.expression;

import java_cup.runtime.*;
import tinyos.yeti.preprocessor.lexer.State;
import tinyos.yeti.preprocessor.output.Insights;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Aug 20 10:42:35 CEST 2008
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\002\005\000\002\002\004\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\004\000\002\002\005\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\007\000\002\002\005\000\002" +
    "\002\004\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\004\000\002\002\006\000\002\002\003" +
    "\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\030\003\013\004\012\005\004\015\015\017" +
    "\006\026\010\032\017\035\007\036\014\037\005\040\011" +
    "\001\002\000\030\003\013\004\012\005\004\015\015\017" +
    "\006\026\010\032\017\035\007\036\014\037\005\040\011" +
    "\001\002\000\056\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\033\uffe6\034\uffe6\001\002\000\030" +
    "\003\013\004\012\005\004\015\015\017\006\026\010\032" +
    "\017\035\007\036\014\037\005\040\011\001\002\000\056" +
    "\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\016\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\025\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\033\uffe5\034\uffe5\001\002\000\032\003\013\004\012" +
    "\005\004\015\015\017\006\026\010\027\077\032\017\035" +
    "\007\036\014\037\005\040\011\001\002\000\056\002\uffe2" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\027\uffe2\030\uffe2\031\uffe2\033" +
    "\uffe2\034\uffe2\001\002\000\030\003\013\004\012\005\004" +
    "\015\015\017\006\026\010\032\017\035\007\036\014\037" +
    "\005\040\011\001\002\000\056\002\uffe1\004\uffe1\005\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\016\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\027\uffe1\030\uffe1\031\uffe1\033\uffe1\034\uffe1\001" +
    "\002\000\056\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\016\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\033\uffe7\034\uffe7\001\002\000\030\003" +
    "\013\004\012\005\004\015\015\017\006\026\010\032\017" +
    "\035\007\036\014\037\005\040\011\001\002\000\052\002" +
    "\040\004\032\005\042\006\024\007\034\010\025\011\041" +
    "\012\033\013\027\014\030\016\045\020\044\021\046\022" +
    "\035\023\026\024\047\025\043\030\036\031\037\033\031" +
    "\001\002\000\006\026\021\036\020\001\002\000\056\002" +
    "\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\016\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\033\uffe4\034\uffe4\001\002\000\004\036\022\001\002\000" +
    "\004\027\023\001\002\000\056\002\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\016\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\027\uffe3\030\uffe3\031\uffe3\033\uffe3\034\uffe3\001" +
    "\002\000\030\003\013\004\012\005\004\015\015\017\006" +
    "\026\010\032\017\035\007\036\014\037\005\040\011\001" +
    "\002\000\030\003\013\004\012\005\004\015\015\017\006" +
    "\026\010\032\017\035\007\036\014\037\005\040\011\001" +
    "\002\000\030\003\013\004\012\005\004\015\015\017\006" +
    "\026\010\032\017\035\007\036\014\037\005\040\011\001" +
    "\002\000\030\003\013\004\012\005\004\015\015\017\006" +
    "\026\010\032\017\035\007\036\014\037\005\040\011\001" +
    "\002\000\030\003\013\004\012\005\004\015\015\017\006" +
    "\026\010\032\017\035\007\036\014\037\005\040\011\001" +
    "\002\000\030\003\013\004\012\005\004\015\015\017\006" +
    "\026\010\032\017\035\007\036\014\037\005\040\011\001" +
    "\002\000\030\003\013\004\012\005\004\015\015\017\006" +
    "\026\010\032\017\035\007\036\014\037\005\040\011\001" +
    "\002\000\030\003\013\004\012\005\004\015\015\017\006" +
    "\026\010\032\017\035\007\036\014\037\005\040\011\001" +
    "\002\000\030\003\013\004\012\005\004\015\015\017\006" +
    "\026\010\032\017\035\007\036\014\037\005\040\011\001" +
    "\002\000\030\003\013\004\012\005\004\015\015\017\006" +
    "\026\010\032\017\035\007\036\014\037\005\040\011\001" +
    "\002\000\030\003\013\004\012\005\004\015\015\017\006" +
    "\026\010\032\017\035\007\036\014\037\005\040\011\001" +
    "\002\000\030\003\013\004\012\005\004\015\015\017\006" +
    "\026\010\032\017\035\007\036\014\037\005\040\011\001" +
    "\002\000\004\002\000\001\002\000\030\003\013\004\012" +
    "\005\004\015\015\017\006\026\010\032\017\035\007\036" +
    "\014\037\005\040\011\001\002\000\030\003\013\004\012" +
    "\005\004\015\015\017\006\026\010\032\017\035\007\036" +
    "\014\037\005\040\011\001\002\000\030\003\013\004\012" +
    "\005\004\015\015\017\006\026\010\032\017\035\007\036" +
    "\014\037\005\040\011\001\002\000\030\003\013\004\012" +
    "\005\004\015\015\017\006\026\010\032\017\035\007\036" +
    "\014\037\005\040\011\001\002\000\030\003\013\004\012" +
    "\005\004\015\015\017\006\026\010\032\017\035\007\036" +
    "\014\037\005\040\011\001\002\000\030\003\013\004\012" +
    "\005\004\015\015\017\006\026\010\032\017\035\007\036" +
    "\014\037\005\040\011\001\002\000\030\003\013\004\012" +
    "\005\004\015\015\017\006\026\010\032\017\035\007\036" +
    "\014\037\005\040\011\001\002\000\056\002\uffee\004\032" +
    "\005\042\006\024\007\034\010\025\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\016\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\027\uffee\030\036\031\037\033\uffee\034" +
    "\uffee\001\002\000\056\002\ufff1\004\032\005\042\006\024" +
    "\007\034\010\025\011\ufff1\012\ufff1\013\ufff1\014\ufff1\016" +
    "\ufff1\020\ufff1\021\ufff1\022\035\023\026\024\047\025\043" +
    "\027\ufff1\030\036\031\037\033\ufff1\034\ufff1\001\002\000" +
    "\056\002\ufff4\004\032\005\042\006\024\007\034\010\025" +
    "\011\ufff4\012\ufff4\013\027\014\ufff4\016\ufff4\020\044\021" +
    "\046\022\035\023\026\024\047\025\043\027\ufff4\030\036" +
    "\031\037\033\ufff4\034\ufff4\001\002\000\056\002\ufff2\004" +
    "\032\005\042\006\024\007\034\010\025\011\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\016\ufff2\020\ufff2\021\ufff2\022\035\023" +
    "\026\024\047\025\043\027\ufff2\030\036\031\037\033\ufff2" +
    "\034\ufff2\001\002\000\056\002\uffed\004\032\005\042\006" +
    "\024\007\034\010\025\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\016\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025" +
    "\uffed\027\uffed\030\036\031\037\033\uffed\034\uffed\001\002" +
    "\000\056\002\ufffe\004\ufffe\005\ufffe\006\024\007\034\010" +
    "\025\011\ufffe\012\ufffe\013\ufffe\014\ufffe\016\ufffe\020\ufffe" +
    "\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\027\ufffe\030" +
    "\ufffe\031\ufffe\033\ufffe\034\ufffe\001\002\000\056\002\ufff9" +
    "\004\032\005\042\006\024\007\034\010\025\011\ufff9\012" +
    "\ufff9\013\027\014\ufff9\016\045\020\044\021\046\022\035" +
    "\023\026\024\047\025\043\027\ufff9\030\036\031\037\033" +
    "\ufff9\034\ufff9\001\002\000\056\002\uffeb\004\032\005\042" +
    "\006\024\007\034\010\025\011\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\016\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\027\uffeb\030\uffeb\031\uffeb\033\uffeb\034\uffeb\001" +
    "\002\000\056\002\uffec\004\032\005\042\006\024\007\034" +
    "\010\025\011\uffec\012\uffec\013\uffec\014\uffec\016\uffec\020" +
    "\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\027\uffec" +
    "\030\uffec\031\uffec\033\uffec\034\uffec\001\002\000\056\002" +
    "\ufff0\004\032\005\042\006\024\007\034\010\025\011\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\016\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\025\ufff0\027\ufff0\030\036\031\037" +
    "\033\ufff0\034\ufff0\001\002\000\056\002\ufffa\004\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\016\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024" +
    "\ufffa\025\ufffa\027\ufffa\030\ufffa\031\ufffa\033\ufffa\034\ufffa" +
    "\001\002\000\056\002\ufff8\004\032\005\042\006\024\007" +
    "\034\010\025\011\041\012\ufff8\013\027\014\030\016\045" +
    "\020\044\021\046\022\035\023\026\024\047\025\043\027" +
    "\ufff8\030\036\031\037\033\ufff8\034\ufff8\001\002\000\056" +
    "\002\001\004\001\005\001\006\024\007\034\010\025\011" +
    "\001\012\001\013\001\014\001\016\001\020\001\021\001" +
    "\022\001\023\001\024\001\025\001\027\001\030\001\031" +
    "\001\033\001\034\001\001\002\000\052\004\032\005\042" +
    "\006\024\007\034\010\025\011\041\012\033\013\027\014" +
    "\030\016\045\020\044\021\046\022\035\023\026\024\047" +
    "\025\043\030\036\031\037\033\031\034\066\001\002\000" +
    "\030\003\013\004\012\005\004\015\015\017\006\026\010" +
    "\032\017\035\007\036\014\037\005\040\011\001\002\000" +
    "\056\002\uffea\004\032\005\042\006\024\007\034\010\025" +
    "\011\041\012\033\013\027\014\030\016\045\020\044\021" +
    "\046\022\035\023\026\024\047\025\043\027\uffea\030\036" +
    "\031\037\033\uffea\034\uffea\001\002\000\056\002\ufff6\004" +
    "\032\005\042\006\024\007\034\010\025\011\041\012\ufff6" +
    "\013\027\014\ufff6\016\045\020\044\021\046\022\035\023" +
    "\026\024\047\025\043\027\ufff6\030\036\031\037\033\ufff6" +
    "\034\ufff6\001\002\000\056\002\ufff7\004\032\005\042\006" +
    "\024\007\034\010\025\011\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\016\ufff7\020\044\021\046\022\035\023\026\024\047\025" +
    "\043\027\ufff7\030\036\031\037\033\ufff7\034\ufff7\001\002" +
    "\000\056\002\uffef\004\032\005\042\006\024\007\034\010" +
    "\025\011\uffef\012\uffef\013\uffef\014\uffef\016\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\027\uffef\030" +
    "\036\031\037\033\uffef\034\uffef\001\002\000\056\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\016\ufffc\020\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\027\ufffc\030\ufffc\031\ufffc\033" +
    "\ufffc\034\ufffc\001\002\000\056\002\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\016\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\027\ufffb\030\ufffb\031\ufffb\033\ufffb\034\ufffb\001" +
    "\002\000\056\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\016\ufff5\020" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\033\ufff5\034\ufff5\001\002\000\056\002" +
    "\uffff\004\uffff\005\uffff\006\024\007\034\010\025\011\uffff" +
    "\012\uffff\013\uffff\014\uffff\016\uffff\020\uffff\021\uffff\022" +
    "\uffff\023\uffff\024\uffff\025\uffff\027\uffff\030\uffff\031\uffff" +
    "\033\uffff\034\uffff\001\002\000\056\002\uffe8\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\016\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\027\uffe8\030\uffe8\031\uffe8\033\uffe8\034\uffe8" +
    "\001\002\000\052\004\032\005\042\006\024\007\034\010" +
    "\025\011\041\012\033\013\027\014\030\016\045\020\044" +
    "\021\046\022\035\023\026\024\047\025\043\027\101\030" +
    "\036\031\037\033\031\001\002\000\056\002\uffe9\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\016\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\027\uffe9\030\uffe9\031\uffe9\033\uffe9\034" +
    "\uffe9\001\002\000\056\002\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\016" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\033\ufff3\034\ufff3\001\002\000" +
    "\056\002\ufffd\004\ufffd\005\ufffd\006\024\007\034\010\025" +
    "\011\ufffd\012\ufffd\013\ufffd\014\ufffd\016\ufffd\020\ufffd\021" +
    "\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\027\ufffd\030\ufffd" +
    "\031\ufffd\033\ufffd\034\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\004\002\015\001\001\000\004\002\102\001" +
    "\001\000\002\001\001\000\004\002\101\001\001\000\002" +
    "\001\001\000\004\002\077\001\001\000\002\001\001\000" +
    "\004\002\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\073\001\001\000\004\002" +
    "\072\001\001\000\004\002\071\001\001\000\004\002\070" +
    "\001\001\000\004\002\067\001\001\000\004\002\064\001" +
    "\001\000\004\002\063\001\001\000\004\002\062\001\001" +
    "\000\004\002\061\001\001\000\004\002\060\001\001\000" +
    "\004\002\057\001\001\000\004\002\056\001\001\000\002" +
    "\001\001\000\004\002\055\001\001\000\004\002\054\001" +
    "\001\000\004\002\053\001\001\000\004\002\052\001\001" +
    "\000\004\002\051\001\001\000\004\002\050\001\001\000" +
    "\004\002\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
	ExprState states;
	
	public void setStates( ExprState states ){
		this.states = states;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= error 
            {
              Lazy RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if( e == null ){
							parser.states.reportError( "Invalid expression: no further details available", Insights.expressionInvalid() );
						}
						else{
							parser.states.reportError( "Invalid expression: " + e, Insights.expressionInvalid() );
						}
						
						RESULT = Lazy.zero();
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= ERROR 
            {
              Lazy RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						parser.states.reportError( e, Insights.expressionInvalid() );
						RESULT = Lazy.zero();
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= DEFINED OPEN IDENTIFIER CLOSE 
            {
              Lazy RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Lazy.macro( i ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= DEFINED IDENTIFIER 
            {
              Lazy RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.macro( i ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= INTEGER 
            {
              Lazy RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.number( i ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= CHARACTER 
            {
              Lazy RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.character( c ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= IDENTIFIER 
            {
              Lazy RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.identifier( i ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= OPEN CLOSE 
            {
              Lazy RESULT =null;
		  parser.states.reportError( "Empty brackets", Insights.expressionEmptyBrackets() );
						RESULT = Lazy.zero(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= OPEN expr CLOSE 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr QUESTION expr COLON expr 
            {
              Lazy RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Lazy c = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lazy t = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy f = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.condition( c, t, f ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr SHIFT_LEFT expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy b = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.shiftleft( a, b ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr SHIFT_RIGHT expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy b = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.shiftright( a, b ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr LESS_EQ expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy b = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.lesseq( a, b ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr LESS expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy b = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.less( a, b ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr GREATER_EQ expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy b = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.greatereq( a, b ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr GREATER expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy b = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.greater( a, b ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr NEQ expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy b = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.neq( a, b ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr EQ expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy b = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.eq( a, b ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= BIT_REVERSE expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.bitreverse( a ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr XOR expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy b = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.xor( a, b ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= NOT expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.not( a ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr AND expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy b = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.and( a, b ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr BIT_AND expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy b = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.bitand( a, b ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr OR expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy b = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.or( a, b ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr BIT_OR expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy b = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.bitor( a, b ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr DIVISION expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy b = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.division( a, b ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr TIMES expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy b = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.multiplication( a, b ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr MOD expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy b = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.mod( a, b ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= MINUS expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.neg( a ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr MINUS expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy b = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.subtraction( a, b ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= PLUS expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lazy start_val = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr ::= expr PLUS expr 
            {
              Lazy RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lazy a = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lazy b = (Lazy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Lazy.addition( a, b ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

