/* The following code was generated by JFlex 1.4.1 on 2/24/09 9:10 AM */

package tinyos.yeti.preprocessor.lexer;

import tinyos.yeti.preprocessor.FileInfo;
import tinyos.yeti.preprocessor.parser.*;
import java_cup.runtime.*;

/**
 * This class reads a c-source file and searches tokens for the preprocessor.
 */

class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PUSHED = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\6\1\7\1\4\1\5\22\0\1\3\1\0\1\11"+
    "\1\10\1\1\3\0\1\13\1\15\2\0\1\14\1\0\1\20\1\0"+
    "\1\2\11\2\2\0\1\17\1\0\1\16\2\0\32\1\1\0\1\12"+
    "\2\0\1\1\1\0\1\32\1\1\1\40\1\21\1\22\1\23\1\33"+
    "\1\1\1\24\2\1\1\34\1\37\1\25\1\30\1\36\1\1\1\27"+
    "\1\35\1\1\1\26\1\1\1\31\3\1\12\0\1\7\44\0\1\1"+
    "\12\0\1\1\4\0\1\1\5\0\27\1\1\0\37\1\1\0\u013f\1"+
    "\31\0\162\1\4\0\14\1\16\0\5\1\11\0\1\1\213\0\1\1"+
    "\13\0\1\1\1\0\3\1\1\0\1\1\1\0\24\1\1\0\54\1"+
    "\1\0\46\1\1\0\5\1\4\0\202\1\10\0\105\1\1\0\46\1"+
    "\2\0\2\1\6\0\20\1\41\0\46\1\2\0\1\1\7\0\47\1"+
    "\110\0\33\1\5\0\3\1\56\0\32\1\5\0\13\1\25\0\12\2"+
    "\4\0\2\1\1\0\143\1\1\0\1\1\17\0\2\1\7\0\2\1"+
    "\12\2\3\1\2\0\1\1\20\0\1\1\1\0\36\1\35\0\3\1"+
    "\60\0\46\1\13\0\1\1\u0152\0\66\1\3\0\1\1\22\0\1\1"+
    "\7\0\12\1\4\0\12\2\25\0\10\1\2\0\2\1\2\0\26\1"+
    "\1\0\7\1\1\0\1\1\3\0\4\1\3\0\1\1\36\0\2\1"+
    "\1\0\3\1\4\0\12\2\2\1\23\0\6\1\4\0\2\1\2\0"+
    "\26\1\1\0\7\1\1\0\2\1\1\0\2\1\1\0\2\1\37\0"+
    "\4\1\1\0\1\1\7\0\12\2\2\0\3\1\20\0\11\1\1\0"+
    "\3\1\1\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1\3\0"+
    "\1\1\22\0\1\1\17\0\2\1\4\0\12\2\25\0\10\1\2\0"+
    "\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1\3\0"+
    "\1\1\36\0\2\1\1\0\3\1\4\0\12\2\1\0\1\1\21\0"+
    "\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0\2\1\1\0"+
    "\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0\10\1\1\0"+
    "\3\1\55\0\11\2\25\0\10\1\1\0\3\1\1\0\27\1\1\0"+
    "\12\1\1\0\5\1\46\0\2\1\4\0\12\2\25\0\10\1\1\0"+
    "\3\1\1\0\27\1\1\0\12\1\1\0\5\1\3\0\1\1\40\0"+
    "\1\1\1\0\2\1\4\0\12\2\25\0\10\1\1\0\3\1\1\0"+
    "\27\1\1\0\20\1\46\0\2\1\4\0\12\2\25\0\22\1\3\0"+
    "\30\1\1\0\11\1\1\0\1\1\2\0\7\1\72\0\60\1\1\0"+
    "\2\1\14\0\7\1\11\0\12\2\47\0\2\1\1\0\1\1\2\0"+
    "\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1\1\0"+
    "\2\1\11\0\1\1\2\0\5\1\1\0\1\1\11\0\12\2\2\0"+
    "\2\1\42\0\1\1\37\0\12\2\26\0\10\1\1\0\42\1\35\0"+
    "\4\1\164\0\42\1\1\0\5\1\1\0\2\1\25\0\12\2\6\0"+
    "\6\1\112\0\46\1\12\0\51\1\7\0\132\1\5\0\104\1\5\0"+
    "\122\1\6\0\7\1\1\0\77\1\1\0\1\1\1\0\4\1\2\0"+
    "\7\1\1\0\1\1\1\0\4\1\2\0\47\1\1\0\1\1\1\0"+
    "\4\1\2\0\37\1\1\0\1\1\1\0\4\1\2\0\7\1\1\0"+
    "\1\1\1\0\4\1\2\0\7\1\1\0\7\1\1\0\27\1\1\0"+
    "\37\1\1\0\1\1\1\0\4\1\2\0\7\1\1\0\47\1\1\0"+
    "\23\1\16\0\11\2\56\0\125\1\14\0\u026c\1\2\0\10\1\12\0"+
    "\32\1\5\0\113\1\25\0\15\1\1\0\4\1\16\0\22\1\16\0"+
    "\22\1\16\0\15\1\1\0\3\1\17\0\64\1\43\0\1\1\4\0"+
    "\1\1\3\0\12\2\46\0\12\2\6\0\130\1\10\0\51\1\127\0"+
    "\35\1\51\0\12\2\36\1\2\0\5\1\u038b\0\154\1\224\0\234\1"+
    "\4\0\132\1\6\0\26\1\2\0\6\1\2\0\46\1\2\0\6\1"+
    "\2\0\10\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\37\1"+
    "\2\0\65\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1"+
    "\3\0\4\1\2\0\6\1\4\0\15\1\5\0\3\1\1\0\7\1"+
    "\53\0\1\7\1\7\107\0\1\1\15\0\1\1\202\0\1\1\4\0"+
    "\1\1\2\0\12\1\1\0\1\1\3\0\5\1\6\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\4\1\1\0\3\1\1\0\7\1\3\0"+
    "\3\1\5\0\5\1\u0ebb\0\2\1\52\0\5\1\5\0\2\1\4\0"+
    "\126\1\6\0\3\1\1\0\132\1\1\0\4\1\5\0\50\1\4\0"+
    "\136\1\21\0\30\1\70\0\20\1\u0200\0\u19b6\1\112\0\u51a6\1\132\0"+
    "\u048d\1\u0773\0\u2ba4\1\u215c\0\u012e\1\2\0\73\1\225\0\7\1\14\0"+
    "\5\1\5\0\1\1\1\0\12\1\1\0\15\1\1\0\5\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0"+
    "\100\1\2\0\66\1\50\0\14\1\164\0\5\1\1\0\207\1\23\0"+
    "\12\2\7\0\32\1\6\0\32\1\13\0\131\1\3\0\6\1\2\0"+
    "\6\1\2\0\6\1\2\0\3\1\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\1\7\2"+
    "\2\14\1\1\1\0\1\15\1\16\1\0\4\2\1\17"+
    "\5\2\1\20\17\2\1\21\1\22\5\2\1\23\2\2"+
    "\1\24\1\25\1\26\2\2\1\27\2\2\1\30\1\31"+
    "\2\2\1\32\1\33\1\34\1\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347"+
    "\0\102\0\u0108\0\102\0\102\0\102\0\102\0\102\0\u0129"+
    "\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce\0\u01ef\0\u0210\0\102"+
    "\0\u0231\0\u0252\0\204\0\102\0\102\0\u0273\0\u0294\0\u02b5"+
    "\0\u02d6\0\u02f7\0\u0318\0\u0339\0\u035a\0\u037b\0\u039c\0\u03bd"+
    "\0\102\0\u03de\0\u03ff\0\u0420\0\u0441\0\u0462\0\u0483\0\u04a4"+
    "\0\u04c5\0\u04e6\0\u0507\0\u0528\0\u0549\0\u056a\0\u058b\0\u05ac"+
    "\0\143\0\143\0\u05cd\0\u05ee\0\u060f\0\u0630\0\u0651\0\143"+
    "\0\u0672\0\u0693\0\143\0\143\0\143\0\u06b4\0\u06d5\0\143"+
    "\0\u06f6\0\u0717\0\u0738\0\143\0\u0759\0\u077a\0\143\0\143"+
    "\0\143\0\143";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\2\6\3\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\4\1\23\1\4\1\24\2\4\1\25\2\4\1\26"+
    "\1\4\1\27\2\4\5\30\1\31\33\30\42\0\2\4"+
    "\16\0\20\4\1\0\1\32\1\33\16\0\20\32\3\0"+
    "\2\6\3\7\35\0\4\7\41\0\1\34\41\0\1\35"+
    "\47\0\1\36\21\0\2\4\16\0\1\4\1\37\16\4"+
    "\1\0\2\4\16\0\4\4\1\40\1\4\1\41\4\4"+
    "\1\42\4\4\1\0\2\4\16\0\2\4\1\43\1\4"+
    "\1\44\13\4\1\0\2\4\16\0\4\4\1\45\13\4"+
    "\1\0\2\4\16\0\11\4\1\46\6\4\1\0\2\4"+
    "\16\0\3\4\1\47\14\4\1\0\2\4\16\0\6\4"+
    "\1\50\11\4\6\0\1\30\33\0\2\32\16\0\20\32"+
    "\20\0\1\51\21\0\2\4\16\0\2\4\1\52\15\4"+
    "\1\0\2\4\16\0\1\53\17\4\1\0\2\4\16\0"+
    "\6\4\1\54\11\4\1\0\2\4\16\0\3\4\1\55"+
    "\10\4\1\56\3\4\1\0\2\4\16\0\1\57\3\4"+
    "\1\60\13\4\1\0\2\4\16\0\17\4\1\61\1\0"+
    "\2\4\16\0\1\62\17\4\1\0\2\4\16\0\6\4"+
    "\1\63\11\4\1\0\2\4\16\0\4\4\1\64\13\4"+
    "\1\0\2\4\16\0\11\4\1\65\6\4\1\0\2\4"+
    "\16\0\3\4\1\66\14\4\1\0\2\4\16\0\3\4"+
    "\1\67\14\4\1\0\2\4\16\0\7\4\1\70\10\4"+
    "\1\0\2\4\16\0\2\4\1\71\15\4\1\0\2\4"+
    "\16\0\1\4\1\72\16\4\1\0\2\4\16\0\1\4"+
    "\1\73\16\4\1\0\2\4\16\0\1\74\17\4\1\0"+
    "\2\4\16\0\13\4\1\75\4\4\1\0\2\4\16\0"+
    "\1\4\1\76\16\4\1\0\2\4\16\0\4\4\1\77"+
    "\13\4\1\0\2\4\16\0\1\4\1\100\16\4\1\0"+
    "\2\4\16\0\12\4\1\101\5\4\1\0\2\4\16\0"+
    "\4\4\1\102\13\4\1\0\2\4\16\0\2\4\1\103"+
    "\15\4\1\0\2\4\16\0\6\4\1\104\11\4\1\0"+
    "\2\4\16\0\2\4\1\105\15\4\1\0\2\4\16\0"+
    "\1\4\1\106\16\4\1\0\2\4\16\0\5\4\1\107"+
    "\12\4\1\0\2\4\16\0\2\4\1\110\15\4\1\0"+
    "\2\4\16\0\3\4\1\111\14\4\1\0\2\4\16\0"+
    "\16\4\1\112\1\4\1\0\2\4\16\0\1\4\1\113"+
    "\16\4\1\0\2\4\16\0\2\4\1\114\15\4\1\0"+
    "\2\4\16\0\1\115\17\4\1\0\2\4\16\0\4\4"+
    "\1\116\13\4\1\0\2\4\16\0\11\4\1\117\6\4"+
    "\1\0\2\4\16\0\1\120\17\4\1\0\2\4\16\0"+
    "\1\4\1\121\16\4\1\0\2\4\16\0\12\4\1\122"+
    "\5\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1947];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\5\1\1\11\1\1\5\11\10\1\1\11"+
    "\2\1\1\0\2\11\1\0\12\1\1\11\51\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	// kind of symbol that is currently read
	Symbols symbol;

	// Buffer used for text
	StringBuilder bufferText = new StringBuilder();

	// source of characters
	private PurgingReader reader;

	// the path of the file that is currently read
	private FileInfo file;

	private int tokenBegin = 0;
	private int tokenLength = 0;

	private Symbol pushedSymbol;

	private boolean eof = false;
	private boolean noNewline;
	private int line;	
	
	protected State states;

	protected int tokenbegin(){
		return tokenBegin;
	}

	public void setNoAutoNewlineAtEnd( boolean noNewline ){
		this.noNewline = noNewline;
	}

	public void setLine( int line ){
		this.line = line;
	}
	
	public int getLine(){
		return line;
	}

	public void setReader( PurgingReader reader ){
		this.reader = reader;
	}
	
	public void setFile( FileInfo file ){
		this.file = file;
	}
	
	public FileInfo getFile() {
        return file;
    }
    
 	private Symbol symbol( Symbols type ){
		return symbol( type, null );
	}
	private Symbol symbol( Symbols type, String value) {
		PreprocessorToken result;
	
		int[] begin;
		int[] end;
	
		int tokenEnd = tokenBegin + tokenLength;
		
		begin = new int[ tokenLength ];
		end = new int[ tokenLength ];
		for( int i = tokenBegin; i < tokenEnd; i++ ){
			begin[ i-tokenBegin ] = reader.popReadBaseBegin( i );
			end[ i-tokenBegin ] = reader.popReadBaseEnd( i );
		}
		
		
		result = new PreprocessorToken( 
			type,
			file, 
			line, 
			begin,
			end,
			value,
			states == null ? null : states.getInclusionPath() );
		
		tokenBegin += tokenLength;
		tokenLength = 0;
		
		return new Symbol( type.sym(), result );
	}
	
	private Symbol token( Symbols type ){
		String full = bufferText.toString();
		bufferText.setLength( 0 );
		if( full.length() > 0 ){
			Symbol result = symbol( Symbols.TEXT, full );
			push( token( type ) ); 
			return result;
		}
	
		updateTokenLength();
		return symbol( type, yytext() );
	}
	
	public void buffer(){
		bufferText.append( yytext() );
		updateTokenLength();
	}
	
	private void updateTokenLength(){
		tokenLength += yylength();
	}
	
	private void push( Symbol symbol ){
		pushedSymbol = symbol;
		yybegin( PUSHED );
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1292) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 13: 
          { return token( Symbols.CONCAT );
          }
        case 30: break;
        case 21: 
          { return token( Symbols.K_ERROR );
          }
        case 31: break;
        case 20: 
          { return token( Symbols.K_ENDIF );
          }
        case 32: break;
        case 23: 
          { return token( Symbols.K_UNDEF );
          }
        case 33: break;
        case 22: 
          { return token( Symbols.K_IFDEF );
          }
        case 34: break;
        case 2: 
          { return token( Symbols.IDENTIFIER );
          }
        case 35: break;
        case 6: 
          { return token( Symbols.QUOTE );
          }
        case 36: break;
        case 16: 
          { return token( Symbols.VARARG );
          }
        case 37: break;
        case 27: 
          { return token( Symbols.K_DEFINED );
          }
        case 38: break;
        case 24: 
          { return token( Symbols.K_DEFINE );
          }
        case 39: break;
        case 14: 
          { return token( Symbols.MASKED_QUOTE );
          }
        case 40: break;
        case 10: 
          { return token( Symbols.GREATER );
          }
        case 41: break;
        case 15: 
          { return token( Symbols.K_IF );
          }
        case 42: break;
        case 3: 
          { return token( Symbols.WHITESPACE );
          }
        case 43: break;
        case 8: 
          { return token( Symbols.COMMA );
          }
        case 44: break;
        case 12: 
          { yypushback( yylength() );
							yybegin( YYINITIAL );
							Symbol result = pushedSymbol;
							pushedSymbol = null;
							return result;
          }
        case 45: break;
        case 28: 
          { return token( Symbols.K_INCLUDE );
          }
        case 46: break;
        case 7: 
          { return token( Symbols.OPEN );
          }
        case 47: break;
        case 4: 
          { return token( Symbols.NEWLINE );
          }
        case 48: break;
        case 1: 
          { buffer();
          }
        case 49: break;
        case 19: 
          { return token( Symbols.K_LINE );
          }
        case 50: break;
        case 11: 
          { return token( Symbols.SMALLER );
          }
        case 51: break;
        case 25: 
          { return token( Symbols.K_IFNDEF );
          }
        case 52: break;
        case 9: 
          { return token( Symbols.CLOSE );
          }
        case 53: break;
        case 5: 
          { return token( Symbols.SHARP );
          }
        case 54: break;
        case 29: 
          { return token( Symbols.K_WARNING );
          }
        case 55: break;
        case 17: 
          { return token( Symbols.K_ELIF );
          }
        case 56: break;
        case 26: 
          { return token( Symbols.K_PRAGMA );
          }
        case 57: break;
        case 18: 
          { return token( Symbols.K_ELSE );
          }
        case 58: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	if( pushedSymbol != null ){
		Symbol result = pushedSymbol;
		pushedSymbol = null;
		return result;
	}

	String full = bufferText.toString();
	if( full.length() == 0 ){
		if( eof || noNewline )
			return symbol( Symbols.EOF );
			
		eof = true;
		return symbol( Symbols.NEWLINE );
	}
	else{
		bufferText.setLength( 0 );
		return symbol( Symbols.TEXT, full );
	}
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
